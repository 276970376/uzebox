
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003b12  00003c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b12  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000689  00800102  00800102  00003c22  2**5
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00003c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003362  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c40  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003682  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f4  00000000  00000000  0000b6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd4  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031bd  00000000  00000000  0000cc84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0000fe48  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__ctors_end>
       4:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
       8:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
       c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      14:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      18:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      1c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      20:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      24:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      28:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      2c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      30:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      34:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__vector_13>
      38:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__vector_14>
      3c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      40:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      44:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      48:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      4c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      50:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      54:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      58:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      5c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      60:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      64:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      68:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>
      6c:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	5a 55       	subi	r21, 0x5A	; 90
      72:	01 20       	and	r0, r1
      74:	01 01       	movw	r0, r2
      76:	00 38       	cpi	r16, 0x80	; 128
      78:	08 00       	.word	0x0008	; ????
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	3b 11 3e 11 3f 11 43 11 4a 11 52 11 57 11 5c 11     ;.>.?.C.J.R.W.\.
      ce:	5f 11 6f 11 72 11 75 11 b0 11 b3 11 b6 11           _.o.r.u.......

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <tiles>:
	...
     118:	00 00 7f 00 00 00 00 7f 7f 00 00 00 00 00 7f 00     ................
     128:	00 00 00 00 7f 00 00 00 00 00 7f 00 00 00 00 00     ................
     138:	7f 00 00 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     148:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 00 00 00 00     ................
     158:	7f 00 00 00 7f 7f 00 00 00 7f 00 00 00 00 7f 00     ................
     168:	00 00 00 00 7f 7f 7f 7f 7f 00 00 00 00 00 00 00     ................
     178:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 00 00 00 00     ................
     188:	7f 00 00 7f 7f 7f 00 00 00 00 00 00 7f 00 7f 00     ................
     198:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     1a8:	00 00 00 7f 00 00 00 00 7f 7f 00 00 00 7f 00 7f     ................
     1b8:	00 00 7f 00 00 7f 00 00 7f 7f 7f 7f 7f 00 00 00     ................
     1c8:	00 7f 00 00 00 00 00 7f 00 00 00 00 00 00 00 00     ................
     1d8:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     1e8:	00 00 7f 7f 7f 7f 00 00 00 00 00 00 7f 00 7f 00     ................
     1f8:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     208:	00 00 7f 7f 00 00 00 7f 00 00 00 00 7f 00 00 00     ................
     218:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     228:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     238:	7f 7f 7f 7f 7f 00 00 00 00 00 7f 00 00 00 00 7f     ................
     248:	00 00 00 00 7f 00 00 00 00 7f 00 00 00 00 00 7f     ................
     258:	00 00 00 00 00 7f 00 00 00 00 00 00 00 00 00 00     ................
     268:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     278:	7f 00 00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     288:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     298:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     2a8:	7f 00 00 7f 7f 7f 7f 00 00 00 00 00 7f 00 00 00     ................
     2b8:	00 7f 00 00 00 7f 7f 00 00 00 00 00 00 00 00 00     ................
     2c8:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     2d8:	7f 00 7f 00 00 00 7f 00 7f 7f 7f 7f 7f 00 7f 00     ................
     2e8:	00 00 7f 00 7f 00 00 00 7f 00 00 00 00 00 00 00     ................
     2f8:	7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     308:	7f 00 7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     318:	00 00 7f 00 7f 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     328:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     338:	00 00 7f 00 00 00 00 00 7f 00 00 00 00 00 7f 00     ................
     348:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     358:	7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     368:	7f 00 7f 00 00 00 7f 00 7f 00 00 00 7f 00 7f 00     ................
     378:	00 00 7f 00 7f 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     388:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     398:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 00 00 7f 00     ................
     3a8:	00 00 00 00 7f 7f 7f 7f 7f 00 00 00 00 00 00 00     ................
     3b8:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     3c8:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 00 00 7f 00     ................
     3d8:	00 00 00 00 7f 00 00 00 00 00 00 00 00 00 00 00     ................
     3e8:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 f8     ................
     3f8:	f8 00 f8 00 f8 00 f8 00 f8 f8 00 00 f8 00 f8 00     ................
     408:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     418:	00 00 f8 00 00 00 00 f8 f8 00 00 00 00 00 f8 00     ................
     428:	00 00 00 00 f8 00 00 00 00 00 f8 00 00 00 00 00     ................
     438:	f8 00 00 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     448:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 00 00 00 00     ................
     458:	f8 00 00 00 f8 f8 00 00 00 f8 00 00 00 00 f8 00     ................
     468:	00 00 00 00 f8 f8 f8 f8 f8 00 00 00 00 00 00 00     ................
     478:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 00 00 00 00     ................
     488:	f8 00 00 f8 f8 f8 00 00 00 00 00 00 f8 00 f8 00     ................
     498:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     4a8:	00 00 00 f8 00 00 00 00 f8 f8 00 00 00 f8 00 f8     ................
     4b8:	00 00 f8 00 00 f8 00 00 f8 f8 f8 f8 f8 00 00 00     ................
     4c8:	00 f8 00 00 00 00 00 f8 00 00 00 00 00 00 00 00     ................
     4d8:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     4e8:	00 00 f8 f8 f8 f8 00 00 00 00 00 00 f8 00 f8 00     ................
     4f8:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     508:	00 00 f8 f8 00 00 00 f8 00 00 00 00 f8 00 00 00     ................
     518:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     528:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     538:	f8 f8 f8 f8 f8 00 00 00 00 00 f8 00 00 00 00 f8     ................
     548:	00 00 00 00 f8 00 00 00 00 f8 00 00 00 00 00 f8     ................
     558:	00 00 00 00 00 f8 00 00 00 00 00 00 00 00 00 00     ................
     568:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     578:	f8 00 00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     588:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     598:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     5a8:	f8 00 00 f8 f8 f8 f8 00 00 00 00 00 f8 00 00 00     ................
     5b8:	00 f8 00 00 00 f8 f8 00 00 00 00 00 00 00 00 00     ................
     5c8:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     5d8:	f8 00 f8 00 00 00 f8 00 f8 f8 f8 f8 f8 00 f8 00     ................
     5e8:	00 00 f8 00 f8 00 00 00 f8 00 00 00 00 00 00 00     ................
     5f8:	f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     608:	f8 00 f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     618:	00 00 f8 00 f8 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     628:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     638:	00 00 f8 00 00 00 00 00 f8 00 00 00 00 00 f8 00     ................
     648:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     658:	f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     668:	f8 00 f8 00 00 00 f8 00 f8 00 00 00 f8 00 f8 00     ................
     678:	00 00 f8 00 f8 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     688:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     698:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 00 00 f8 00     ................
     6a8:	00 00 00 00 f8 f8 f8 f8 f8 00 00 00 00 00 00 00     ................
     6b8:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     6c8:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 00 00 f8 00     ................
     6d8:	00 00 00 00 f8 00 00 00 00 00 00 00 00 00 00 00     ................

000006e8 <font_tileset>:
	...
     728:	00 00 ff ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
     738:	00 00 ff ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
     748:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     758:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     768:	00 00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00     ................
     778:	00 00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     7a8:	00 ff 00 00 00 ff 00 00 ff ff ff ff ff ff ff 00     ................
     7b8:	00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00     ................
     7c8:	00 ff 00 00 00 ff 00 00 ff ff ff ff ff ff ff 00     ................
     7d8:	00 ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
     7e8:	00 00 00 ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
     7f8:	ff 00 00 ff 00 00 00 00 00 ff ff ff ff ff 00 00     ................
     808:	00 00 00 ff 00 00 ff 00 ff ff ff ff ff ff 00 00     ................
     818:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     828:	ff ff 00 00 00 00 00 00 ff ff 00 00 ff 00 00 00     ................
     838:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
     848:	00 ff 00 00 00 00 00 00 ff 00 00 ff ff 00 00 00     ................
     858:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     868:	00 00 ff ff 00 00 00 00 00 ff 00 00 ff 00 00 00     ................
     878:	00 ff ff 00 ff 00 00 00 00 ff ff ff 00 00 00 00     ................
     888:	ff 00 00 ff ff 00 ff 00 ff 00 00 00 ff ff 00 00     ................
     898:	00 ff ff ff ff 00 ff 00 00 00 00 00 00 00 00 00     ................
     8a8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
     8b8:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
	...
     8ec:	ff ff 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
     8fc:	00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff 00     ................
     90c:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00     ................
     91c:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 ff ff     ................
	...
     934:	ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     944:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     954:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
     970:	00 00 00 ff 00 00 00 00 00 ff 00 ff 00 ff 00 00     ................
     980:	00 00 ff ff ff 00 00 00 00 ff 00 ff 00 ff 00 00     ................
     990:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9b0:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
     9c0:	00 ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00     ................
     9d0:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a08:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
     a18:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a40:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     a90:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
     aac:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     abc:	ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
     acc:	00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00     ................
	...
     ae8:	00 00 ff ff ff 00 00 00 00 ff 00 00 ff ff 00 00     ................
     af8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     b08:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 ff 00 00     ................
     b18:	00 00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     b28:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
     b38:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
     b48:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
     b58:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
     b68:	00 ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
     b78:	00 00 00 00 ff ff ff 00 00 00 ff ff ff ff 00 00     ................
     b88:	00 ff ff ff ff 00 00 00 ff ff ff 00 00 00 00 00     ................
     b98:	ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
     ba8:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
     bb8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
     bc8:	00 00 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     bd8:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     be8:	00 00 00 ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
     bf8:	00 ff ff 00 ff ff 00 00 ff ff 00 00 ff ff 00 00     ................
     c08:	ff ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
     c18:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     c28:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00 00     ................
     c38:	ff ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
     c48:	00 00 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     c58:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     c68:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
     c78:	ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00     ................
     c88:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     c98:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     ca8:	ff ff ff ff ff ff ff 00 ff ff 00 00 00 ff ff 00     ................
     cb8:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
     cc8:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
     cd8:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ce8:	00 ff ff ff ff 00 00 00 ff ff 00 00 00 ff 00 00     ................
     cf8:	ff ff ff 00 00 ff 00 00 00 ff ff ff ff 00 00 00     ................
     d08:	ff 00 00 ff ff ff ff 00 ff 00 00 00 00 ff ff 00     ................
     d18:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     d28:	00 ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
     d38:	ff ff 00 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
     d48:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
     d58:	00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d70:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
     d88:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
     db0:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
     dc8:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
     dd8:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     de8:	00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00     ................
     df8:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     e08:	00 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
     e18:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e38:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     e48:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
     e68:	00 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
     e78:	00 00 00 00 ff 00 00 00 00 00 00 00 00 ff 00 00     ................
     e88:	00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00     ................
     e98:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ea8:	00 ff ff ff ff ff 00 00 ff ff ff ff ff ff ff 00     ................
     eb8:	ff ff 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
     ec8:	00 00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     ed8:	00 00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     ee8:	00 00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00     ................
     ef8:	ff 00 00 ff 00 ff 00 00 ff 00 ff 00 ff ff 00 00     ................
     f08:	ff 00 00 ff ff 00 00 00 00 ff 00 00 00 00 00 00     ................
     f18:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     f28:	00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
     f38:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     f48:	ff ff ff ff ff ff ff 00 ff ff 00 00 00 ff ff 00     ................
     f58:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
     f68:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
     f78:	ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff 00 00     ................
     f88:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
     f98:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     fa8:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
     fb8:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
     fc8:	ff ff 00 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
     fd8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     fe8:	ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00 00     ................
     ff8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1008:	ff ff 00 00 00 ff ff 00 ff ff 00 00 ff ff 00 00     ................
    1018:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    1028:	ff ff ff ff ff ff ff 00 ff ff 00 00 00 00 00 00     ................
    1038:	ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00     ................
    1048:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    1058:	ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    1068:	ff ff ff ff ff ff ff 00 ff ff 00 00 00 00 00 00     ................
    1078:	ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00 00     ................
    1088:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    1098:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    10a8:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    10b8:	ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff ff 00     ................
    10c8:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    10d8:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    10e8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    10f8:	ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff ff 00     ................
    1108:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1118:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
    1128:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    1138:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    1148:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    1158:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    1168:	00 00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    1178:	00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00     ................
    1188:	00 00 00 00 ff ff 00 00 ff 00 00 00 ff ff 00 00     ................
    1198:	00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    11a8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 ff ff 00 00     ................
    11b8:	ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00 00     ................
    11c8:	ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00 00     ................
    11d8:	ff ff 00 00 ff ff ff 00 00 00 00 00 00 00 00 00     ................
    11e8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    11f8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    1208:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    1218:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    1228:	ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff 00     ................
    1238:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff 00     ................
    1248:	ff ff 00 ff 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1258:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
    1268:	ff ff 00 00 00 ff ff 00 ff ff ff 00 00 ff ff 00     ................
    1278:	ff ff ff ff 00 ff ff 00 ff ff ff ff ff ff ff 00     ................
    1288:	ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff ff 00     ................
    1298:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
    12a8:	00 ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
    12b8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    12c8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    12d8:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    12e8:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
    12f8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1308:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00 00     ................
    1318:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1328:	00 ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
    1338:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1348:	ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00 00     ................
    1358:	00 ff ff ff ff 00 ff 00 00 00 00 00 00 00 00 00     ................
    1368:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 ff ff 00     ................
    1378:	ff ff 00 00 00 ff ff 00 ff ff 00 00 ff ff ff 00     ................
    1388:	ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00 00     ................
    1398:	ff ff 00 00 ff ff ff 00 00 00 00 00 00 00 00 00     ................
    13a8:	00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00 00     ................
    13b8:	ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00 00     ................
    13c8:	00 00 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    13d8:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    13e8:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    13f8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    1408:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    1418:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    1428:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1438:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1448:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1458:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    1468:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    1478:	ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff 00     ................
    1488:	00 ff ff ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    1498:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14a8:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff 00     ................
    14b8:	ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff 00     ................
    14c8:	ff ff ff ff ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    14d8:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
    14e8:	ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff 00     ................
    14f8:	00 ff ff ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    1508:	00 ff ff ff ff ff 00 00 ff ff ff 00 ff ff ff 00     ................
    1518:	ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
    1528:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    1538:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    1548:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    1558:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    1568:	ff ff ff ff ff ff ff 00 00 00 00 00 ff ff ff 00     ................
    1578:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    1588:	00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00     ................
    1598:	ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    15a8:	00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00 00     ................
    15b8:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    15c8:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    15d8:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    15e8:	00 00 ff ff ff ff 00 00 00 ff 00 00 00 00 ff 00     ................
    15f8:	ff 00 00 ff ff 00 00 ff ff 00 ff 00 00 00 00 ff     ................
    1608:	ff 00 ff 00 00 00 00 ff ff 00 00 ff ff 00 00 ff     ................
    1618:	00 ff 00 00 00 00 ff 00 00 00 ff ff ff ff 00 00     ................
    1628:	00 00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00     ................
    1638:	00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00     ................
    1648:	00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00     ................
    1658:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    1668:	00 00 ff 00 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    1678:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    16d8:	ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................

000016e8 <fileName>:
    16e8:	53 44 5f 4d 55 53 49 43 44 41 54 00                 SD_MUSICDAT.

000016f4 <__c.2251>:
    16f4:	46 49 4c 45 20 53 44 5f 4d 55 53 49 43 2e 44 41     FILE SD_MUSIC.DA
    1704:	54 20 4e 4f 54 20 46 4f 55 4e 44 20 4f 4e 20 53     T NOT FOUND ON S
    1714:	44 20 43 41 52 44 00 00                             D CARD..

0000171c <__ctors_end>:
    171c:	11 24       	eor	r1, r1
    171e:	1f be       	out	0x3f, r1	; 63
    1720:	cf ef       	ldi	r28, 0xFF	; 255
    1722:	d0 e1       	ldi	r29, 0x10	; 16
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	cd bf       	out	0x3d, r28	; 61

00001728 <__do_copy_data>:
    1728:	11 e0       	ldi	r17, 0x01	; 1
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b1 e0       	ldi	r27, 0x01	; 1
    172e:	e2 e1       	ldi	r30, 0x12	; 18
    1730:	fb e3       	ldi	r31, 0x3B	; 59
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <__do_copy_data+0x10>
    1734:	05 90       	lpm	r0, Z+
    1736:	0d 92       	st	X+, r0
    1738:	a2 30       	cpi	r26, 0x02	; 2
    173a:	b1 07       	cpc	r27, r17
    173c:	d9 f7       	brne	.-10     	; 0x1734 <__do_copy_data+0xc>

0000173e <__do_clear_bss>:
    173e:	27 e0       	ldi	r18, 0x07	; 7
    1740:	a2 e0       	ldi	r26, 0x02	; 2
    1742:	b1 e0       	ldi	r27, 0x01	; 1
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <.do_clear_bss_start>

00001746 <.do_clear_bss_loop>:
    1746:	1d 92       	st	X+, r1

00001748 <.do_clear_bss_start>:
    1748:	ab 38       	cpi	r26, 0x8B	; 139
    174a:	b2 07       	cpc	r27, r18
    174c:	e1 f7       	brne	.-8      	; 0x1746 <.do_clear_bss_loop>

0000174e <wdt_init>:
	  if (j == count) {
		 WriteEeprom(i*EEPROM_BLOCK_SIZE,(u8)EEPROM_FREE_BLOCK);
		 WriteEeprom(i*EEPROM_BLOCK_SIZE+1,(u8)(EEPROM_FREE_BLOCK>>8));
	  }
   }
}
    174e:	14 be       	out	0x34, r1	; 52
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	a8 95       	wdr
    1756:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    175a:	88 61       	ori	r24, 0x18	; 24
    175c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1760:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1764:	0f be       	out	0x3f, r0	; 63

00001766 <Initialize>:
    1766:	0e 94 24 11 	call	0x2248	; 0x2248 <isEepromFormatted>
    176a:	81 11       	cpse	r24, r1
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <Initialize+0xc>
    176e:	0e 94 02 11 	call	0x2204	; 0x2204 <FormatEeprom>
    1772:	f8 94       	cli
    1774:	e1 ea       	ldi	r30, 0xA1	; 161
    1776:	f4 e0       	ldi	r31, 0x04	; 4
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	81 93       	st	Z+, r24
    177c:	26 e0       	ldi	r18, 0x06	; 6
    177e:	ed 3a       	cpi	r30, 0xAD	; 173
    1780:	f2 07       	cpc	r31, r18
    1782:	d9 f7       	brne	.-10     	; 0x177a <Initialize+0x14>
    1784:	81 ea       	ldi	r24, 0xA1	; 161
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <mix_pos+0x1>
    178c:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <mix_pos>
    1790:	10 92 af 06 	sts	0x06AF, r1	; 0x8006af <mix_bank>
    1794:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <mixer>
    1798:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <tr2_vol>
    179c:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <tr3_vol>
    17a0:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <tr4_vol>
    17a4:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <sync_phase>
    17a8:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <sync_flags>
    17ac:	82 e1       	ldi	r24, 0x12	; 18
    17ae:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <sync_pulse>
    17b2:	80 ee       	ldi	r24, 0xE0	; 224
    17b4:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <render_lines_count>
    17b8:	84 e1       	ldi	r24, 0x14	; 20
    17ba:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <first_render_line>
    17be:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <joypad1_status_hi+0x1>
    17c2:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <joypad1_status_hi>
    17c6:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <joypad2_status_hi+0x1>
    17ca:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <joypad2_status_hi>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <sound_enabled>
    17d4:	0e 94 a4 1b 	call	0x3748	; 0x3748 <InitializeVideoMode>
    17d8:	80 e9       	ldi	r24, 0x90	; 144
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	fc 01       	movw	r30, r24
    17de:	25 91       	lpm	r18, Z+
    17e0:	34 91       	lpm	r19, Z
    17e2:	f9 01       	movw	r30, r18
    17e4:	ff 27       	eor	r31, r31
    17e6:	30 83       	st	Z, r19
    17e8:	02 96       	adiw	r24, 0x02	; 2
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	8e 3b       	cpi	r24, 0xBE	; 190
    17ee:	92 07       	cpc	r25, r18
    17f0:	a9 f7       	brne	.-22     	; 0x17dc <Initialize+0x76>
    17f2:	78 94       	sei
    17f4:	0e 94 a3 1b 	call	0x3746	; 0x3746 <DisplayLogo>
    17f8:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <main>
    17fc:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <_exit>

00001800 <__bad_interrupt>:
    1800:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001804 <sub_video_mode3>:
	brne .-4 ;~1 us
	nop
	sbiw r24,1
	brne WaitUs

	ret
    1804:	0b e9       	ldi	r16, 0x9B	; 155
    1806:	0a 95       	dec	r16
    1808:	f1 f7       	brne	.-4      	; 0x1806 <sub_video_mode3+0x2>
    180a:	00 91 ce 06 	lds	r16, 0x06CE	; 0x8006ce <userRamTilesCount>
    180e:	e8 e6       	ldi	r30, 0x68	; 104
    1810:	f4 e0       	ldi	r31, 0x04	; 4
    1812:	23 e0       	ldi	r18, 0x03	; 3
    1814:	02 9f       	mul	r16, r18
    1816:	e0 0d       	add	r30, r0
    1818:	f1 1d       	adc	r31, r1
    181a:	c0 e2       	ldi	r28, 0x20	; 32
    181c:	d1 e0       	ldi	r29, 0x01	; 1
    181e:	20 91 86 07 	lds	r18, 0x0786	; 0x800786 <free_tile_index>
    1822:	3c e3       	ldi	r19, 0x3C	; 60
    1824:	32 1b       	sub	r19, r18
    1826:	30 0f       	add	r19, r16
    1828:	20 17       	cp	r18, r16
    182a:	51 f0       	breq	.+20     	; 0x1840 <no_ramtiles>
    182c:	00 00       	nop
	...

00001830 <upd_loop>:
    1830:	a1 91       	ld	r26, Z+
    1832:	b1 91       	ld	r27, Z+
    1834:	1c 91       	ld	r17, X
    1836:	11 93       	st	Z+, r17
    1838:	0c 93       	st	X, r16
    183a:	03 95       	inc	r16
    183c:	02 17       	cp	r16, r18
    183e:	c0 f3       	brcs	.-16     	; 0x1830 <upd_loop>

00001840 <no_ramtiles>:
    1840:	13 e0       	ldi	r17, 0x03	; 3
    1842:	1a 95       	dec	r17
    1844:	f1 f7       	brne	.-4      	; 0x1842 <no_ramtiles+0x2>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <no_ramtiles+0x8>
    1848:	3a 95       	dec	r19
    184a:	d1 f7       	brne	.-12     	; 0x1840 <no_ramtiles>
    184c:	20 90 74 04 	lds	r2, 0x0474	; 0x800474 <overlay_tile_table>
    1850:	30 90 75 04 	lds	r3, 0x0475	; 0x800475 <overlay_tile_table+0x1>
    1854:	00 91 70 04 	lds	r16, 0x0470	; 0x800470 <tile_table_lo>
    1858:	10 91 71 04 	lds	r17, 0x0471	; 0x800471 <tile_table_hi>
    185c:	68 01       	movw	r12, r16
    185e:	38 01       	movw	r6, r16
    1860:	8c e1       	ldi	r24, 0x1C	; 28
    1862:	c0 e2       	ldi	r28, 0x20	; 32
    1864:	d1 e0       	ldi	r29, 0x01	; 1
    1866:	4e 01       	movw	r8, r28
    1868:	00 24       	eor	r0, r0
    186a:	30 91 73 04 	lds	r19, 0x0473	; 0x800473 <Screen>
    186e:	30 30       	cpi	r19, 0x00	; 0
    1870:	09 f0       	breq	.+2      	; 0x1874 <no_ramtiles+0x34>
    1872:	c8 e6       	ldi	r28, 0x68	; 104
    1874:	09 f0       	breq	.+2      	; 0x1878 <no_ramtiles+0x38>
    1876:	d4 e0       	ldi	r29, 0x04	; 4
    1878:	09 f0       	breq	.+2      	; 0x187c <no_ramtiles+0x3c>
    187a:	83 2f       	mov	r24, r19
    187c:	09 f0       	breq	.+2      	; 0x1880 <no_ramtiles+0x40>
    187e:	61 01       	movw	r12, r2
    1880:	00 ee       	ldi	r16, 0xE0	; 224
    1882:	a0 2e       	mov	r10, r16
    1884:	66 27       	eor	r22, r22
    1886:	78 e0       	ldi	r23, 0x08	; 8

00001888 <next_tile_line>:
    1888:	0c d3       	rcall	.+1560   	; 0x1ea2 <hsync_pulse>
    188a:	36 e2       	ldi	r19, 0x26	; 38
    188c:	3a 95       	dec	r19
    188e:	f1 f7       	brne	.-4      	; 0x188c <next_tile_line+0x4>
    1890:	00 00       	nop
    1892:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <render_tile_line>
    1896:	3f e0       	ldi	r19, 0x0F	; 15
    1898:	3a 95       	dec	r19
    189a:	f1 f7       	brne	.-4      	; 0x1898 <next_tile_line+0x10>
    189c:	00 00       	nop
    189e:	00 00       	nop
    18a0:	aa 94       	dec	r10
    18a2:	a9 f0       	breq	.+42     	; 0x18ce <frame_end>
    18a4:	63 95       	inc	r22
    18a6:	c8 95       	lpm
    18a8:	68 30       	cpi	r22, 0x08	; 8
    18aa:	31 f0       	breq	.+12     	; 0x18b8 <next_tile_row>
    18ac:	33 e0       	ldi	r19, 0x03	; 3
    18ae:	3a 95       	dec	r19
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <next_tile_line+0x26>
    18b2:	00 00       	nop
    18b4:	00 00       	nop
    18b6:	e8 cf       	rjmp	.-48     	; 0x1888 <next_tile_line>

000018b8 <next_tile_row>:
    18b8:	66 27       	eor	r22, r22
    18ba:	00 24       	eor	r0, r0
    18bc:	3e e1       	ldi	r19, 0x1E	; 30
    18be:	c3 0f       	add	r28, r19
    18c0:	d0 1d       	adc	r29, r0
    18c2:	8a 95       	dec	r24
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <next_tile_row+0x10>
    18c6:	e4 01       	movw	r28, r8
    18c8:	09 f4       	brne	.+2      	; 0x18cc <next_tile_row+0x14>
    18ca:	63 01       	movw	r12, r6
    18cc:	dd cf       	rjmp	.-70     	; 0x1888 <next_tile_line>

000018ce <frame_end>:
    18ce:	36 e0       	ldi	r19, 0x06	; 6
    18d0:	3a 95       	dec	r19
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <frame_end+0x2>
    18d4:	e6 d2       	rcall	.+1484   	; 0x1ea2 <hsync_pulse>
    18d6:	11 24       	eor	r1, r1
    18d8:	0e 94 80 1b 	call	0x3700	; 0x3700 <RestoreBackground>
    18dc:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <sync_flags>
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	e1 60       	ori	r30, 0x01	; 1
    18e4:	e4 27       	eor	r30, r20
    18e6:	e0 93 78 04 	sts	0x0478, r30	; 0x800478 <sync_flags>
    18ea:	e2 e0       	ldi	r30, 0x02	; 2
    18ec:	e0 93 36 00 	sts	0x0036, r30	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
    18f0:	11 24       	eor	r1, r1
    18f2:	08 95       	ret

000018f4 <render_tile_line>:
    18f4:	de 01       	movw	r26, r28
    18f6:	67 9f       	mul	r22, r23
    18f8:	86 01       	movw	r16, r12
    18fa:	00 50       	subi	r16, 0x00	; 0
    18fc:	10 40       	sbci	r17, 0x00	; 0
    18fe:	00 0d       	add	r16, r0
    1900:	11 1d       	adc	r17, r1
    1902:	18 01       	movw	r2, r16
    1904:	08 e6       	ldi	r16, 0x68	; 104
    1906:	14 e0       	ldi	r17, 0x04	; 4
    1908:	00 0d       	add	r16, r0
    190a:	11 1d       	adc	r17, r1
    190c:	28 01       	movw	r4, r16
    190e:	30 e4       	ldi	r19, 0x40	; 64
    1910:	1e e1       	ldi	r17, 0x1E	; 30
    1912:	2d 91       	ld	r18, X+
    1914:	23 9f       	mul	r18, r19
    1916:	a1 01       	movw	r20, r2
    1918:	20 30       	cpi	r18, 0x00	; 0
    191a:	08 f4       	brcc	.+2      	; 0x191e <render_tile_line+0x2a>
    191c:	a2 01       	movw	r20, r4
    191e:	04 0e       	add	r0, r20
    1920:	15 1e       	adc	r1, r21
    1922:	f0 01       	movw	r30, r0
    1924:	20 30       	cpi	r18, 0x00	; 0
    1926:	f0 f0       	brcs	.+60     	; 0x1964 <ramloop>

00001928 <romloop>:
    1928:	05 91       	lpm	r16, Z+
    192a:	08 b9       	out	0x08, r16	; 8
    192c:	2d 91       	ld	r18, X+
    192e:	05 91       	lpm	r16, Z+
    1930:	08 b9       	out	0x08, r16	; 8
    1932:	23 9f       	mul	r18, r19
    1934:	05 91       	lpm	r16, Z+
    1936:	08 b9       	out	0x08, r16	; 8
    1938:	20 30       	cpi	r18, 0x00	; 0
    193a:	00 00       	nop
    193c:	05 91       	lpm	r16, Z+
    193e:	08 b9       	out	0x08, r16	; 8
    1940:	08 f4       	brcc	.+2      	; 0x1944 <romloop+0x1c>
    1942:	a2 01       	movw	r20, r4
    1944:	05 91       	lpm	r16, Z+
    1946:	08 b9       	out	0x08, r16	; 8
    1948:	04 0e       	add	r0, r20
    194a:	15 1e       	adc	r1, r21
    194c:	05 91       	lpm	r16, Z+
    194e:	08 b9       	out	0x08, r16	; 8
    1950:	20 30       	cpi	r18, 0x00	; 0
    1952:	1a 95       	dec	r17
    1954:	05 91       	lpm	r16, Z+
    1956:	08 b9       	out	0x08, r16	; 8
    1958:	05 91       	lpm	r16, Z+
    195a:	31 f1       	breq	.+76     	; 0x19a8 <end>
    195c:	f0 01       	movw	r30, r0
    195e:	08 b9       	out	0x08, r16	; 8
    1960:	18 f7       	brcc	.-58     	; 0x1928 <romloop>
    1962:	00 c0       	rjmp	.+0      	; 0x1964 <ramloop>

00001964 <ramloop>:
    1964:	01 91       	ld	r16, Z+
    1966:	08 b9       	out	0x08, r16	; 8
    1968:	2d 91       	ld	r18, X+
    196a:	01 91       	ld	r16, Z+
    196c:	00 00       	nop
    196e:	08 b9       	out	0x08, r16	; 8
    1970:	23 9f       	mul	r18, r19
    1972:	01 91       	ld	r16, Z+
    1974:	00 00       	nop
    1976:	08 b9       	out	0x08, r16	; 8
    1978:	20 30       	cpi	r18, 0x00	; 0
    197a:	00 c0       	rjmp	.+0      	; 0x197c <ramloop+0x18>
    197c:	01 91       	ld	r16, Z+
    197e:	08 b9       	out	0x08, r16	; 8
    1980:	08 f0       	brcs	.+2      	; 0x1984 <ramloop+0x20>
    1982:	a1 01       	movw	r20, r2
    1984:	01 91       	ld	r16, Z+
    1986:	04 0e       	add	r0, r20
    1988:	08 b9       	out	0x08, r16	; 8
    198a:	15 1e       	adc	r1, r21
    198c:	00 c0       	rjmp	.+0      	; 0x198e <ramloop+0x2a>
    198e:	01 91       	ld	r16, Z+
    1990:	08 b9       	out	0x08, r16	; 8
    1992:	20 30       	cpi	r18, 0x00	; 0
    1994:	00 c0       	rjmp	.+0      	; 0x1996 <ramloop+0x32>
    1996:	01 91       	ld	r16, Z+
    1998:	08 b9       	out	0x08, r16	; 8
    199a:	01 91       	ld	r16, Z+
    199c:	1a 95       	dec	r17
    199e:	21 f0       	breq	.+8      	; 0x19a8 <end>
    19a0:	f0 01       	movw	r30, r0
    19a2:	08 b9       	out	0x08, r16	; 8
    19a4:	08 f6       	brcc	.-126    	; 0x1928 <romloop>
    19a6:	de cf       	rjmp	.-68     	; 0x1964 <ramloop>

000019a8 <end>:
    19a8:	08 b9       	out	0x08, r16	; 8
    19aa:	00 27       	eor	r16, r16
    19ac:	c8 95       	lpm
    19ae:	00 00       	nop
    19b0:	08 b9       	out	0x08, r16	; 8
    19b2:	08 95       	ret

000019b4 <CopyFlashTile>:
    19b4:	20 e4       	ldi	r18, 0x40	; 64
    19b6:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <tile_table_lo>
    19ba:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <tile_table_hi>
    19be:	82 9f       	mul	r24, r18
    19c0:	e0 0d       	add	r30, r0
    19c2:	f1 1d       	adc	r31, r1
    19c4:	a8 e6       	ldi	r26, 0x68	; 104
    19c6:	b4 e0       	ldi	r27, 0x04	; 4
    19c8:	62 9f       	mul	r22, r18
    19ca:	a0 0d       	add	r26, r0
    19cc:	b1 1d       	adc	r27, r1
    19ce:	15 90       	lpm	r1, Z+
    19d0:	1d 92       	st	X+, r1
    19d2:	15 90       	lpm	r1, Z+
    19d4:	1d 92       	st	X+, r1
    19d6:	15 90       	lpm	r1, Z+
    19d8:	1d 92       	st	X+, r1
    19da:	15 90       	lpm	r1, Z+
    19dc:	1d 92       	st	X+, r1
    19de:	15 90       	lpm	r1, Z+
    19e0:	1d 92       	st	X+, r1
    19e2:	15 90       	lpm	r1, Z+
    19e4:	1d 92       	st	X+, r1
    19e6:	15 90       	lpm	r1, Z+
    19e8:	1d 92       	st	X+, r1
    19ea:	15 90       	lpm	r1, Z+
    19ec:	1d 92       	st	X+, r1
    19ee:	15 90       	lpm	r1, Z+
    19f0:	1d 92       	st	X+, r1
    19f2:	15 90       	lpm	r1, Z+
    19f4:	1d 92       	st	X+, r1
    19f6:	15 90       	lpm	r1, Z+
    19f8:	1d 92       	st	X+, r1
    19fa:	15 90       	lpm	r1, Z+
    19fc:	1d 92       	st	X+, r1
    19fe:	15 90       	lpm	r1, Z+
    1a00:	1d 92       	st	X+, r1
    1a02:	15 90       	lpm	r1, Z+
    1a04:	1d 92       	st	X+, r1
    1a06:	15 90       	lpm	r1, Z+
    1a08:	1d 92       	st	X+, r1
    1a0a:	15 90       	lpm	r1, Z+
    1a0c:	1d 92       	st	X+, r1
    1a0e:	15 90       	lpm	r1, Z+
    1a10:	1d 92       	st	X+, r1
    1a12:	15 90       	lpm	r1, Z+
    1a14:	1d 92       	st	X+, r1
    1a16:	15 90       	lpm	r1, Z+
    1a18:	1d 92       	st	X+, r1
    1a1a:	15 90       	lpm	r1, Z+
    1a1c:	1d 92       	st	X+, r1
    1a1e:	15 90       	lpm	r1, Z+
    1a20:	1d 92       	st	X+, r1
    1a22:	15 90       	lpm	r1, Z+
    1a24:	1d 92       	st	X+, r1
    1a26:	15 90       	lpm	r1, Z+
    1a28:	1d 92       	st	X+, r1
    1a2a:	15 90       	lpm	r1, Z+
    1a2c:	1d 92       	st	X+, r1
    1a2e:	15 90       	lpm	r1, Z+
    1a30:	1d 92       	st	X+, r1
    1a32:	15 90       	lpm	r1, Z+
    1a34:	1d 92       	st	X+, r1
    1a36:	15 90       	lpm	r1, Z+
    1a38:	1d 92       	st	X+, r1
    1a3a:	15 90       	lpm	r1, Z+
    1a3c:	1d 92       	st	X+, r1
    1a3e:	15 90       	lpm	r1, Z+
    1a40:	1d 92       	st	X+, r1
    1a42:	15 90       	lpm	r1, Z+
    1a44:	1d 92       	st	X+, r1
    1a46:	15 90       	lpm	r1, Z+
    1a48:	1d 92       	st	X+, r1
    1a4a:	15 90       	lpm	r1, Z+
    1a4c:	1d 92       	st	X+, r1
    1a4e:	15 90       	lpm	r1, Z+
    1a50:	1d 92       	st	X+, r1
    1a52:	15 90       	lpm	r1, Z+
    1a54:	1d 92       	st	X+, r1
    1a56:	15 90       	lpm	r1, Z+
    1a58:	1d 92       	st	X+, r1
    1a5a:	15 90       	lpm	r1, Z+
    1a5c:	1d 92       	st	X+, r1
    1a5e:	15 90       	lpm	r1, Z+
    1a60:	1d 92       	st	X+, r1
    1a62:	15 90       	lpm	r1, Z+
    1a64:	1d 92       	st	X+, r1
    1a66:	15 90       	lpm	r1, Z+
    1a68:	1d 92       	st	X+, r1
    1a6a:	15 90       	lpm	r1, Z+
    1a6c:	1d 92       	st	X+, r1
    1a6e:	15 90       	lpm	r1, Z+
    1a70:	1d 92       	st	X+, r1
    1a72:	15 90       	lpm	r1, Z+
    1a74:	1d 92       	st	X+, r1
    1a76:	15 90       	lpm	r1, Z+
    1a78:	1d 92       	st	X+, r1
    1a7a:	15 90       	lpm	r1, Z+
    1a7c:	1d 92       	st	X+, r1
    1a7e:	15 90       	lpm	r1, Z+
    1a80:	1d 92       	st	X+, r1
    1a82:	15 90       	lpm	r1, Z+
    1a84:	1d 92       	st	X+, r1
    1a86:	15 90       	lpm	r1, Z+
    1a88:	1d 92       	st	X+, r1
    1a8a:	15 90       	lpm	r1, Z+
    1a8c:	1d 92       	st	X+, r1
    1a8e:	15 90       	lpm	r1, Z+
    1a90:	1d 92       	st	X+, r1
    1a92:	15 90       	lpm	r1, Z+
    1a94:	1d 92       	st	X+, r1
    1a96:	15 90       	lpm	r1, Z+
    1a98:	1d 92       	st	X+, r1
    1a9a:	15 90       	lpm	r1, Z+
    1a9c:	1d 92       	st	X+, r1
    1a9e:	15 90       	lpm	r1, Z+
    1aa0:	1d 92       	st	X+, r1
    1aa2:	15 90       	lpm	r1, Z+
    1aa4:	1d 92       	st	X+, r1
    1aa6:	15 90       	lpm	r1, Z+
    1aa8:	1d 92       	st	X+, r1
    1aaa:	15 90       	lpm	r1, Z+
    1aac:	1d 92       	st	X+, r1
    1aae:	15 90       	lpm	r1, Z+
    1ab0:	1d 92       	st	X+, r1
    1ab2:	15 90       	lpm	r1, Z+
    1ab4:	1d 92       	st	X+, r1
    1ab6:	15 90       	lpm	r1, Z+
    1ab8:	1d 92       	st	X+, r1
    1aba:	15 90       	lpm	r1, Z+
    1abc:	1d 92       	st	X+, r1
    1abe:	15 90       	lpm	r1, Z+
    1ac0:	1d 92       	st	X+, r1
    1ac2:	15 90       	lpm	r1, Z+
    1ac4:	1d 92       	st	X+, r1
    1ac6:	15 90       	lpm	r1, Z+
    1ac8:	1d 92       	st	X+, r1
    1aca:	15 90       	lpm	r1, Z+
    1acc:	1d 92       	st	X+, r1
    1ace:	11 24       	eor	r1, r1
    1ad0:	08 95       	ret

00001ad2 <CopyRamTile>:
    1ad2:	20 e4       	ldi	r18, 0x40	; 64
    1ad4:	e8 e6       	ldi	r30, 0x68	; 104
    1ad6:	f4 e0       	ldi	r31, 0x04	; 4
    1ad8:	82 9f       	mul	r24, r18
    1ada:	e0 0d       	add	r30, r0
    1adc:	f1 1d       	adc	r31, r1
    1ade:	a8 e6       	ldi	r26, 0x68	; 104
    1ae0:	b4 e0       	ldi	r27, 0x04	; 4
    1ae2:	62 9f       	mul	r22, r18
    1ae4:	a0 0d       	add	r26, r0
    1ae6:	b1 1d       	adc	r27, r1
    1ae8:	11 90       	ld	r1, Z+
    1aea:	1d 92       	st	X+, r1
    1aec:	11 90       	ld	r1, Z+
    1aee:	1d 92       	st	X+, r1
    1af0:	11 90       	ld	r1, Z+
    1af2:	1d 92       	st	X+, r1
    1af4:	11 90       	ld	r1, Z+
    1af6:	1d 92       	st	X+, r1
    1af8:	11 90       	ld	r1, Z+
    1afa:	1d 92       	st	X+, r1
    1afc:	11 90       	ld	r1, Z+
    1afe:	1d 92       	st	X+, r1
    1b00:	11 90       	ld	r1, Z+
    1b02:	1d 92       	st	X+, r1
    1b04:	11 90       	ld	r1, Z+
    1b06:	1d 92       	st	X+, r1
    1b08:	11 90       	ld	r1, Z+
    1b0a:	1d 92       	st	X+, r1
    1b0c:	11 90       	ld	r1, Z+
    1b0e:	1d 92       	st	X+, r1
    1b10:	11 90       	ld	r1, Z+
    1b12:	1d 92       	st	X+, r1
    1b14:	11 90       	ld	r1, Z+
    1b16:	1d 92       	st	X+, r1
    1b18:	11 90       	ld	r1, Z+
    1b1a:	1d 92       	st	X+, r1
    1b1c:	11 90       	ld	r1, Z+
    1b1e:	1d 92       	st	X+, r1
    1b20:	11 90       	ld	r1, Z+
    1b22:	1d 92       	st	X+, r1
    1b24:	11 90       	ld	r1, Z+
    1b26:	1d 92       	st	X+, r1
    1b28:	11 90       	ld	r1, Z+
    1b2a:	1d 92       	st	X+, r1
    1b2c:	11 90       	ld	r1, Z+
    1b2e:	1d 92       	st	X+, r1
    1b30:	11 90       	ld	r1, Z+
    1b32:	1d 92       	st	X+, r1
    1b34:	11 90       	ld	r1, Z+
    1b36:	1d 92       	st	X+, r1
    1b38:	11 90       	ld	r1, Z+
    1b3a:	1d 92       	st	X+, r1
    1b3c:	11 90       	ld	r1, Z+
    1b3e:	1d 92       	st	X+, r1
    1b40:	11 90       	ld	r1, Z+
    1b42:	1d 92       	st	X+, r1
    1b44:	11 90       	ld	r1, Z+
    1b46:	1d 92       	st	X+, r1
    1b48:	11 90       	ld	r1, Z+
    1b4a:	1d 92       	st	X+, r1
    1b4c:	11 90       	ld	r1, Z+
    1b4e:	1d 92       	st	X+, r1
    1b50:	11 90       	ld	r1, Z+
    1b52:	1d 92       	st	X+, r1
    1b54:	11 90       	ld	r1, Z+
    1b56:	1d 92       	st	X+, r1
    1b58:	11 90       	ld	r1, Z+
    1b5a:	1d 92       	st	X+, r1
    1b5c:	11 90       	ld	r1, Z+
    1b5e:	1d 92       	st	X+, r1
    1b60:	11 90       	ld	r1, Z+
    1b62:	1d 92       	st	X+, r1
    1b64:	11 90       	ld	r1, Z+
    1b66:	1d 92       	st	X+, r1
    1b68:	11 90       	ld	r1, Z+
    1b6a:	1d 92       	st	X+, r1
    1b6c:	11 90       	ld	r1, Z+
    1b6e:	1d 92       	st	X+, r1
    1b70:	11 90       	ld	r1, Z+
    1b72:	1d 92       	st	X+, r1
    1b74:	11 90       	ld	r1, Z+
    1b76:	1d 92       	st	X+, r1
    1b78:	11 90       	ld	r1, Z+
    1b7a:	1d 92       	st	X+, r1
    1b7c:	11 90       	ld	r1, Z+
    1b7e:	1d 92       	st	X+, r1
    1b80:	11 90       	ld	r1, Z+
    1b82:	1d 92       	st	X+, r1
    1b84:	11 90       	ld	r1, Z+
    1b86:	1d 92       	st	X+, r1
    1b88:	11 90       	ld	r1, Z+
    1b8a:	1d 92       	st	X+, r1
    1b8c:	11 90       	ld	r1, Z+
    1b8e:	1d 92       	st	X+, r1
    1b90:	11 90       	ld	r1, Z+
    1b92:	1d 92       	st	X+, r1
    1b94:	11 90       	ld	r1, Z+
    1b96:	1d 92       	st	X+, r1
    1b98:	11 90       	ld	r1, Z+
    1b9a:	1d 92       	st	X+, r1
    1b9c:	11 90       	ld	r1, Z+
    1b9e:	1d 92       	st	X+, r1
    1ba0:	11 90       	ld	r1, Z+
    1ba2:	1d 92       	st	X+, r1
    1ba4:	11 90       	ld	r1, Z+
    1ba6:	1d 92       	st	X+, r1
    1ba8:	11 90       	ld	r1, Z+
    1baa:	1d 92       	st	X+, r1
    1bac:	11 90       	ld	r1, Z+
    1bae:	1d 92       	st	X+, r1
    1bb0:	11 90       	ld	r1, Z+
    1bb2:	1d 92       	st	X+, r1
    1bb4:	11 90       	ld	r1, Z+
    1bb6:	1d 92       	st	X+, r1
    1bb8:	11 90       	ld	r1, Z+
    1bba:	1d 92       	st	X+, r1
    1bbc:	11 90       	ld	r1, Z+
    1bbe:	1d 92       	st	X+, r1
    1bc0:	11 90       	ld	r1, Z+
    1bc2:	1d 92       	st	X+, r1
    1bc4:	11 90       	ld	r1, Z+
    1bc6:	1d 92       	st	X+, r1
    1bc8:	11 90       	ld	r1, Z+
    1bca:	1d 92       	st	X+, r1
    1bcc:	11 90       	ld	r1, Z+
    1bce:	1d 92       	st	X+, r1
    1bd0:	11 90       	ld	r1, Z+
    1bd2:	1d 92       	st	X+, r1
    1bd4:	11 90       	ld	r1, Z+
    1bd6:	1d 92       	st	X+, r1
    1bd8:	11 90       	ld	r1, Z+
    1bda:	1d 92       	st	X+, r1
    1bdc:	11 90       	ld	r1, Z+
    1bde:	1d 92       	st	X+, r1
    1be0:	11 90       	ld	r1, Z+
    1be2:	1d 92       	st	X+, r1
    1be4:	11 90       	ld	r1, Z+
    1be6:	1d 92       	st	X+, r1
    1be8:	11 24       	eor	r1, r1
    1bea:	08 95       	ret

00001bec <BlitSprite>:
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	94 e0       	ldi	r25, 0x04	; 4
    1bf6:	89 9f       	mul	r24, r25
    1bf8:	e8 e6       	ldi	r30, 0x68	; 104
    1bfa:	f4 e0       	ldi	r31, 0x04	; 4
    1bfc:	e0 0d       	add	r30, r0
    1bfe:	f1 1d       	adc	r31, r1
    1c00:	03 81       	ldd	r16, Z+3	; 0x03
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	e0 e4       	ldi	r30, 0x40	; 64
    1c06:	8e 9f       	mul	r24, r30
    1c08:	d0 01       	movw	r26, r0
    1c0a:	98 e0       	ldi	r25, 0x08	; 8
    1c0c:	09 9f       	mul	r16, r25
    1c0e:	c8 e6       	ldi	r28, 0x68	; 104
    1c10:	d4 e0       	ldi	r29, 0x04	; 4
    1c12:	00 24       	eor	r0, r0
    1c14:	c1 0d       	add	r28, r1
    1c16:	d0 1d       	adc	r29, r0
    1c18:	e8 81       	ld	r30, Y
    1c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1c:	ea 0f       	add	r30, r26
    1c1e:	fb 1f       	adc	r31, r27
    1c20:	a8 e6       	ldi	r26, 0x68	; 104
    1c22:	b4 e0       	ldi	r27, 0x04	; 4
    1c24:	90 e4       	ldi	r25, 0x40	; 64
    1c26:	69 9f       	mul	r22, r25
    1c28:	a0 0d       	add	r26, r0
    1c2a:	b1 1d       	adc	r27, r1
    1c2c:	11 24       	eor	r1, r1
    1c2e:	dd 27       	eor	r29, r29
    1c30:	40 30       	cpi	r20, 0x00	; 0
    1c32:	51 f4       	brne	.+20     	; 0x1c48 <x_2nd_tile>
    1c34:	a2 0f       	add	r26, r18
    1c36:	b1 1d       	adc	r27, r1
    1c38:	82 2f       	mov	r24, r18
    1c3a:	c2 2f       	mov	r28, r18
    1c3c:	00 ff       	sbrs	r16, 0
    1c3e:	11 c0       	rjmp	.+34     	; 0x1c62 <x_check_end>
    1c40:	37 96       	adiw	r30, 0x07	; 7
    1c42:	c0 e1       	ldi	r28, 0x10	; 16
    1c44:	c2 1b       	sub	r28, r18
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <x_check_end>

00001c48 <x_2nd_tile>:
    1c48:	88 e0       	ldi	r24, 0x08	; 8
    1c4a:	82 1b       	sub	r24, r18
    1c4c:	00 fd       	sbrc	r16, 0
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <x2_flip_x>
    1c50:	c8 2f       	mov	r28, r24
    1c52:	e8 0f       	add	r30, r24
    1c54:	f1 1d       	adc	r31, r1
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <x_check_end>

00001c58 <x2_flip_x>:
    1c58:	c8 e0       	ldi	r28, 0x08	; 8
    1c5a:	c2 0f       	add	r28, r18
    1c5c:	e2 0f       	add	r30, r18
    1c5e:	f1 1d       	adc	r31, r1
    1c60:	31 97       	sbiw	r30, 0x01	; 1

00001c62 <x_check_end>:
    1c62:	50 30       	cpi	r21, 0x00	; 0
    1c64:	51 f4       	brne	.+20     	; 0x1c7a <y_2nd_tile>
    1c66:	98 e0       	ldi	r25, 0x08	; 8
    1c68:	93 9f       	mul	r25, r19
    1c6a:	a0 0d       	add	r26, r0
    1c6c:	b1 1d       	adc	r27, r1
    1c6e:	93 2f       	mov	r25, r19
    1c70:	01 fd       	sbrc	r16, 1
    1c72:	e8 5c       	subi	r30, 0xC8	; 200
    1c74:	01 fd       	sbrc	r16, 1
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <y_check_end>

00001c7a <y_2nd_tile>:
    1c7a:	98 e0       	ldi	r25, 0x08	; 8
    1c7c:	93 1b       	sub	r25, r19
    1c7e:	63 2f       	mov	r22, r19
    1c80:	6a 95       	dec	r22
    1c82:	01 ff       	sbrs	r16, 1
    1c84:	69 2f       	mov	r22, r25
    1c86:	58 e0       	ldi	r21, 0x08	; 8
    1c88:	56 9f       	mul	r21, r22
    1c8a:	e0 0d       	add	r30, r0
    1c8c:	f1 1d       	adc	r31, r1

00001c8e <y_check_end>:
    1c8e:	6f ef       	ldi	r22, 0xFF	; 255
    1c90:	7f ef       	ldi	r23, 0xFF	; 255
    1c92:	00 ff       	sbrs	r16, 0
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	00 ff       	sbrs	r16, 0
    1c98:	77 27       	eor	r23, r23
    1c9a:	01 fd       	sbrc	r16, 1
    1c9c:	60 97       	sbiw	r28, 0x10	; 16
    1c9e:	11 24       	eor	r1, r1
    1ca0:	3e ef       	ldi	r19, 0xFE	; 254
    1ca2:	58 e0       	ldi	r21, 0x08	; 8
    1ca4:	59 1b       	sub	r21, r25

00001ca6 <y_loop>:
    1ca6:	48 e0       	ldi	r20, 0x08	; 8
    1ca8:	48 1b       	sub	r20, r24

00001caa <x_loop>:
    1caa:	24 91       	lpm	r18, Z
    1cac:	23 13       	cpse	r18, r19
    1cae:	2c 93       	st	X, r18
    1cb0:	11 96       	adiw	r26, 0x01	; 1
    1cb2:	e6 0f       	add	r30, r22
    1cb4:	f7 1f       	adc	r31, r23
    1cb6:	4a 95       	dec	r20
    1cb8:	c1 f7       	brne	.-16     	; 0x1caa <x_loop>
    1cba:	ec 0f       	add	r30, r28
    1cbc:	fd 1f       	adc	r31, r29
    1cbe:	a8 0f       	add	r26, r24
    1cc0:	b1 1d       	adc	r27, r1
    1cc2:	5a 95       	dec	r21
    1cc4:	81 f7       	brne	.-32     	; 0x1ca6 <y_loop>
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	08 95       	ret

00001cd0 <__vector_13>:
    1cd0:	0f 92       	push	r0
    1cd2:	1f 92       	push	r1
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
    1cd8:	ef b7       	in	r30, 0x3f	; 63
    1cda:	ef 93       	push	r30
    1cdc:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1ce0:	e2 51       	subi	r30, 0x12	; 18
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1

00001ce4 <latency_loop>:
    1ce4:	ef 17       	cp	r30, r31
    1ce6:	00 f0       	brcs	.+0      	; 0x1ce8 <latency_loop+0x4>
    1ce8:	f3 95       	inc	r31
    1cea:	fa 30       	cpi	r31, 0x0A	; 10
    1cec:	d8 f3       	brcs	.-10     	; 0x1ce4 <latency_loop>
    1cee:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <latency_loop+0xe>
    1cf2:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <sync_pulse>
    1cf6:	ea 95       	dec	r30
    1cf8:	e0 93 77 04 	sts	0x0477, r30	; 0x800477 <sync_pulse>
    1cfc:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <sync_phase>
    1d00:	f0 fd       	sbrc	r31, 0
    1d02:	57 c0       	rjmp	.+174    	; 0x1db2 <sync_hsync>
    1d04:	ec 30       	cpi	r30, 0x0C	; 12
    1d06:	98 f0       	brcs	.+38     	; 0x1d2e <sync_eq>
    1d08:	f3 e0       	ldi	r31, 0x03	; 3
    1d0a:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d0e:	fd e8       	ldi	r31, 0x8D	; 141
    1d10:	f0 93 88 00 	sts	0x0088, r31	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d14:	e0 fb       	bst	r30, 0
    1d16:	28 98       	cbi	0x05, 0	; 5
    1d18:	26 f4       	brtc	.+8      	; 0x1d22 <sync_pre_eq_no_sound_update>
    1d1a:	e1 e0       	ldi	r30, 0x01	; 1
    1d1c:	0e 94 4b 10 	call	0x2096	; 0x2096 <update_sound>
    1d20:	b9 c0       	rjmp	.+370    	; 0x1e94 <sync_end>

00001d22 <sync_pre_eq_no_sound_update>:
    1d22:	e5 e1       	ldi	r30, 0x15	; 21
    1d24:	ea 95       	dec	r30
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <sync_pre_eq_no_sound_update+0x2>
    1d28:	00 00       	nop
    1d2a:	28 9a       	sbi	0x05, 0	; 5
    1d2c:	b3 c0       	rjmp	.+358    	; 0x1e94 <sync_end>

00001d2e <sync_eq>:
    1d2e:	e6 30       	cpi	r30, 0x06	; 6
    1d30:	38 f1       	brcs	.+78     	; 0x1d80 <sync_post_eq>
    1d32:	00 c0       	rjmp	.+0      	; 0x1d34 <sync_eq+0x6>
    1d34:	00 c0       	rjmp	.+0      	; 0x1d36 <sync_eq+0x8>
    1d36:	28 98       	cbi	0x05, 0	; 5
    1d38:	e0 fb       	bst	r30, 0
    1d3a:	e4 e0       	ldi	r30, 0x04	; 4
    1d3c:	16 f4       	brtc	.+4      	; 0x1d42 <sync_eq_skip>
    1d3e:	0e 94 4b 10 	call	0x2096	; 0x2096 <update_sound>

00001d42 <sync_eq_skip>:
    1d42:	e4 e0       	ldi	r30, 0x04	; 4
    1d44:	e0 93 36 00 	sts	0x0036, r30	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
    1d48:	e6 e0       	ldi	r30, 0x06	; 6
    1d4a:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d4e:	a2 c0       	rjmp	.+324    	; 0x1e94 <sync_end>

00001d50 <__vector_14>:
    1d50:	ef 93       	push	r30
    1d52:	ef b7       	in	r30, 0x3f	; 63
    1d54:	ef 93       	push	r30
    1d56:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d5a:	ed 55       	subi	r30, 0x5D	; 93
    1d5c:	e1 30       	cpi	r30, 0x01	; 1
    1d5e:	00 f0       	brcs	.+0      	; 0x1d60 <__vector_14+0x10>
    1d60:	e2 30       	cpi	r30, 0x02	; 2
    1d62:	00 f0       	brcs	.+0      	; 0x1d64 <__vector_14+0x14>
    1d64:	e3 30       	cpi	r30, 0x03	; 3
    1d66:	00 f0       	brcs	.+0      	; 0x1d68 <__vector_14+0x18>
    1d68:	e4 30       	cpi	r30, 0x04	; 4
    1d6a:	00 f0       	brcs	.+0      	; 0x1d6c <__vector_14+0x1c>
    1d6c:	e5 30       	cpi	r30, 0x05	; 5
    1d6e:	00 f0       	brcs	.+0      	; 0x1d70 <__vector_14+0x20>
    1d70:	28 9a       	sbi	0x05, 0	; 5
    1d72:	e2 e0       	ldi	r30, 0x02	; 2
    1d74:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d78:	ef 91       	pop	r30
    1d7a:	ef bf       	out	0x3f, r30	; 63
    1d7c:	ef 91       	pop	r30
    1d7e:	18 95       	reti

00001d80 <sync_post_eq>:
    1d80:	00 c0       	rjmp	.+0      	; 0x1d82 <sync_post_eq+0x2>
    1d82:	e0 fb       	bst	r30, 0
    1d84:	28 98       	cbi	0x05, 0	; 5
    1d86:	26 f4       	brtc	.+8      	; 0x1d90 <sync_post_eq_no_sound_update>
    1d88:	e1 e0       	ldi	r30, 0x01	; 1
    1d8a:	0e 94 4b 10 	call	0x2096	; 0x2096 <update_sound>
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <sync_pre_eq_cont>

00001d90 <sync_post_eq_no_sound_update>:
    1d90:	e5 e1       	ldi	r30, 0x15	; 21
    1d92:	ea 95       	dec	r30
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <sync_post_eq_no_sound_update+0x2>
    1d96:	00 00       	nop
    1d98:	28 9a       	sbi	0x05, 0	; 5

00001d9a <sync_pre_eq_cont>:
    1d9a:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <sync_pulse>
    1d9e:	e0 30       	cpi	r30, 0x00	; 0
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <sync_pre_eq_cont+0xa>
    1da2:	78 c0       	rjmp	.+240    	; 0x1e94 <sync_end>
    1da4:	ed ef       	ldi	r30, 0xFD	; 253
    1da6:	e0 93 77 04 	sts	0x0477, r30	; 0x800477 <sync_pulse>
    1daa:	e1 e0       	ldi	r30, 0x01	; 1
    1dac:	e0 93 76 04 	sts	0x0476, r30	; 0x800476 <sync_phase>
    1db0:	71 c0       	rjmp	.+226    	; 0x1e94 <sync_end>

00001db2 <sync_hsync>:
    1db2:	e7 e0       	ldi	r30, 0x07	; 7
    1db4:	e0 93 89 00 	sts	0x0089, r30	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1db8:	eb e1       	ldi	r30, 0x1B	; 27
    1dba:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <sync_hsync+0xe>
    1dc0:	28 98       	cbi	0x05, 0	; 5
    1dc2:	e2 e0       	ldi	r30, 0x02	; 2
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <sync_hsync+0x14>
    1dc6:	0e 94 4b 10 	call	0x2096	; 0x2096 <update_sound>
    1dca:	fd ef       	ldi	r31, 0xFD	; 253
    1dcc:	00 90 7d 04 	lds	r0, 0x047D	; 0x80047d <first_render_line>
    1dd0:	f0 19       	sub	r31, r0
    1dd2:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <sync_pulse>
    1dd6:	ef 17       	cp	r30, r31
    1dd8:	e0 f4       	brcc	.+56     	; 0x1e12 <no_render>
    1dda:	fd ef       	ldi	r31, 0xFD	; 253
    1ddc:	00 90 7d 04 	lds	r0, 0x047D	; 0x80047d <first_render_line>
    1de0:	f0 19       	sub	r31, r0
    1de2:	00 90 7e 04 	lds	r0, 0x047E	; 0x80047e <render_lines_count>
    1de6:	f0 19       	sub	r31, r0
    1de8:	ef 17       	cp	r30, r31
    1dea:	98 f0       	brcs	.+38     	; 0x1e12 <no_render>
    1dec:	ed e1       	ldi	r30, 0x1D	; 29
    1dee:	ff 27       	eor	r31, r31

00001df0 <push_loop>:
    1df0:	00 80       	ld	r0, Z
    1df2:	0f 92       	push	r0
    1df4:	ea 95       	dec	r30
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <push_loop>
    1df8:	0f e1       	ldi	r16, 0x1F	; 31
    1dfa:	0a 95       	dec	r16
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <push_loop+0xa>
    1dfe:	00 00       	nop
    1e00:	00 00       	nop
    1e02:	0e 94 02 0c 	call	0x1804	; 0x1804 <sub_video_mode3>
    1e06:	e1 e0       	ldi	r30, 0x01	; 1
    1e08:	ff 27       	eor	r31, r31

00001e0a <pop_loop>:
    1e0a:	0f 90       	pop	r0
    1e0c:	01 92       	st	Z+, r0
    1e0e:	ee 31       	cpi	r30, 0x1E	; 30
    1e10:	e0 f3       	brcs	.-8      	; 0x1e0a <pop_loop>

00001e12 <no_render>:
    1e12:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <sync_pulse>
    1e16:	e0 30       	cpi	r30, 0x00	; 0
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <no_render+0xa>
    1e1a:	3c c0       	rjmp	.+120    	; 0x1e94 <sync_end>
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	78 94       	sei
    1e32:	11 24       	eor	r1, r1
    1e34:	ee 27       	eor	r30, r30
    1e36:	e0 93 76 04 	sts	0x0476, r30	; 0x800476 <sync_phase>
    1e3a:	e2 e1       	ldi	r30, 0x12	; 18
    1e3c:	e0 93 77 04 	sts	0x0477, r30	; 0x800477 <sync_pulse>
    1e40:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <vsync_counter>
    1e44:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <vsync_counter+0x1>
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <vsync_counter>
    1e4e:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <vsync_counter+0x1>
    1e52:	e0 91 79 04 	lds	r30, 0x0479	; 0x800479 <pre_vsync_user_callback>
    1e56:	f0 91 7a 04 	lds	r31, 0x047A	; 0x80047a <pre_vsync_user_callback+0x1>
    1e5a:	e1 15       	cp	r30, r1
    1e5c:	f1 05       	cpc	r31, r1
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <no_render+0x50>
    1e60:	09 95       	icall
    1e62:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <ReadControllers>
    1e66:	0e 94 a5 1b 	call	0x374a	; 0x374a <VideoModeVsync>
    1e6a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <process_music>
    1e6e:	11 24       	eor	r1, r1
    1e70:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <post_vsync_user_callback>
    1e74:	f0 91 7c 04 	lds	r31, 0x047C	; 0x80047c <post_vsync_user_callback+0x1>
    1e78:	e1 15       	cp	r30, r1
    1e7a:	f1 05       	cpc	r31, r1
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <no_render+0x6e>
    1e7e:	09 95       	icall
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18

00001e94 <sync_end>:
    1e94:	ef 91       	pop	r30
    1e96:	ef bf       	out	0x3f, r30	; 63
    1e98:	ff 91       	pop	r31
    1e9a:	ef 91       	pop	r30
    1e9c:	1f 90       	pop	r1
    1e9e:	0f 90       	pop	r0
    1ea0:	18 95       	reti

00001ea2 <hsync_pulse>:
    1ea2:	28 98       	cbi	0x05, 0	; 5
    1ea4:	e2 e0       	ldi	r30, 0x02	; 2
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <hsync_pulse+0x6>
    1ea8:	0e 94 4b 10 	call	0x2096	; 0x2096 <update_sound>
    1eac:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <sync_pulse>
    1eb0:	ea 95       	dec	r30
    1eb2:	e0 93 77 04 	sts	0x0477, r30	; 0x800477 <sync_pulse>
    1eb6:	08 95       	ret

00001eb8 <process_music>:
;*****************************
.section .text.EnableSoundEngine
EnableSoundEngine:	
	ldi r24,1
	sts sound_enabled,r24
	ret
    1eb8:	e0 91 b1 06 	lds	r30, 0x06B1	; 0x8006b1 <sound_enabled>
    1ebc:	e0 fd       	sbrc	r30, 0
    1ebe:	0e 94 02 12 	call	0x2404	; 0x2404 <ProcessMusic>
    1ec2:	00 90 af 06 	lds	r0, 0x06AF	; 0x8006af <mix_bank>
    1ec6:	00 20       	and	r0, r0
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <set_hi_bank>
    1eca:	a1 ea       	ldi	r26, 0xA1	; 161
    1ecc:	b4 e0       	ldi	r27, 0x04	; 4
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <end_set_bank>

00001ed0 <set_hi_bank>:
    1ed0:	a7 ea       	ldi	r26, 0xA7	; 167
    1ed2:	b5 e0       	ldi	r27, 0x05	; 5

00001ed4 <end_set_bank>:
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	02 26       	eor	r0, r18
    1ed8:	00 92 af 06 	sts	0x06AF, r0	; 0x8006af <mix_bank>
    1edc:	22 e0       	ldi	r18, 0x02	; 2
    1ede:	20 93 b0 06 	sts	0x06B0, r18	; 0x8006b0 <mix_block>
    1ee2:	e0 91 b1 06 	lds	r30, 0x06B1	; 0x8006b1 <sound_enabled>
    1ee6:	e0 ff       	sbrs	r30, 0
    1ee8:	08 95       	ret
    1eea:	2f 92       	push	r2
    1eec:	3f 92       	push	r3
    1eee:	4f 92       	push	r4
    1ef0:	5f 92       	push	r5
    1ef2:	6f 92       	push	r6
    1ef4:	7f 92       	push	r7
    1ef6:	8f 92       	push	r8
    1ef8:	9f 92       	push	r9
    1efa:	af 92       	push	r10
    1efc:	bf 92       	push	r11
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	50 91 c4 06 	lds	r21, 0x06C4	; 0x8006c4 <tr4_vol>
    1f12:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <tr4_pos_lo>
    1f16:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <tr4_pos_hi>
    1f1a:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <tr4_pos_frac>
    1f1e:	40 90 c5 06 	lds	r4, 0x06C5	; 0x8006c5 <tr4_step_lo>
    1f22:	50 90 c6 06 	lds	r5, 0x06C6	; 0x8006c6 <tr4_step_hi>
    1f26:	66 24       	eor	r6, r6
    1f28:	5f 01       	movw	r10, r30
    1f2a:	00 90 ca 06 	lds	r0, 0x06CA	; 0x8006ca <tr4_loop_len_lo>
    1f2e:	10 90 cb 06 	lds	r1, 0x06CB	; 0x8006cb <tr4_loop_len_hi>
    1f32:	a0 18       	sub	r10, r0
    1f34:	b1 08       	sbc	r11, r1
    1f36:	80 90 cc 06 	lds	r8, 0x06CC	; 0x8006cc <tr4_loop_end_lo>
    1f3a:	90 90 cd 06 	lds	r9, 0x06CD	; 0x8006cd <tr4_loop_end_hi>
    1f3e:	1d 01       	movw	r2, r26
    1f40:	c3 e8       	ldi	r28, 0x83	; 131

00001f42 <ch4_loop>:
    1f42:	84 0d       	add	r24, r4
    1f44:	e5 1d       	adc	r30, r5
    1f46:	f6 1d       	adc	r31, r6
    1f48:	e8 15       	cp	r30, r8
    1f4a:	f9 05       	cpc	r31, r9
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <ch4_loop+0xe>
    1f4e:	f5 01       	movw	r30, r10
    1f50:	44 91       	lpm	r20, Z
    1f52:	45 03       	mulsu	r20, r21
    1f54:	1d 92       	st	X+, r1
    1f56:	84 0d       	add	r24, r4
    1f58:	e5 1d       	adc	r30, r5
    1f5a:	f6 1d       	adc	r31, r6
    1f5c:	e8 15       	cp	r30, r8
    1f5e:	f9 05       	cpc	r31, r9
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <ch4_loop+0x22>
    1f62:	f5 01       	movw	r30, r10
    1f64:	44 91       	lpm	r20, Z
    1f66:	45 03       	mulsu	r20, r21
    1f68:	1d 92       	st	X+, r1
    1f6a:	ca 95       	dec	r28
    1f6c:	51 f7       	brne	.-44     	; 0x1f42 <ch4_loop>
    1f6e:	d1 01       	movw	r26, r2
    1f70:	50 93 c4 06 	sts	0x06C4, r21	; 0x8006c4 <tr4_vol>
    1f74:	e0 93 c8 06 	sts	0x06C8, r30	; 0x8006c8 <tr4_pos_lo>
    1f78:	f0 93 c9 06 	sts	0x06C9, r31	; 0x8006c9 <tr4_pos_hi>
    1f7c:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <tr4_pos_frac>
    1f80:	20 90 b3 06 	lds	r2, 0x06B3	; 0x8006b3 <tr1_step_lo>
    1f84:	30 90 b4 06 	lds	r3, 0x06B4	; 0x8006b4 <tr1_step_hi>
    1f88:	40 90 b6 06 	lds	r4, 0x06B6	; 0x8006b6 <tr1_pos_lo>
    1f8c:	50 90 b7 06 	lds	r5, 0x06B7	; 0x8006b7 <tr1_pos_hi>
    1f90:	60 90 b5 06 	lds	r6, 0x06B5	; 0x8006b5 <tr1_pos_frac>
    1f94:	10 91 b2 06 	lds	r17, 0x06B2	; 0x8006b2 <mixer>
    1f98:	70 90 b9 06 	lds	r7, 0x06B9	; 0x8006b9 <tr2_step_lo>
    1f9c:	80 90 ba 06 	lds	r8, 0x06BA	; 0x8006ba <tr2_step_hi>
    1fa0:	90 90 bb 06 	lds	r9, 0x06BB	; 0x8006bb <tr2_pos_frac>
    1fa4:	a0 90 bc 06 	lds	r10, 0x06BC	; 0x8006bc <tr2_pos_lo>
    1fa8:	b0 90 bd 06 	lds	r11, 0x06BD	; 0x8006bd <tr2_pos_hi>
    1fac:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <tr2_vol>
    1fb0:	c0 90 bf 06 	lds	r12, 0x06BF	; 0x8006bf <tr3_step_lo>
    1fb4:	d0 90 c0 06 	lds	r13, 0x06C0	; 0x8006c0 <tr3_step_hi>
    1fb8:	e0 90 c2 06 	lds	r14, 0x06C2	; 0x8006c2 <tr3_pos_lo>
    1fbc:	f0 90 c3 06 	lds	r15, 0x06C3	; 0x8006c3 <tr3_pos_hi>
    1fc0:	00 91 c1 06 	lds	r16, 0x06C1	; 0x8006c1 <tr3_pos_frac>
    1fc4:	30 91 be 06 	lds	r19, 0x06BE	; 0x8006be <tr3_vol>
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255

00001fca <mix_loop>:
    1fca:	cc 91       	ld	r28, X
    1fcc:	dd 27       	eor	r29, r29
    1fce:	c7 fd       	sbrc	r28, 7
    1fd0:	df ef       	ldi	r29, 0xFF	; 255
    1fd2:	62 0c       	add	r6, r2
    1fd4:	43 1c       	adc	r4, r3
    1fd6:	f2 01       	movw	r30, r4
    1fd8:	44 91       	lpm	r20, Z
    1fda:	41 03       	mulsu	r20, r17
    1fdc:	00 08       	sbc	r0, r0
    1fde:	c1 0d       	add	r28, r1
    1fe0:	d0 1d       	adc	r29, r0
    1fe2:	97 0c       	add	r9, r7
    1fe4:	a8 1c       	adc	r10, r8
    1fe6:	f5 01       	movw	r30, r10
    1fe8:	44 91       	lpm	r20, Z
    1fea:	42 03       	mulsu	r20, r18
    1fec:	00 08       	sbc	r0, r0
    1fee:	c1 0d       	add	r28, r1
    1ff0:	d0 1d       	adc	r29, r0
    1ff2:	0c 0d       	add	r16, r12
    1ff4:	ed 1c       	adc	r14, r13
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	44 91       	lpm	r20, Z
    1ffa:	43 03       	mulsu	r20, r19
    1ffc:	00 08       	sbc	r0, r0
    1ffe:	c1 0d       	add	r28, r1
    2000:	d0 1d       	adc	r29, r0
    2002:	00 24       	eor	r0, r0
    2004:	c0 38       	cpi	r28, 0x80	; 128
    2006:	d0 05       	cpc	r29, r0
    2008:	0c f0       	brlt	.+2      	; 0x200c <mix_loop+0x42>
    200a:	cf e7       	ldi	r28, 0x7F	; 127
    200c:	0a 94       	dec	r0
    200e:	c0 38       	cpi	r28, 0x80	; 128
    2010:	d0 05       	cpc	r29, r0
    2012:	0c f4       	brge	.+2      	; 0x2016 <mix_loop+0x4c>
    2014:	c0 e8       	ldi	r28, 0x80	; 128
    2016:	c0 58       	subi	r28, 0x80	; 128
    2018:	cd 93       	st	X+, r28
    201a:	9a 95       	dec	r25
    201c:	09 f0       	breq	.+2      	; 0x2020 <mix_loop+0x56>
    201e:	d5 cf       	rjmp	.-86     	; 0x1fca <mix_loop>
    2020:	40 91 b0 06 	lds	r20, 0x06B0	; 0x8006b0 <mix_block>
    2024:	4a 95       	dec	r20
    2026:	40 93 b0 06 	sts	0x06B0, r20	; 0x8006b0 <mix_block>
    202a:	97 e0       	ldi	r25, 0x07	; 7
    202c:	09 f0       	breq	.+2      	; 0x2030 <mix_loop+0x66>
    202e:	cd cf       	rjmp	.-102    	; 0x1fca <mix_loop>
    2030:	60 92 b5 06 	sts	0x06B5, r6	; 0x8006b5 <tr1_pos_frac>
    2034:	40 92 b6 06 	sts	0x06B6, r4	; 0x8006b6 <tr1_pos_lo>
    2038:	90 92 bb 06 	sts	0x06BB, r9	; 0x8006bb <tr2_pos_frac>
    203c:	a0 92 bc 06 	sts	0x06BC, r10	; 0x8006bc <tr2_pos_lo>
    2040:	00 93 c1 06 	sts	0x06C1, r16	; 0x8006c1 <tr3_pos_frac>
    2044:	e0 92 c2 06 	sts	0x06C2, r14	; 0x8006c2 <tr3_pos_lo>
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	bf 90       	pop	r11
    205a:	af 90       	pop	r10
    205c:	9f 90       	pop	r9
    205e:	8f 90       	pop	r8
    2060:	7f 90       	pop	r7
    2062:	6f 90       	pop	r6
    2064:	5f 90       	pop	r5
    2066:	4f 90       	pop	r4
    2068:	3f 90       	pop	r3
    206a:	2f 90       	pop	r2
    206c:	08 95       	ret

0000206e <update_sound_buffer_fast>:
    206e:	e0 91 ad 06 	lds	r30, 0x06AD	; 0x8006ad <mix_pos>
    2072:	f0 91 ae 06 	lds	r31, 0x06AE	; 0x8006ae <mix_pos+0x1>
    2076:	01 91       	ld	r16, Z+
    2078:	00 00       	nop
    207a:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    207e:	06 e0       	ldi	r16, 0x06	; 6
    2080:	ed 3a       	cpi	r30, 0xAD	; 173
    2082:	f0 07       	cpc	r31, r16
    2084:	01 ea       	ldi	r16, 0xA1	; 161
    2086:	14 e0       	ldi	r17, 0x04	; 4
    2088:	08 f0       	brcs	.+2      	; 0x208c <update_sound_buffer_fast+0x1e>
    208a:	f8 01       	movw	r30, r16
    208c:	e0 93 ad 06 	sts	0x06AD, r30	; 0x8006ad <mix_pos>
    2090:	f0 93 ae 06 	sts	0x06AE, r31	; 0x8006ae <mix_pos+0x1>
    2094:	08 95       	ret

00002096 <update_sound>:
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	2f 93       	push	r18
    209c:	ef 93       	push	r30
    209e:	e0 91 ad 06 	lds	r30, 0x06AD	; 0x8006ad <mix_pos>
    20a2:	f0 91 ae 06 	lds	r31, 0x06AE	; 0x8006ae <mix_pos+0x1>
    20a6:	01 91       	ld	r16, Z+
    20a8:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    20ac:	06 e0       	ldi	r16, 0x06	; 6
    20ae:	ed 3a       	cpi	r30, 0xAD	; 173
    20b0:	f0 07       	cpc	r31, r16
    20b2:	01 ea       	ldi	r16, 0xA1	; 161
    20b4:	14 e0       	ldi	r17, 0x04	; 4
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <update_sound+0x24>
    20b8:	f8 01       	movw	r30, r16
    20ba:	e0 93 ad 06 	sts	0x06AD, r30	; 0x8006ad <mix_pos>
    20be:	f0 93 ae 06 	sts	0x06AE, r31	; 0x8006ae <mix_pos+0x1>
    20c2:	e8 e0       	ldi	r30, 0x08	; 8
    20c4:	ea 95       	dec	r30
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <update_sound+0x2e>
    20c8:	ef 91       	pop	r30
    20ca:	2f 91       	pop	r18
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	e0 fd       	sbrc	r30, 0
    20d2:	28 9a       	sbi	0x05, 0	; 5
    20d4:	e0 ff       	sbrs	r30, 0
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <update_sound+0x44>
    20d8:	08 95       	ret
    20da:	f4 e1       	ldi	r31, 0x14	; 20
    20dc:	fa 95       	dec	r31
    20de:	f1 f7       	brne	.-4      	; 0x20dc <update_sound+0x46>
    20e0:	00 c0       	rjmp	.+0      	; 0x20e2 <update_sound+0x4c>
    20e2:	e1 fd       	sbrc	r30, 1
    20e4:	28 9a       	sbi	0x05, 0	; 5
    20e6:	e1 ff       	sbrs	r30, 1
    20e8:	00 c0       	rjmp	.+0      	; 0x20ea <update_sound+0x54>
    20ea:	08 95       	ret

000020ec <ClearVram>:
    20ec:	e8 e4       	ldi	r30, 0x48	; 72
    20ee:	f3 e0       	ldi	r31, 0x03	; 3
    20f0:	a0 e2       	ldi	r26, 0x20	; 32
    20f2:	b1 e0       	ldi	r27, 0x01	; 1
    20f4:	60 e0       	ldi	r22, 0x00	; 0

000020f6 <fill_vram_loop>:
    20f6:	6d 93       	st	X+, r22
    20f8:	31 97       	sbiw	r30, 0x01	; 1
    20fa:	e9 f7       	brne	.-6      	; 0x20f6 <fill_vram_loop>
    20fc:	11 24       	eor	r1, r1
    20fe:	08 95       	ret

00002100 <SetFont>:
    2100:	50 91 72 04 	lds	r21, 0x0472	; 0x800472 <font_tile_index>
    2104:	45 0f       	add	r20, r21
    2106:	00 c0       	rjmp	.+0      	; 0x2108 <SetTile>

00002108 <SetTile>:
    2108:	99 27       	eor	r25, r25
    210a:	77 27       	eor	r23, r23
    210c:	2e e1       	ldi	r18, 0x1E	; 30
    210e:	62 9f       	mul	r22, r18
    2110:	08 0e       	add	r0, r24
    2112:	19 1e       	adc	r1, r25
    2114:	a0 e2       	ldi	r26, 0x20	; 32
    2116:	b1 e0       	ldi	r27, 0x01	; 1
    2118:	a0 0d       	add	r26, r0
    211a:	b1 1d       	adc	r27, r1
    211c:	40 50       	subi	r20, 0x00	; 0
    211e:	4c 93       	st	X, r20
    2120:	11 24       	eor	r1, r1
    2122:	08 95       	ret

00002124 <SetFontTilesIndex>:
    2124:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <font_tile_index>
    2128:	08 95       	ret

0000212a <SetTileTable>:
    212a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <tile_table_lo>
    212e:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <tile_table_hi>
    2132:	08 95       	ret

00002134 <GetVsyncFlag>:
    2134:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <sync_flags>
    2138:	81 70       	andi	r24, 0x01	; 1
    213a:	08 95       	ret

0000213c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    213c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    213e:	fe cf       	rjmp	.-4      	; 0x213c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    2140:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    2142:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    2144:	60 bd       	out	0x20, r22	; 32
   cli
    2146:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    2148:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    214a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    214c:	78 94       	sei
   ret
    214e:	08 95       	ret

00002150 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    2150:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    2152:	fe cf       	rjmp	.-4      	; 0x2150 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    2154:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    2156:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    2158:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    215a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    215c:	80 b5       	in	r24, 0x20	; 32
   sei
    215e:	78 94       	sei
   ret
    2160:	08 95       	ret

00002162 <SoftReset>:
    2162:	98 e0       	ldi	r25, 0x08	; 8
    2164:	88 e1       	ldi	r24, 0x18	; 24
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	a8 95       	wdr
    216c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2176:	ff cf       	rjmp	.-2      	; 0x2176 <SoftReset+0x14>

00002178 <ReadButtons>:
    2178:	12 9a       	sbi	0x02, 2	; 2
    217a:	c8 95       	lpm
    217c:	c8 95       	lpm
    217e:	c8 95       	lpm
    2180:	c8 95       	lpm
    2182:	12 98       	cbi	0x02, 2	; 2
    2184:	40 e1       	ldi	r20, 0x10	; 16
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	36 95       	lsr	r19
    2190:	27 95       	ror	r18
    2192:	96 95       	lsr	r25
    2194:	87 95       	ror	r24
    2196:	c8 95       	lpm
    2198:	c8 95       	lpm
    219a:	c8 95       	lpm
    219c:	c8 95       	lpm
    219e:	13 98       	cbi	0x02, 3	; 2
    21a0:	00 9b       	sbis	0x00, 0	; 0
    21a2:	30 68       	ori	r19, 0x80	; 128
    21a4:	01 9b       	sbis	0x00, 1	; 0
    21a6:	90 68       	ori	r25, 0x80	; 128
    21a8:	13 9a       	sbi	0x02, 3	; 2
    21aa:	c8 95       	lpm
    21ac:	c8 95       	lpm
    21ae:	c8 95       	lpm
    21b0:	c8 95       	lpm
    21b2:	41 50       	subi	r20, 0x01	; 1
    21b4:	61 f7       	brne	.-40     	; 0x218e <ReadButtons+0x16>
    21b6:	30 93 80 04 	sts	0x0480, r19	; 0x800480 <joypad1_status_lo+0x1>
    21ba:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <joypad1_status_lo>
    21be:	90 93 84 04 	sts	0x0484, r25	; 0x800484 <joypad2_status_lo+0x1>
    21c2:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <joypad2_status_lo>
    21c6:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <joypad1_status_lo>
    21ca:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <joypad1_status_lo+0x1>
    21ce:	0f 97       	sbiw	r24, 0x0f	; 15
    21d0:	31 f0       	breq	.+12     	; 0x21de <ReadButtons+0x66>
    21d2:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <joypad2_status_lo>
    21d6:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <joypad2_status_lo+0x1>
    21da:	0f 97       	sbiw	r24, 0x0f	; 15
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <ReadButtons+0x6a>
    21de:	0e 94 b1 10 	call	0x2162	; 0x2162 <SoftReset>
    21e2:	08 95       	ret

000021e4 <ReadControllers>:
    21e4:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <joypadsConnectionStatus>
    21e8:	00 99       	sbic	0x00, 0	; 0
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <ReadControllers+0xe>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <joypadsConnectionStatus>
    21f2:	01 99       	sbic	0x00, 1	; 0
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <ReadControllers+0x1c>
    21f6:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <joypadsConnectionStatus>
    21fa:	82 60       	ori	r24, 0x02	; 2
    21fc:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <joypadsConnectionStatus>
    2200:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <ReadButtons>

00002204 <FormatEeprom>:
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	c0 e0       	ldi	r28, 0x00	; 0
    220a:	d0 e0       	ldi	r29, 0x00	; 0
    220c:	fe 01       	movw	r30, r28
    220e:	e0 59       	subi	r30, 0x90	; 144
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	64 91       	lpm	r22, Z
    2214:	ce 01       	movw	r24, r28
    2216:	0e 94 9e 10 	call	0x213c	; 0x213c <WriteEeprom>
    221a:	21 96       	adiw	r28, 0x01	; 1
    221c:	c0 32       	cpi	r28, 0x20	; 32
    221e:	d1 05       	cpc	r29, r1
    2220:	a9 f7       	brne	.-22     	; 0x220c <FormatEeprom+0x8>
    2222:	c0 e2       	ldi	r28, 0x20	; 32
    2224:	d0 e0       	ldi	r29, 0x00	; 0
    2226:	6f ef       	ldi	r22, 0xFF	; 255
    2228:	ce 01       	movw	r24, r28
    222a:	0e 94 9e 10 	call	0x213c	; 0x213c <WriteEeprom>
    222e:	6f ef       	ldi	r22, 0xFF	; 255
    2230:	ce 01       	movw	r24, r28
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	0e 94 9e 10 	call	0x213c	; 0x213c <WriteEeprom>
    2238:	a0 96       	adiw	r28, 0x20	; 32
    223a:	c1 15       	cp	r28, r1
    223c:	88 e0       	ldi	r24, 0x08	; 8
    223e:	d8 07       	cpc	r29, r24
    2240:	91 f7       	brne	.-28     	; 0x2226 <FormatEeprom+0x22>
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	08 95       	ret

00002248 <isEepromFormatted>:
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    2248:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 a8 10 	call	0x2150	; 0x2150 <ReadEeprom>
    2252:	c8 2f       	mov	r28, r24
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 a8 10 	call	0x2150	; 0x2150 <ReadEeprom>
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	32 2f       	mov	r19, r18
    2262:	22 27       	eor	r18, r18
    2264:	2c 0f       	add	r18, r28
    2266:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	2a 35       	cpi	r18, 0x5A	; 90
    226c:	35 45       	sbci	r19, 0x55	; 85
    226e:	09 f0       	breq	.+2      	; 0x2272 <isEepromFormatted+0x2a>
    2270:	80 e0       	ldi	r24, 0x00	; 0
}
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <PatchCommand00>:
	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
	track->patchCommandStreamPos = NULL;
	TriggerCommon(track,patch,volume,80);
	track->flags|=TRACK_FLAGS_PLAYING;
}
    2276:	fc 01       	movw	r30, r24
    2278:	67 87       	std	Z+15, r22	; 0x0f
    227a:	08 95       	ret

0000227c <PatchCommand01>:
    227c:	08 95       	ret

0000227e <PatchCommand02>:
    227e:	fc 01       	movw	r30, r24
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <SetMixerWave>

00002286 <PatchCommand03>:
    2286:	fc 01       	movw	r30, r24
    2288:	91 81       	ldd	r25, Z+1	; 0x01
    228a:	69 0f       	add	r22, r25
    228c:	61 83       	std	Z+1, r22	; 0x01
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <SetMixerNote>

00002294 <PatchCommand04>:
    2294:	fc 01       	movw	r30, r24
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	96 1b       	sub	r25, r22
    229a:	69 2f       	mov	r22, r25
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	82 81       	ldd	r24, Z+2	; 0x02
    22a0:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <SetMixerNote>

000022a4 <PatchCommand05>:
    22a4:	fc 01       	movw	r30, r24
    22a6:	90 81       	ld	r25, Z
    22a8:	9f 75       	andi	r25, 0x5F	; 95
    22aa:	90 83       	st	Z, r25
    22ac:	08 95       	ret

000022ae <PatchCommand06>:
    22ae:	fc 01       	movw	r30, r24
    22b0:	90 81       	ld	r25, Z
    22b2:	90 64       	ori	r25, 0x40	; 64
    22b4:	90 83       	st	Z, r25
    22b6:	08 95       	ret

000022b8 <PatchCommand07>:
    22b8:	fc 01       	movw	r30, r24
    22ba:	66 87       	std	Z+14, r22	; 0x0e
    22bc:	08 95       	ret

000022be <PatchCommand08>:
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	ec 01       	movw	r28, r24
    22c6:	16 2f       	mov	r17, r22
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	0e 94 e5 14 	call	0x29ca	; 0x29ca <SetMixerNote>
    22ce:	19 83       	std	Y+1, r17	; 0x01
    22d0:	88 81       	ld	r24, Y
    22d2:	87 7f       	andi	r24, 0xF7	; 247
    22d4:	88 83       	st	Y, r24
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	08 95       	ret

000022de <PatchCommand09>:
    22de:	fc 01       	movw	r30, r24
    22e0:	62 87       	std	Z+10, r22	; 0x0a
    22e2:	08 95       	ret

000022e4 <PatchCommand10>:
    22e4:	fc 01       	movw	r30, r24
    22e6:	63 87       	std	Z+11, r22	; 0x0b
    22e8:	08 95       	ret

000022ea <PatchCommand11>:
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	ec 01       	movw	r28, r24
    22f0:	46 2f       	mov	r20, r22
    22f2:	29 81       	ldd	r18, Y+1	; 0x01
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	f9 01       	movw	r30, r18
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	e8 5f       	subi	r30, 0xF8	; 248
    22fe:	f4 4d       	sbci	r31, 0xD4	; 212
    2300:	65 91       	lpm	r22, Z+
    2302:	74 91       	lpm	r23, Z
    2304:	f9 01       	movw	r30, r18
    2306:	e4 0f       	add	r30, r20
    2308:	f1 1d       	adc	r31, r1
    230a:	47 fd       	sbrc	r20, 7
    230c:	fa 95       	dec	r31
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	e8 5f       	subi	r30, 0xF8	; 248
    2314:	f4 4d       	sbci	r31, 0xD4	; 212
    2316:	85 91       	lpm	r24, Z+
    2318:	94 91       	lpm	r25, Z
    231a:	86 1b       	sub	r24, r22
    231c:	97 0b       	sbc	r25, r23
    231e:	68 85       	ldd	r22, Y+8	; 0x08
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__divmodhi4>
    2326:	61 15       	cp	r22, r1
    2328:	71 05       	cpc	r23, r1
    232a:	11 f4       	brne	.+4      	; 0x2330 <PatchCommand11+0x46>
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	ea 81       	ldd	r30, Y+2	; 0x02
    2332:	86 e0       	ldi	r24, 0x06	; 6
    2334:	e8 9f       	mul	r30, r24
    2336:	f0 01       	movw	r30, r0
    2338:	11 24       	eor	r1, r1
    233a:	ee 54       	subi	r30, 0x4E	; 78
    233c:	f9 4f       	sbci	r31, 0xF9	; 249
    233e:	81 81       	ldd	r24, Z+1	; 0x01
    2340:	92 81       	ldd	r25, Z+2	; 0x02
    2342:	86 0f       	add	r24, r22
    2344:	97 1f       	adc	r25, r23
    2346:	92 83       	std	Z+2, r25	; 0x02
    2348:	81 83       	std	Z+1, r24	; 0x01
    234a:	7e 83       	std	Y+6, r23	; 0x06
    234c:	6d 83       	std	Y+5, r22	; 0x05
    234e:	88 81       	ld	r24, Y
    2350:	88 60       	ori	r24, 0x08	; 8
    2352:	88 83       	st	Y, r24
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	48 0f       	add	r20, r24
    2358:	4f 83       	std	Y+7, r20	; 0x07
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <PatchCommand12>:
    2360:	fc 01       	movw	r30, r24
    2362:	60 87       	std	Z+8, r22	; 0x08
    2364:	08 95       	ret

00002366 <PatchCommand13>:
    2366:	fc 01       	movw	r30, r24
    2368:	64 83       	std	Z+4, r22	; 0x04
    236a:	08 95       	ret

0000236c <PatchCommand14>:
    236c:	dc 01       	movw	r26, r24
    236e:	14 96       	adiw	r26, 0x04	; 4
    2370:	8c 91       	ld	r24, X
    2372:	14 97       	sbiw	r26, 0x04	; 4
    2374:	88 23       	and	r24, r24
    2376:	19 f1       	breq	.+70     	; 0x23be <PatchCommand14+0x52>
    2378:	55 96       	adiw	r26, 0x15	; 21
    237a:	2d 91       	ld	r18, X+
    237c:	3c 91       	ld	r19, X
    237e:	56 97       	sbiw	r26, 0x16	; 22
    2380:	66 23       	and	r22, r22
    2382:	79 f0       	breq	.+30     	; 0x23a2 <PatchCommand14+0x36>
    2384:	06 2e       	mov	r0, r22
    2386:	00 0c       	add	r0, r0
    2388:	77 0b       	sbc	r23, r23
    238a:	6f 5f       	subi	r22, 0xFF	; 255
    238c:	7f 4f       	sbci	r23, 0xFF	; 255
    238e:	ab 01       	movw	r20, r22
    2390:	44 0f       	add	r20, r20
    2392:	55 1f       	adc	r21, r21
    2394:	64 0f       	add	r22, r20
    2396:	75 1f       	adc	r23, r21
    2398:	26 1b       	sub	r18, r22
    239a:	37 0b       	sbc	r19, r23
    239c:	09 c0       	rjmp	.+18     	; 0x23b0 <PatchCommand14+0x44>
    239e:	ef 3f       	cpi	r30, 0xFF	; 255
    23a0:	39 f0       	breq	.+14     	; 0x23b0 <PatchCommand14+0x44>
    23a2:	23 50       	subi	r18, 0x03	; 3
    23a4:	31 09       	sbc	r19, r1
    23a6:	f9 01       	movw	r30, r18
    23a8:	32 97       	sbiw	r30, 0x02	; 2
    23aa:	e4 91       	lpm	r30, Z
    23ac:	ed 30       	cpi	r30, 0x0D	; 13
    23ae:	b9 f7       	brne	.-18     	; 0x239e <PatchCommand14+0x32>
    23b0:	56 96       	adiw	r26, 0x16	; 22
    23b2:	3c 93       	st	X, r19
    23b4:	2e 93       	st	-X, r18
    23b6:	55 97       	sbiw	r26, 0x15	; 21
    23b8:	81 50       	subi	r24, 0x01	; 1
    23ba:	14 96       	adiw	r26, 0x04	; 4
    23bc:	8c 93       	st	X, r24
    23be:	08 95       	ret

000023c0 <StartSong>:
    23c0:	e9 ed       	ldi	r30, 0xD9	; 217
    23c2:	f6 e0       	ldi	r31, 0x06	; 6
    23c4:	9f ef       	ldi	r25, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	8f 77       	andi	r24, 0x7F	; 127
    23ca:	80 83       	st	Z, r24
    23cc:	93 83       	std	Z+3, r25	; 0x03
    23ce:	77 96       	adiw	r30, 0x17	; 23
    23d0:	87 e0       	ldi	r24, 0x07	; 7
    23d2:	e5 33       	cpi	r30, 0x35	; 53
    23d4:	f8 07       	cpc	r31, r24
    23d6:	b9 f7       	brne	.-18     	; 0x23c6 <StartSong+0x6>
    23d8:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <songPos+0x1>
    23dc:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <songPos>
    23e0:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <songStart+0x1>
    23e4:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <songStart>
    23e8:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <loopStart+0x1>
    23ec:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <loopStart>
    23f0:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <nextDeltaTime>
    23f4:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <songSpeed>
    23f8:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <lastStatus>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <playSong>
    2402:	08 95       	ret

00002404 <ProcessMusic>:
    2404:	6f 92       	push	r6
    2406:	7f 92       	push	r7
    2408:	8f 92       	push	r8
    240a:	9f 92       	push	r9
    240c:	af 92       	push	r10
    240e:	bf 92       	push	r11
    2410:	cf 92       	push	r12
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	09 ed       	ldi	r16, 0xD9	; 217
    2422:	16 e0       	ldi	r17, 0x06	; 6
    2424:	e2 eb       	ldi	r30, 0xB2	; 178
    2426:	ee 2e       	mov	r14, r30
    2428:	e6 e0       	ldi	r30, 0x06	; 6
    242a:	fe 2e       	mov	r15, r30
    242c:	d7 01       	movw	r26, r14
    242e:	e8 01       	movw	r28, r16
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	f9 01       	movw	r30, r18
    2436:	e7 52       	subi	r30, 0x27	; 39
    2438:	f9 4f       	sbci	r31, 0xF9	; 249
    243a:	87 85       	ldd	r24, Z+15	; 0x0f
    243c:	88 23       	and	r24, r24
    243e:	89 f0       	breq	.+34     	; 0x2462 <ProcessMusic+0x5e>
    2440:	46 85       	ldd	r20, Z+14	; 0x0e
    2442:	08 2e       	mov	r0, r24
    2444:	00 0c       	add	r0, r0
    2446:	99 0b       	sbc	r25, r25
    2448:	84 0f       	add	r24, r20
    244a:	91 1d       	adc	r25, r1
    244c:	8f 3f       	cpi	r24, 0xFF	; 255
    244e:	91 05       	cpc	r25, r1
    2450:	19 f0       	breq	.+6      	; 0x2458 <ProcessMusic+0x54>
    2452:	14 f0       	brlt	.+4      	; 0x2458 <ProcessMusic+0x54>
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	97 ff       	sbrs	r25, 7
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <ProcessMusic+0x5c>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	86 87       	std	Z+14, r24	; 0x0e
    2462:	68 81       	ld	r22, Y
    2464:	63 ff       	sbrs	r22, 3
    2466:	26 c0       	rjmp	.+76     	; 0x24b4 <ProcessMusic+0xb0>
    2468:	4d 81       	ldd	r20, Y+5	; 0x05
    246a:	5e 81       	ldd	r21, Y+6	; 0x06
    246c:	11 96       	adiw	r26, 0x01	; 1
    246e:	8d 91       	ld	r24, X+
    2470:	9c 91       	ld	r25, X
    2472:	12 97       	sbiw	r26, 0x02	; 2
    2474:	84 0f       	add	r24, r20
    2476:	95 1f       	adc	r25, r21
    2478:	12 96       	adiw	r26, 0x02	; 2
    247a:	9c 93       	st	X, r25
    247c:	8e 93       	st	-X, r24
    247e:	11 97       	sbiw	r26, 0x01	; 1
    2480:	e7 81       	ldd	r30, Z+7	; 0x07
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	e8 5f       	subi	r30, 0xF8	; 248
    248a:	f4 4d       	sbci	r31, 0xD4	; 212
    248c:	c5 90       	lpm	r12, Z+
    248e:	d4 90       	lpm	r13, Z
    2490:	14 16       	cp	r1, r20
    2492:	15 06       	cpc	r1, r21
    2494:	24 f4       	brge	.+8      	; 0x249e <ProcessMusic+0x9a>
    2496:	8c 15       	cp	r24, r12
    2498:	9d 05       	cpc	r25, r13
    249a:	30 f4       	brcc	.+12     	; 0x24a8 <ProcessMusic+0xa4>
    249c:	0b c0       	rjmp	.+22     	; 0x24b4 <ProcessMusic+0xb0>
    249e:	45 2b       	or	r20, r21
    24a0:	49 f0       	breq	.+18     	; 0x24b4 <ProcessMusic+0xb0>
    24a2:	c8 16       	cp	r12, r24
    24a4:	d9 06       	cpc	r13, r25
    24a6:	30 f0       	brcs	.+12     	; 0x24b4 <ProcessMusic+0xb0>
    24a8:	12 96       	adiw	r26, 0x02	; 2
    24aa:	dc 92       	st	X, r13
    24ac:	ce 92       	st	-X, r12
    24ae:	11 97       	sbiw	r26, 0x01	; 1
    24b0:	67 7f       	andi	r22, 0xF7	; 247
    24b2:	68 83       	st	Y, r22
    24b4:	29 5e       	subi	r18, 0xE9	; 233
    24b6:	3f 4f       	sbci	r19, 0xFF	; 255
    24b8:	67 96       	adiw	r28, 0x17	; 23
    24ba:	16 96       	adiw	r26, 0x06	; 6
    24bc:	2c 35       	cpi	r18, 0x5C	; 92
    24be:	31 05       	cpc	r19, r1
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <ProcessMusic+0xc0>
    24c2:	b8 cf       	rjmp	.-144    	; 0x2434 <ProcessMusic+0x30>
    24c4:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <playSong>
    24c8:	88 23       	and	r24, r24
    24ca:	c1 f1       	breq	.+112    	; 0x253c <ProcessMusic+0x138>
    24cc:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <nextDeltaTime>
    24d0:	88 23       	and	r24, r24
    24d2:	19 f0       	breq	.+6      	; 0x24da <ProcessMusic+0xd6>
    24d4:	81 50       	subi	r24, 0x01	; 1
    24d6:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <nextDeltaTime>
    24da:	d7 e1       	ldi	r29, 0x17	; 23
    24dc:	24 c0       	rjmp	.+72     	; 0x2526 <ProcessMusic+0x122>
    24de:	0e 94 0b 14 	call	0x2816	; 0x2816 <SongBufRead>
    24e2:	c8 2f       	mov	r28, r24
    24e4:	8f 3f       	cpi	r24, 0xFF	; 255
    24e6:	d1 f1       	breq	.+116    	; 0x255c <ProcessMusic+0x158>
    24e8:	80 7e       	andi	r24, 0xE0	; 224
    24ea:	80 3a       	cpi	r24, 0xA0	; 160
    24ec:	d0 f5       	brcc	.+116    	; 0x2562 <ProcessMusic+0x15e>
    24ee:	dc 2e       	mov	r13, r28
    24f0:	d2 94       	swap	r13
    24f2:	d6 94       	lsr	r13
    24f4:	97 e0       	ldi	r25, 0x07	; 7
    24f6:	d9 22       	and	r13, r25
    24f8:	0e 94 0b 14 	call	0x2816	; 0x2816 <SongBufRead>
    24fc:	48 2f       	mov	r20, r24
    24fe:	40 78       	andi	r20, 0x80	; 128
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	55 95       	asr	r21
    2504:	47 95       	ror	r20
    2506:	55 95       	asr	r21
    2508:	47 95       	ror	r20
    250a:	cf 71       	andi	r28, 0x1F	; 31
    250c:	c4 2b       	or	r28, r20
    250e:	4c 2f       	mov	r20, r28
    2510:	44 0f       	add	r20, r20
    2512:	dd 9d       	mul	r29, r13
    2514:	f0 01       	movw	r30, r0
    2516:	11 24       	eor	r1, r1
    2518:	e7 52       	subi	r30, 0x27	; 39
    251a:	f9 4f       	sbci	r31, 0xF9	; 249
    251c:	28 2f       	mov	r18, r24
    251e:	60 89       	ldd	r22, Z+16	; 0x10
    2520:	8d 2d       	mov	r24, r13
    2522:	0e 94 a5 14 	call	0x294a	; 0x294a <TriggerNote>
    2526:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <nextDeltaTime>
    252a:	81 11       	cpse	r24, r1
    252c:	07 c0       	rjmp	.+14     	; 0x253c <ProcessMusic+0x138>
    252e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <SongBufBytes>
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	a0 f6       	brcc	.-88     	; 0x24de <ProcessMusic+0xda>
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <nextDeltaTime>
    253c:	c2 ee       	ldi	r28, 0xE2	; 226
    253e:	ac 2e       	mov	r10, r28
    2540:	c6 e0       	ldi	r28, 0x06	; 6
    2542:	bc 2e       	mov	r11, r28
    2544:	dc ee       	ldi	r29, 0xEC	; 236
    2546:	cd 2e       	mov	r12, r29
    2548:	d6 e0       	ldi	r29, 0x06	; 6
    254a:	dd 2e       	mov	r13, r29
    254c:	cd ee       	ldi	r28, 0xED	; 237
    254e:	d6 e0       	ldi	r29, 0x06	; 6
    2550:	88 24       	eor	r8, r8
    2552:	8a 94       	dec	r8
    2554:	91 2c       	mov	r9, r1
    2556:	5e c0       	rjmp	.+188    	; 0x2614 <ProcessMusic+0x210>
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	81 f5       	brne	.+96     	; 0x25bc <ProcessMusic+0x1b8>
    255c:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <playSong>
    2560:	ed cf       	rjmp	.-38     	; 0x253c <ProcessMusic+0x138>
    2562:	80 3a       	cpi	r24, 0xA0	; 160
    2564:	51 f4       	brne	.+20     	; 0x257a <ProcessMusic+0x176>
    2566:	0e 94 0b 14 	call	0x2816	; 0x2816 <SongBufRead>
    256a:	c7 70       	andi	r28, 0x07	; 7
    256c:	dc 9f       	mul	r29, r28
    256e:	f0 01       	movw	r30, r0
    2570:	11 24       	eor	r1, r1
    2572:	e7 52       	subi	r30, 0x27	; 39
    2574:	f9 4f       	sbci	r31, 0xF9	; 249
    2576:	80 8b       	std	Z+16, r24	; 0x10
    2578:	d6 cf       	rjmp	.-84     	; 0x2526 <ProcessMusic+0x122>
    257a:	80 3c       	cpi	r24, 0xC0	; 192
    257c:	69 f5       	brne	.+90     	; 0x25d8 <ProcessMusic+0x1d4>
    257e:	8c 2f       	mov	r24, r28
    2580:	83 70       	andi	r24, 0x03	; 3
    2582:	89 f4       	brne	.+34     	; 0x25a6 <ProcessMusic+0x1a2>
    2584:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <songPos>
    2588:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <songPos+0x1>
    258c:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <loopEnd+0x1>
    2590:	80 93 39 07 	sts	0x0739, r24	; 0x800739 <loopEnd>
    2594:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <loopStart>
    2598:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <loopStart+0x1>
    259c:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <songPos+0x1>
    25a0:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <songPos>
    25a4:	c0 cf       	rjmp	.-128    	; 0x2526 <ProcessMusic+0x122>
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	b9 f6       	brne	.-82     	; 0x2558 <ProcessMusic+0x154>
    25aa:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <songPos>
    25ae:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <songPos+0x1>
    25b2:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <loopStart+0x1>
    25b6:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <loopStart>
    25ba:	b5 cf       	rjmp	.-150    	; 0x2526 <ProcessMusic+0x122>
    25bc:	cc 71       	andi	r28, 0x1C	; 28
    25be:	c6 95       	lsr	r28
    25c0:	c6 95       	lsr	r28
    25c2:	cf 5f       	subi	r28, 0xFF	; 255
    25c4:	c0 93 3c 07 	sts	0x073C, r28	; 0x80073c <nextDeltaTime>
    25c8:	c7 30       	cpi	r28, 0x07	; 7
    25ca:	09 f0       	breq	.+2      	; 0x25ce <ProcessMusic+0x1ca>
    25cc:	ac cf       	rjmp	.-168    	; 0x2526 <ProcessMusic+0x122>
    25ce:	0e 94 0b 14 	call	0x2816	; 0x2816 <SongBufRead>
    25d2:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <nextDeltaTime>
    25d6:	a7 cf       	rjmp	.-178    	; 0x2526 <ProcessMusic+0x122>
    25d8:	8c 2f       	mov	r24, r28
    25da:	87 70       	andi	r24, 0x07	; 7
    25dc:	d8 2e       	mov	r13, r24
    25de:	c8 71       	andi	r28, 0x18	; 24
    25e0:	0e 94 0b 14 	call	0x2816	; 0x2816 <SongBufRead>
    25e4:	2d 2d       	mov	r18, r13
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	88 0f       	add	r24, r24
    25ea:	d2 9f       	mul	r29, r18
    25ec:	f0 01       	movw	r30, r0
    25ee:	d3 9f       	mul	r29, r19
    25f0:	f0 0d       	add	r31, r0
    25f2:	11 24       	eor	r1, r1
    25f4:	e7 52       	subi	r30, 0x27	; 39
    25f6:	f9 4f       	sbci	r31, 0xF9	; 249
    25f8:	c1 11       	cpse	r28, r1
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <ProcessMusic+0x1fc>
    25fc:	84 87       	std	Z+12, r24	; 0x0c
    25fe:	93 cf       	rjmp	.-218    	; 0x2526 <ProcessMusic+0x122>
    2600:	c8 30       	cpi	r28, 0x08	; 8
    2602:	11 f4       	brne	.+4      	; 0x2608 <ProcessMusic+0x204>
    2604:	83 83       	std	Z+3, r24	; 0x03
    2606:	8f cf       	rjmp	.-226    	; 0x2526 <ProcessMusic+0x122>
    2608:	c0 31       	cpi	r28, 0x10	; 16
    260a:	11 f4       	brne	.+4      	; 0x2610 <ProcessMusic+0x20c>
    260c:	82 87       	std	Z+10, r24	; 0x0a
    260e:	8b cf       	rjmp	.-234    	; 0x2526 <ProcessMusic+0x122>
    2610:	83 87       	std	Z+11, r24	; 0x0b
    2612:	89 cf       	rjmp	.-238    	; 0x2526 <ProcessMusic+0x122>
    2614:	d8 01       	movw	r26, r16
    2616:	8c 91       	ld	r24, X
    2618:	85 ff       	sbrs	r24, 5
    261a:	52 c0       	rjmp	.+164    	; 0x26c0 <ProcessMusic+0x2bc>
    261c:	55 96       	adiw	r26, 0x15	; 21
    261e:	2d 91       	ld	r18, X+
    2620:	3c 91       	ld	r19, X
    2622:	56 97       	sbiw	r26, 0x16	; 22
    2624:	23 2b       	or	r18, r19
    2626:	09 f4       	brne	.+2      	; 0x262a <ProcessMusic+0x226>
    2628:	4b c0       	rjmp	.+150    	; 0x26c0 <ProcessMusic+0x2bc>
    262a:	86 fd       	sbrc	r24, 6
    262c:	49 c0       	rjmp	.+146    	; 0x26c0 <ProcessMusic+0x2bc>
    262e:	3e 01       	movw	r6, r28
    2630:	b2 e0       	ldi	r27, 0x02	; 2
    2632:	6b 1a       	sub	r6, r27
    2634:	71 08       	sbc	r7, r1
    2636:	d6 01       	movw	r26, r12
    2638:	9c 91       	ld	r25, X
    263a:	f3 01       	movw	r30, r6
    263c:	80 81       	ld	r24, Z
    263e:	98 13       	cpse	r25, r24
    2640:	3c c0       	rjmp	.+120    	; 0x26ba <ProcessMusic+0x2b6>
    2642:	d8 01       	movw	r26, r16
    2644:	55 96       	adiw	r26, 0x15	; 21
    2646:	ed 91       	ld	r30, X+
    2648:	fc 91       	ld	r31, X
    264a:	56 97       	sbiw	r26, 0x16	; 22
    264c:	bf 01       	movw	r22, r30
    264e:	6f 5f       	subi	r22, 0xFF	; 255
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	56 96       	adiw	r26, 0x16	; 22
    2654:	7c 93       	st	X, r23
    2656:	6e 93       	st	-X, r22
    2658:	55 97       	sbiw	r26, 0x15	; 21
    265a:	84 91       	lpm	r24, Z
    265c:	8f 3f       	cpi	r24, 0xFF	; 255
    265e:	39 f4       	brne	.+14     	; 0x266e <ProcessMusic+0x26a>
    2660:	f8 01       	movw	r30, r16
    2662:	80 81       	ld	r24, Z
    2664:	8f 77       	andi	r24, 0x7F	; 127
    2666:	80 83       	st	Z, r24
    2668:	16 8a       	std	Z+22, r1	; 0x16
    266a:	15 8a       	std	Z+21, r1	; 0x15
    266c:	26 c0       	rjmp	.+76     	; 0x26ba <ProcessMusic+0x2b6>
    266e:	9f 01       	movw	r18, r30
    2670:	2e 5f       	subi	r18, 0xFE	; 254
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	d8 01       	movw	r26, r16
    2676:	56 96       	adiw	r26, 0x16	; 22
    2678:	3c 93       	st	X, r19
    267a:	2e 93       	st	-X, r18
    267c:	55 97       	sbiw	r26, 0x15	; 21
    267e:	fb 01       	movw	r30, r22
    2680:	64 91       	lpm	r22, Z
    2682:	e8 2f       	mov	r30, r24
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e2 54       	subi	r30, 0x42	; 66
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	25 91       	lpm	r18, Z+
    2690:	34 91       	lpm	r19, Z
    2692:	c8 01       	movw	r24, r16
    2694:	f9 01       	movw	r30, r18
    2696:	09 95       	icall
    2698:	d8 01       	movw	r26, r16
    269a:	55 96       	adiw	r26, 0x15	; 21
    269c:	ed 91       	ld	r30, X+
    269e:	fc 91       	ld	r31, X
    26a0:	56 97       	sbiw	r26, 0x16	; 22
    26a2:	cf 01       	movw	r24, r30
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	56 96       	adiw	r26, 0x16	; 22
    26a8:	9c 93       	st	X, r25
    26aa:	8e 93       	st	-X, r24
    26ac:	55 97       	sbiw	r26, 0x15	; 21
    26ae:	e4 91       	lpm	r30, Z
    26b0:	d3 01       	movw	r26, r6
    26b2:	ec 93       	st	X, r30
    26b4:	f6 01       	movw	r30, r12
    26b6:	10 82       	st	Z, r1
    26b8:	be cf       	rjmp	.-132    	; 0x2636 <ProcessMusic+0x232>
    26ba:	9f 5f       	subi	r25, 0xFF	; 255
    26bc:	d6 01       	movw	r26, r12
    26be:	9c 93       	st	X, r25
    26c0:	f8 01       	movw	r30, r16
    26c2:	90 81       	ld	r25, Z
    26c4:	95 ff       	sbrs	r25, 5
    26c6:	5e c0       	rjmp	.+188    	; 0x2784 <ProcessMusic+0x380>
    26c8:	88 81       	ld	r24, Y
    26ca:	8f 3f       	cpi	r24, 0xFF	; 255
    26cc:	11 f0       	breq	.+4      	; 0x26d2 <ProcessMusic+0x2ce>
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	88 83       	st	Y, r24
    26d2:	97 fd       	sbrc	r25, 7
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <ProcessMusic+0x2da>
    26d6:	fe 01       	movw	r30, r28
    26d8:	38 97       	sbiw	r30, 0x08	; 8
    26da:	90 81       	ld	r25, Z
    26dc:	01 c0       	rjmp	.+2      	; 0x26e0 <ProcessMusic+0x2dc>
    26de:	9f ef       	ldi	r25, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	37 97       	sbiw	r30, 0x07	; 7
    26e4:	80 81       	ld	r24, Z
    26e6:	88 23       	and	r24, r24
    26e8:	09 f4       	brne	.+2      	; 0x26ec <ProcessMusic+0x2e8>
    26ea:	41 c0       	rjmp	.+130    	; 0x276e <ProcessMusic+0x36a>
    26ec:	31 96       	adiw	r30, 0x01	; 1
    26ee:	50 81       	ld	r21, Z
    26f0:	55 23       	and	r21, r21
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <ProcessMusic+0x2f2>
    26f4:	3c c0       	rjmp	.+120    	; 0x276e <ProcessMusic+0x36a>
    26f6:	99 23       	and	r25, r25
    26f8:	d1 f1       	breq	.+116    	; 0x276e <ProcessMusic+0x36a>
    26fa:	40 91 3b 07 	lds	r20, 0x073B	; 0x80073b <masterVolume>
    26fe:	44 23       	and	r20, r20
    2700:	b1 f1       	breq	.+108    	; 0x276e <ProcessMusic+0x36a>
    2702:	89 9f       	mul	r24, r25
    2704:	c0 01       	movw	r24, r0
    2706:	11 24       	eor	r1, r1
    2708:	93 95       	inc	r25
    270a:	89 2f       	mov	r24, r25
    270c:	99 27       	eor	r25, r25
    270e:	58 9f       	mul	r21, r24
    2710:	90 01       	movw	r18, r0
    2712:	59 9f       	mul	r21, r25
    2714:	30 0d       	add	r19, r0
    2716:	11 24       	eor	r1, r1
    2718:	33 95       	inc	r19
    271a:	23 2f       	mov	r18, r19
    271c:	33 27       	eor	r19, r19
    271e:	42 9f       	mul	r20, r18
    2720:	c0 01       	movw	r24, r0
    2722:	43 9f       	mul	r20, r19
    2724:	90 0d       	add	r25, r0
    2726:	11 24       	eor	r1, r1
    2728:	93 95       	inc	r25
    272a:	89 2f       	mov	r24, r25
    272c:	99 27       	eor	r25, r25
    272e:	34 97       	sbiw	r30, 0x04	; 4
    2730:	20 81       	ld	r18, Z
    2732:	22 23       	and	r18, r18
    2734:	f1 f0       	breq	.+60     	; 0x2772 <ProcessMusic+0x36e>
    2736:	d5 01       	movw	r26, r10
    2738:	ec 91       	ld	r30, X
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	e0 50       	subi	r30, 0x00	; 0
    273e:	f3 4d       	sbci	r31, 0xD3	; 211
    2740:	e4 91       	lpm	r30, Z
    2742:	e0 58       	subi	r30, 0x80	; 128
    2744:	2e 9f       	mul	r18, r30
    2746:	f0 01       	movw	r30, r0
    2748:	11 24       	eor	r1, r1
    274a:	f3 95       	inc	r31
    274c:	ef 2f       	mov	r30, r31
    274e:	ff 27       	eor	r31, r31
    2750:	a4 01       	movw	r20, r8
    2752:	4e 1b       	sub	r20, r30
    2754:	5f 0b       	sbc	r21, r31
    2756:	48 9f       	mul	r20, r24
    2758:	90 01       	movw	r18, r0
    275a:	49 9f       	mul	r20, r25
    275c:	30 0d       	add	r19, r0
    275e:	58 9f       	mul	r21, r24
    2760:	30 0d       	add	r19, r0
    2762:	11 24       	eor	r1, r1
    2764:	c9 01       	movw	r24, r18
    2766:	93 95       	inc	r25
    2768:	89 2f       	mov	r24, r25
    276a:	99 27       	eor	r25, r25
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <ProcessMusic+0x36e>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	f5 01       	movw	r30, r10
    2774:	30 81       	ld	r19, Z
    2776:	fe 01       	movw	r30, r28
    2778:	39 97       	sbiw	r30, 0x09	; 9
    277a:	20 81       	ld	r18, Z
    277c:	23 0f       	add	r18, r19
    277e:	d5 01       	movw	r26, r10
    2780:	2c 93       	st	X, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <ProcessMusic+0x384>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	f7 01       	movw	r30, r14
    278a:	80 83       	st	Z, r24
    278c:	09 5e       	subi	r16, 0xE9	; 233
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	f6 e0       	ldi	r31, 0x06	; 6
    2792:	ef 0e       	add	r14, r31
    2794:	f1 1c       	adc	r15, r1
    2796:	87 e1       	ldi	r24, 0x17	; 23
    2798:	a8 0e       	add	r10, r24
    279a:	b1 1c       	adc	r11, r1
    279c:	a7 e1       	ldi	r26, 0x17	; 23
    279e:	ca 0e       	add	r12, r26
    27a0:	d1 1c       	adc	r13, r1
    27a2:	67 96       	adiw	r28, 0x17	; 23
    27a4:	b7 e0       	ldi	r27, 0x07	; 7
    27a6:	05 33       	cpi	r16, 0x35	; 53
    27a8:	1b 07       	cpc	r17, r27
    27aa:	09 f0       	breq	.+2      	; 0x27ae <ProcessMusic+0x3aa>
    27ac:	33 cf       	rjmp	.-410    	; 0x2614 <ProcessMusic+0x210>
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	df 90       	pop	r13
    27bc:	cf 90       	pop	r12
    27be:	bf 90       	pop	r11
    27c0:	af 90       	pop	r10
    27c2:	9f 90       	pop	r9
    27c4:	8f 90       	pop	r8
    27c6:	7f 90       	pop	r7
    27c8:	6f 90       	pop	r6
    27ca:	08 95       	ret

000027cc <SongBufFull>:
    27cc:	40 91 83 07 	lds	r20, 0x0783	; 0x800783 <songBufOut>
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	20 91 37 07 	lds	r18, 0x0737	; 0x800737 <songBufIn>
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	2f 5f       	subi	r18, 0xFF	; 255
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	2f 73       	andi	r18, 0x3F	; 63
    27de:	33 27       	eor	r19, r19
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	42 17       	cp	r20, r18
    27e4:	53 07       	cpc	r21, r19
    27e6:	09 f0       	breq	.+2      	; 0x27ea <SongBufFull+0x1e>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	08 95       	ret

000027ec <SongBufBytes>:
    27ec:	80 91 37 07 	lds	r24, 0x0737	; 0x800737 <songBufIn>
    27f0:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <songBufOut>
    27f4:	98 17       	cp	r25, r24
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <SongBufBytes+0xe>
    27f8:	80 5c       	subi	r24, 0xC0	; 192
    27fa:	89 1b       	sub	r24, r25
    27fc:	08 95       	ret

000027fe <SongBufWrite>:
    27fe:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <songBufIn>
    2802:	e9 2f       	mov	r30, r25
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	e0 5c       	subi	r30, 0xC0	; 192
    2808:	f8 4f       	sbci	r31, 0xF8	; 248
    280a:	80 83       	st	Z, r24
    280c:	9f 5f       	subi	r25, 0xFF	; 255
    280e:	9f 73       	andi	r25, 0x3F	; 63
    2810:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <songBufIn>
    2814:	08 95       	ret

00002816 <SongBufRead>:
    2816:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <songBufOut>
    281a:	e9 2f       	mov	r30, r25
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	e0 5c       	subi	r30, 0xC0	; 192
    2820:	f8 4f       	sbci	r31, 0xF8	; 248
    2822:	80 81       	ld	r24, Z
    2824:	9f 5f       	subi	r25, 0xFF	; 255
    2826:	9f 73       	andi	r25, 0x3F	; 63
    2828:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <songBufOut>
    282c:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <songPos>
    2830:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <songPos+0x1>
    2834:	2f 5f       	subi	r18, 0xFF	; 255
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	30 93 3f 07 	sts	0x073F, r19	; 0x80073f <songPos+0x1>
    283c:	20 93 3e 07 	sts	0x073E, r18	; 0x80073e <songPos>
    2840:	08 95       	ret

00002842 <TriggerCommon>:
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	1f 92       	push	r1
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	5c 01       	movw	r10, r24
    285e:	e6 2e       	mov	r14, r22
    2860:	fc 01       	movw	r30, r24
    2862:	80 81       	ld	r24, Z
    2864:	f8 2f       	mov	r31, r24
    2866:	f0 78       	andi	r31, 0x80	; 128
    2868:	ff 2e       	mov	r15, r31
    286a:	f5 01       	movw	r30, r10
    286c:	17 86       	std	Z+15, r1	; 0x0f
    286e:	9f ef       	ldi	r25, 0xFF	; 255
    2870:	96 87       	std	Z+14, r25	; 0x0e
    2872:	45 87       	std	Z+13, r20	; 0x0d
    2874:	14 8a       	std	Z+20, r1	; 0x14
    2876:	87 7b       	andi	r24, 0xB7	; 183
    2878:	80 83       	st	Z, r24
    287a:	12 86       	std	Z+10, r1	; 0x0a
    287c:	11 86       	std	Z+9, r1	; 0x09
    287e:	21 83       	std	Z+1, r18	; 0x01
    2880:	14 82       	std	Z+4, r1	; 0x04
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	f9 e0       	ldi	r31, 0x09	; 9
    2886:	6f 9f       	mul	r22, r31
    2888:	80 01       	movw	r16, r0
    288a:	11 24       	eor	r1, r1
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	51 f5       	brne	.+84     	; 0x28e4 <TriggerCommon+0xa2>
    2890:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <tr4_pos_frac>
    2894:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <patchPointers>
    2898:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <patchPointers+0x1>
    289c:	80 0f       	add	r24, r16
    289e:	91 1f       	adc	r25, r17
    28a0:	fc 01       	movw	r30, r24
    28a2:	31 96       	adiw	r30, 0x01	; 1
    28a4:	a5 91       	lpm	r26, Z+
    28a6:	b4 91       	lpm	r27, Z
    28a8:	b0 93 c9 06 	sts	0x06C9, r27	; 0x8006c9 <tr4_pos_hi>
    28ac:	a0 93 c8 06 	sts	0x06C8, r26	; 0x8006c8 <tr4_pos_lo>
    28b0:	ac 01       	movw	r20, r24
    28b2:	49 5f       	subi	r20, 0xF9	; 249
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	fa 01       	movw	r30, r20
    28b8:	c5 90       	lpm	r12, Z+
    28ba:	d4 90       	lpm	r13, Z
    28bc:	05 96       	adiw	r24, 0x05	; 5
    28be:	fc 01       	movw	r30, r24
    28c0:	65 91       	lpm	r22, Z+
    28c2:	74 91       	lpm	r23, Z
    28c4:	c6 1a       	sub	r12, r22
    28c6:	d7 0a       	sbc	r13, r23
    28c8:	d0 92 cb 06 	sts	0x06CB, r13	; 0x8006cb <tr4_loop_len_hi>
    28cc:	c0 92 ca 06 	sts	0x06CA, r12	; 0x8006ca <tr4_loop_len_lo>
    28d0:	fa 01       	movw	r30, r20
    28d2:	85 91       	lpm	r24, Z+
    28d4:	94 91       	lpm	r25, Z
    28d6:	a8 0f       	add	r26, r24
    28d8:	b9 1f       	adc	r27, r25
    28da:	b0 93 cd 06 	sts	0x06CD, r27	; 0x8006cd <tr4_loop_end_hi>
    28de:	a0 93 cc 06 	sts	0x06CC, r26	; 0x8006cc <tr4_loop_end_lo>
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <TriggerCommon+0xac>
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	29 83       	std	Y+1, r18	; 0x01
    28e8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <SetMixerWave>
    28ec:	29 81       	ldd	r18, Y+1	; 0x01
    28ee:	62 2f       	mov	r22, r18
    28f0:	f5 01       	movw	r30, r10
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	0e 94 e5 14 	call	0x29ca	; 0x29ca <SetMixerNote>
    28f8:	f5 01       	movw	r30, r10
    28fa:	ff 20       	and	r15, r15
    28fc:	11 f0       	breq	.+4      	; 0x2902 <TriggerCommon+0xc0>
    28fe:	e1 8a       	std	Z+17, r14	; 0x11
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <TriggerCommon+0xc2>
    2902:	e0 8a       	std	Z+16, r14	; 0x10
    2904:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <patchPointers>
    2908:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <patchPointers+0x1>
    290c:	e0 0f       	add	r30, r16
    290e:	f1 1f       	adc	r31, r17
    2910:	33 96       	adiw	r30, 0x03	; 3
    2912:	85 91       	lpm	r24, Z+
    2914:	94 91       	lpm	r25, Z
    2916:	f5 01       	movw	r30, r10
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	19 f4       	brne	.+6      	; 0x2922 <TriggerCommon+0xe0>
    291c:	16 8a       	std	Z+22, r1	; 0x16
    291e:	15 8a       	std	Z+21, r1	; 0x15
    2920:	08 c0       	rjmp	.+16     	; 0x2932 <TriggerCommon+0xf0>
    2922:	13 8a       	std	Z+19, r1	; 0x13
    2924:	fc 01       	movw	r30, r24
    2926:	24 91       	lpm	r18, Z
    2928:	f5 01       	movw	r30, r10
    292a:	22 8b       	std	Z+18, r18	; 0x12
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	96 8b       	std	Z+22, r25	; 0x16
    2930:	85 8b       	std	Z+21, r24	; 0x15
    2932:	0f 90       	pop	r0
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	bf 90       	pop	r11
    2946:	af 90       	pop	r10
    2948:	08 95       	ret

0000294a <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    294e:	a8 2f       	mov	r26, r24
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	97 e1       	ldi	r25, 0x17	; 23
    2954:	89 9f       	mul	r24, r25
    2956:	f0 01       	movw	r30, r0
    2958:	11 24       	eor	r1, r1
    295a:	e7 52       	subi	r30, 0x27	; 39
    295c:	f9 4f       	sbci	r31, 0xF9	; 249
    295e:	80 81       	ld	r24, Z
    2960:	85 ff       	sbrs	r24, 5
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <TriggerNote+0x1e>
    2964:	87 fd       	sbrc	r24, 7
    2966:	2e c0       	rjmp	.+92     	; 0x29c4 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    2968:	21 11       	cpse	r18, r1
    296a:	18 c0       	rjmp	.+48     	; 0x299c <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    296c:	97 e1       	ldi	r25, 0x17	; 23
    296e:	9a 9f       	mul	r25, r26
    2970:	f0 01       	movw	r30, r0
    2972:	9b 9f       	mul	r25, r27
    2974:	f0 0d       	add	r31, r0
    2976:	11 24       	eor	r1, r1
    2978:	e7 52       	subi	r30, 0x27	; 39
    297a:	f9 4f       	sbci	r31, 0xF9	; 249
    297c:	97 85       	ldd	r25, Z+15	; 0x0f
    297e:	91 11       	cpse	r25, r1
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <TriggerNote+0x3c>
    2982:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    2984:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    2986:	97 e1       	ldi	r25, 0x17	; 23
    2988:	9a 9f       	mul	r25, r26
    298a:	f0 01       	movw	r30, r0
    298c:	9b 9f       	mul	r25, r27
    298e:	f0 0d       	add	r31, r0
    2990:	11 24       	eor	r1, r1
    2992:	e7 52       	subi	r30, 0x27	; 39
    2994:	f9 4f       	sbci	r31, 0xF9	; 249
    2996:	8f 7b       	andi	r24, 0xBF	; 191
    2998:	80 83       	st	Z, r24
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <TriggerNote+0x7a>
    299c:	82 2f       	mov	r24, r18
    299e:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    29a0:	97 e1       	ldi	r25, 0x17	; 23
    29a2:	9a 9f       	mul	r25, r26
    29a4:	e0 01       	movw	r28, r0
    29a6:	9b 9f       	mul	r25, r27
    29a8:	d0 0d       	add	r29, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	c7 52       	subi	r28, 0x27	; 39
    29ae:	d9 4f       	sbci	r29, 0xF9	; 249
    29b0:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    29b2:	1e 8a       	std	Y+22, r1	; 0x16
    29b4:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    29b6:	48 2f       	mov	r20, r24
    29b8:	ce 01       	movw	r24, r28
    29ba:	0e 94 21 14 	call	0x2842	; 0x2842 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    29be:	88 81       	ld	r24, Y
    29c0:	80 62       	ori	r24, 0x20	; 32
    29c2:	88 83       	st	Y, r24
		}

	}
}
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <SetMixerNote>:
    29ca:	99 27       	eor	r25, r25
    29cc:	77 27       	eor	r23, r23

000029ce <set_note_waves>:
    29ce:	e8 e0       	ldi	r30, 0x08	; 8
    29d0:	fb e2       	ldi	r31, 0x2B	; 43
    29d2:	66 0f       	add	r22, r22
    29d4:	77 1f       	adc	r23, r23
    29d6:	e6 0f       	add	r30, r22
    29d8:	f7 1f       	adc	r31, r23
    29da:	a5 91       	lpm	r26, Z+
    29dc:	b4 91       	lpm	r27, Z
    29de:	e2 eb       	ldi	r30, 0xB2	; 178
    29e0:	f6 e0       	ldi	r31, 0x06	; 6
    29e2:	26 e0       	ldi	r18, 0x06	; 6
    29e4:	28 9f       	mul	r18, r24
    29e6:	e0 0d       	add	r30, r0
    29e8:	f1 1d       	adc	r31, r1
    29ea:	a1 83       	std	Z+1, r26	; 0x01
    29ec:	b2 83       	std	Z+2, r27	; 0x02
    29ee:	11 24       	eor	r1, r1
    29f0:	08 95       	ret

000029f2 <SetMixerWave>:
    29f2:	99 27       	eor	r25, r25
    29f4:	77 27       	eor	r23, r23
    29f6:	e2 eb       	ldi	r30, 0xB2	; 178
    29f8:	f6 e0       	ldi	r31, 0x06	; 6
    29fa:	26 e0       	ldi	r18, 0x06	; 6
    29fc:	28 9f       	mul	r18, r24
    29fe:	e0 0d       	add	r30, r0
    2a00:	f1 1d       	adc	r31, r1
    2a02:	7d e2       	ldi	r23, 0x2D	; 45
    2a04:	76 0f       	add	r23, r22
    2a06:	75 83       	std	Z+5, r23	; 0x05

00002a08 <esmw>:
    2a08:	11 24       	eor	r1, r1
    2a0a:	08 95       	ret
	...

00002b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    2b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    2b02:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <sound_enabled>
	ret
    2b06:	08 95       	ret

00002b08 <steptable>:
    2b08:	22 00       	.word	0x0022	; ????
    2b0a:	24 00       	.word	0x0024	; ????
    2b0c:	26 00       	.word	0x0026	; ????
    2b0e:	28 00       	.word	0x0028	; ????
    2b10:	2b 00       	.word	0x002b	; ????
    2b12:	2d 00       	.word	0x002d	; ????
    2b14:	30 00       	.word	0x0030	; ????
    2b16:	33 00       	.word	0x0033	; ????
    2b18:	36 00       	.word	0x0036	; ????
    2b1a:	39 00       	.word	0x0039	; ????
    2b1c:	3d 00       	.word	0x003d	; ????
    2b1e:	40 00       	.word	0x0040	; ????
    2b20:	44 00       	.word	0x0044	; ????
    2b22:	48 00       	.word	0x0048	; ????
    2b24:	4c 00       	.word	0x004c	; ????
    2b26:	51 00       	.word	0x0051	; ????
    2b28:	56 00       	.word	0x0056	; ????
    2b2a:	5b 00       	.word	0x005b	; ????
    2b2c:	60 00       	.word	0x0060	; ????
    2b2e:	66 00       	.word	0x0066	; ????
    2b30:	6c 00       	.word	0x006c	; ????
    2b32:	73 00       	.word	0x0073	; ????
    2b34:	79 00       	.word	0x0079	; ????
    2b36:	81 00       	.word	0x0081	; ????
    2b38:	88 00       	.word	0x0088	; ????
    2b3a:	90 00       	.word	0x0090	; ????
    2b3c:	99 00       	.word	0x0099	; ????
    2b3e:	a2 00       	.word	0x00a2	; ????
    2b40:	ac 00       	.word	0x00ac	; ????
    2b42:	b6 00       	.word	0x00b6	; ????
    2b44:	c1 00       	.word	0x00c1	; ????
    2b46:	cc 00       	.word	0x00cc	; ????
    2b48:	d8 00       	.word	0x00d8	; ????
    2b4a:	e5 00       	.word	0x00e5	; ????
    2b4c:	f3 00       	.word	0x00f3	; ????
    2b4e:	01 01       	movw	r0, r2
    2b50:	10 01       	movw	r2, r0
    2b52:	21 01       	movw	r4, r2
    2b54:	32 01       	movw	r6, r4
    2b56:	44 01       	movw	r8, r8
    2b58:	57 01       	movw	r10, r14
    2b5a:	6c 01       	movw	r12, r24
    2b5c:	81 01       	movw	r16, r2
    2b5e:	98 01       	movw	r18, r16
    2b60:	b0 01       	movw	r22, r0
    2b62:	ca 01       	movw	r24, r20
    2b64:	e5 01       	movw	r28, r10
    2b66:	02 02       	muls	r16, r18
    2b68:	21 02       	muls	r18, r17
    2b6a:	41 02       	muls	r20, r17
    2b6c:	64 02       	muls	r22, r20
    2b6e:	88 02       	muls	r24, r24
    2b70:	ae 02       	muls	r26, r30
    2b72:	d7 02       	muls	r29, r23
    2b74:	03 03       	mulsu	r16, r19
    2b76:	30 03       	mulsu	r19, r16
    2b78:	61 03       	mulsu	r22, r17
    2b7a:	94 03       	fmuls	r17, r20
    2b7c:	cb 03       	fmulsu	r20, r19
    2b7e:	05 04       	cpc	r0, r5
    2b80:	42 04       	cpc	r4, r2
    2b82:	83 04       	cpc	r8, r3
    2b84:	c7 04       	cpc	r12, r7
    2b86:	10 05       	cpc	r17, r0
    2b88:	5d 05       	cpc	r21, r13
    2b8a:	af 05       	cpc	r26, r15
    2b8c:	05 06       	cpc	r0, r21
    2b8e:	61 06       	cpc	r6, r17
    2b90:	c2 06       	cpc	r12, r18
    2b92:	29 07       	cpc	r18, r25
    2b94:	96 07       	cpc	r25, r22
    2b96:	09 08       	sbc	r0, r9
    2b98:	83 08       	sbc	r8, r3
    2b9a:	05 09       	sbc	r16, r5
    2b9c:	8e 09       	sbc	r24, r14
    2b9e:	20 0a       	sbc	r2, r16
    2ba0:	ba 0a       	sbc	r11, r26
    2ba2:	5d 0b       	sbc	r21, r29
    2ba4:	0a 0c       	add	r0, r10
    2ba6:	c1 0c       	add	r12, r1
    2ba8:	84 0d       	add	r24, r4
    2baa:	51 0e       	add	r5, r17
    2bac:	2b 0f       	add	r18, r27
    2bae:	12 10       	cpse	r1, r2
    2bb0:	07 11       	cpse	r16, r7
    2bb2:	0a 12       	cpse	r0, r26
    2bb4:	1d 13       	cpse	r17, r29
    2bb6:	40 14       	cp	r4, r0
    2bb8:	74 15       	cp	r23, r4
    2bba:	ba 16       	cp	r11, r26
    2bbc:	14 18       	sub	r1, r4
    2bbe:	83 19       	sub	r24, r3
    2bc0:	07 1b       	sub	r16, r23
    2bc2:	a3 1c       	adc	r10, r3
    2bc4:	57 1e       	adc	r5, r23
    2bc6:	24 20       	and	r2, r4
    2bc8:	0e 22       	and	r0, r30
    2bca:	14 24       	eor	r1, r4
    2bcc:	39 26       	eor	r3, r25
    2bce:	7f 28       	or	r7, r15
    2bd0:	e8 2a       	or	r14, r24
    2bd2:	75 2d       	mov	r23, r5
    2bd4:	29 30       	cpi	r18, 0x09	; 9
    2bd6:	06 33       	cpi	r16, 0x36	; 54
    2bd8:	0f 36       	cpi	r16, 0x6F	; 111
    2bda:	45 39       	cpi	r20, 0x95	; 149
    2bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    2bde:	49 40       	sbci	r20, 0x09	; 9
    2be0:	1b 44       	sbci	r17, 0x4B	; 75
    2be2:	28 48       	sbci	r18, 0x88	; 136
    2be4:	73 4c       	sbci	r23, 0xC3	; 195
    2be6:	fe 50       	subi	r31, 0x0E	; 14
    2be8:	cf 55       	subi	r28, 0x5F	; 95
    2bea:	ea 5a       	subi	r30, 0xAA	; 170
    2bec:	51 60       	ori	r21, 0x01	; 1
    2bee:	0c 66       	ori	r16, 0x6C	; 108
    2bf0:	1d 6c       	ori	r17, 0xCD	; 205
    2bf2:	8b 72       	andi	r24, 0x2B	; 43
    2bf4:	5a 79       	andi	r21, 0x9A	; 154
    2bf6:	92 80       	ldd	r9, Z+2	; 0x02
    2bf8:	37 88       	ldd	r3, Z+23	; 0x17
    2bfa:	50 90 e5 98 	lds	r5, 0x98E5	; 0x8098e5 <__bss_end+0x915a>
    2bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    2c00:	9f ab       	std	Y+55, r25	; 0x37
    2c02:	d3 b5       	in	r29, 0x23	; 35
    2c04:	a3 c0       	rjmp	.+326    	; 0x2d4c <waves+0x4c>
	...

00002d00 <waves>:
    2d00:	00 03       	mulsu	r16, r16
    2d02:	06 09       	sbc	r16, r6
    2d04:	0c 10       	cpse	r0, r12
    2d06:	13 16       	cp	r1, r19
    2d08:	19 1c       	adc	r1, r9
    2d0a:	1f 22       	and	r1, r31
    2d0c:	25 28       	or	r2, r5
    2d0e:	2b 2e       	mov	r2, r27
    2d10:	31 33       	cpi	r19, 0x31	; 49
    2d12:	36 39       	cpi	r19, 0x96	; 150
    2d14:	3c 3f       	cpi	r19, 0xFC	; 252
    2d16:	41 44       	sbci	r20, 0x41	; 65
    2d18:	47 49       	sbci	r20, 0x97	; 151
    2d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    2d1c:	51 53       	subi	r21, 0x31	; 49
    2d1e:	55 58       	subi	r21, 0x85	; 133
    2d20:	5a 5c       	subi	r21, 0xCA	; 202
    2d22:	5e 60       	ori	r21, 0x0E	; 14
    2d24:	62 64       	ori	r22, 0x42	; 66
    2d26:	66 68       	ori	r22, 0x86	; 134
    2d28:	6a 6b       	ori	r22, 0xBA	; 186
    2d2a:	6d 6f       	ori	r22, 0xFD	; 253
    2d2c:	70 71       	andi	r23, 0x10	; 16
    2d2e:	73 74       	andi	r23, 0x43	; 67
    2d30:	75 76       	andi	r23, 0x65	; 101
    2d32:	78 79       	andi	r23, 0x98	; 152
    2d34:	7a 7a       	andi	r23, 0xAA	; 170
    2d36:	7b 7c       	andi	r23, 0xCB	; 203
    2d38:	7d 7d       	andi	r23, 0xDD	; 221
    2d3a:	7e 7e       	andi	r23, 0xEE	; 238
    2d3c:	7e 7f       	andi	r23, 0xFE	; 254
    2d3e:	7f 7f       	andi	r23, 0xFF	; 255
    2d40:	7f 7f       	andi	r23, 0xFF	; 255
    2d42:	7f 7f       	andi	r23, 0xFF	; 255
    2d44:	7e 7e       	andi	r23, 0xEE	; 238
    2d46:	7e 7d       	andi	r23, 0xDE	; 222
    2d48:	7d 7c       	andi	r23, 0xCD	; 205
    2d4a:	7b 7a       	andi	r23, 0xAB	; 171
    2d4c:	7a 79       	andi	r23, 0x9A	; 154
    2d4e:	78 76       	andi	r23, 0x68	; 104
    2d50:	75 74       	andi	r23, 0x45	; 69
    2d52:	73 71       	andi	r23, 0x13	; 19
    2d54:	70 6f       	ori	r23, 0xF0	; 240
    2d56:	6d 6b       	ori	r22, 0xBD	; 189
    2d58:	6a 68       	ori	r22, 0x8A	; 138
    2d5a:	66 64       	ori	r22, 0x46	; 70
    2d5c:	62 60       	ori	r22, 0x02	; 2
    2d5e:	5e 5c       	subi	r21, 0xCE	; 206
    2d60:	5a 58       	subi	r21, 0x8A	; 138
    2d62:	55 53       	subi	r21, 0x35	; 53
    2d64:	51 4e       	sbci	r21, 0xE1	; 225
    2d66:	4c 49       	sbci	r20, 0x9C	; 156
    2d68:	47 44       	sbci	r20, 0x47	; 71
    2d6a:	41 3f       	cpi	r20, 0xF1	; 241
    2d6c:	3c 39       	cpi	r19, 0x9C	; 156
    2d6e:	36 33       	cpi	r19, 0x36	; 54
    2d70:	31 2e       	mov	r3, r17
    2d72:	2b 28       	or	r2, r11
    2d74:	25 22       	and	r2, r21
    2d76:	1f 1c       	adc	r1, r15
    2d78:	19 16       	cp	r1, r25
    2d7a:	13 10       	cpse	r1, r3
    2d7c:	0c 09       	sbc	r16, r12
    2d7e:	06 03       	mulsu	r16, r22
    2d80:	00 fd       	sbrc	r16, 0
    2d82:	fa f7       	brpl	.-2      	; 0x2d82 <waves+0x82>
    2d84:	f4 f0       	brlt	.+60     	; 0x2dc2 <waves+0xc2>
    2d86:	ed ea       	ldi	r30, 0xAD	; 173
    2d88:	e7 e4       	ldi	r30, 0x47	; 71
    2d8a:	e1 de       	rcall	.-574    	; 0x2b4e <steptable+0x46>
    2d8c:	db d8       	rcall	.-3658   	; 0x1f44 <ch4_loop+0x2>
    2d8e:	d5 d2       	rcall	.+1450   	; 0x333a <waves+0x63a>
    2d90:	cf cd       	rjmp	.-1122   	; 0x2930 <TriggerCommon+0xee>
    2d92:	ca c7       	rjmp	.+3988   	; 0x3d28 <__data_load_end+0x214>
    2d94:	c4 c1       	rjmp	.+904    	; 0x311e <waves+0x41e>
    2d96:	bf bc       	out	0x2f, r11	; 47
    2d98:	b9 b7       	in	r27, 0x39	; 57
    2d9a:	b4 b2       	in	r11, 0x14	; 20
    2d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    2d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    2da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    2da4:	9e 9c       	mul	r9, r14
    2da6:	9a 98       	cbi	0x13, 2	; 19
    2da8:	96 95       	lsr	r25
    2daa:	93 91       	.word	0x9193	; ????
    2dac:	90 8f       	std	Z+24, r25	; 0x18
    2dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    2db0:	8b 8a       	std	Y+19, r8	; 0x13
    2db2:	88 87       	std	Y+8, r24	; 0x08
    2db4:	86 86       	std	Z+14, r8	; 0x0e
    2db6:	85 84       	ldd	r8, Z+13	; 0x0d
    2db8:	83 83       	std	Z+3, r24	; 0x03
    2dba:	82 82       	std	Z+2, r8	; 0x02
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	81 81       	ldd	r24, Z+1	; 0x01
    2dc0:	81 81       	ldd	r24, Z+1	; 0x01
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	82 82       	std	Z+2, r8	; 0x02
    2dc6:	82 83       	std	Z+2, r24	; 0x02
    2dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    2dca:	85 86       	std	Z+13, r8	; 0x0d
    2dcc:	86 87       	std	Z+14, r24	; 0x0e
    2dce:	88 8a       	std	Y+16, r8	; 0x10
    2dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd4:	90 91 93 95 	lds	r25, 0x9593	; 0x809593 <__bss_end+0x8e08>
    2dd8:	96 98       	cbi	0x12, 6	; 18
    2dda:	9a 9c       	mul	r9, r10
    2ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    2dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    2de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    2de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    2de4:	af b2       	in	r10, 0x1f	; 31
    2de6:	b4 b7       	in	r27, 0x34	; 52
    2de8:	b9 bc       	out	0x29, r11	; 41
    2dea:	bf c1       	rjmp	.+894    	; 0x316a <waves+0x46a>
    2dec:	c4 c7       	rjmp	.+3976   	; 0x3d76 <__data_load_end+0x262>
    2dee:	ca cd       	rjmp	.-1132   	; 0x2984 <TriggerNote+0x3a>
    2df0:	cf d2       	rcall	.+1438   	; 0x3390 <waves+0x690>
    2df2:	d5 d8       	rcall	.-3670   	; 0x1f9e <ch4_loop+0x5c>
    2df4:	db de       	rcall	.-586    	; 0x2bac <steptable+0xa4>
    2df6:	e1 e4       	ldi	r30, 0x41	; 65
    2df8:	e7 ea       	ldi	r30, 0xA7	; 167
    2dfa:	ed f0       	brhs	.+58     	; 0x2e36 <waves+0x136>
    2dfc:	f4 f7       	brge	.-4      	; 0x2dfa <waves+0xfa>
    2dfe:	fa fd       	.word	0xfdfa	; ????
    2e00:	80 81       	ld	r24, Z
    2e02:	82 83       	std	Z+2, r24	; 0x02
    2e04:	84 85       	ldd	r24, Z+12	; 0x0c
    2e06:	86 87       	std	Z+14, r24	; 0x0e
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	8a 8b       	std	Y+18, r24	; 0x12
    2e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2e10:	90 91 92 93 	lds	r25, 0x9392	; 0x809392 <__bss_end+0x8c07>
    2e14:	94 95       	.word	0x9594	; ????
    2e16:	96 97       	sbiw	r26, 0x26	; 38
    2e18:	98 99       	sbic	0x13, 0	; 19
    2e1a:	9a 9b       	sbis	0x13, 2	; 19
    2e1c:	9c 9d       	mul	r25, r12
    2e1e:	9e 9f       	mul	r25, r30
    2e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    2e22:	a2 a3       	std	Z+34, r26	; 0x22
    2e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2e26:	a6 a7       	std	Z+46, r26	; 0x2e
    2e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    2e2a:	aa ab       	std	Y+50, r26	; 0x32
    2e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    2e2e:	ae af       	std	Y+62, r26	; 0x3e
    2e30:	b0 b1       	in	r27, 0x00	; 0
    2e32:	b2 b3       	in	r27, 0x12	; 18
    2e34:	b4 b5       	in	r27, 0x24	; 36
    2e36:	b6 b7       	in	r27, 0x36	; 54
    2e38:	b8 b9       	out	0x08, r27	; 8
    2e3a:	ba bb       	out	0x1a, r27	; 26
    2e3c:	bc bd       	out	0x2c, r27	; 44
    2e3e:	be bf       	out	0x3e, r27	; 62
    2e40:	c0 c1       	rjmp	.+896    	; 0x31c2 <waves+0x4c2>
    2e42:	c2 c3       	rjmp	.+1924   	; 0x35c8 <waves+0x8c8>
    2e44:	c4 c5       	rjmp	.+2952   	; 0x39ce <sdCardCueByteAddress+0xa>
    2e46:	c6 c7       	rjmp	.+3980   	; 0x3dd4 <__data_load_end+0x2c0>
    2e48:	c8 c9       	rjmp	.-3184   	; 0x21da <ReadButtons+0x62>
    2e4a:	ca cb       	rjmp	.-2156   	; 0x25e0 <ProcessMusic+0x1dc>
    2e4c:	cc cd       	rjmp	.-1128   	; 0x29e6 <set_note_waves+0x18>
    2e4e:	ce cf       	rjmp	.-100    	; 0x2dec <waves+0xec>
    2e50:	d0 d1       	rcall	.+928    	; 0x31f2 <waves+0x4f2>
    2e52:	d2 d3       	rcall	.+1956   	; 0x35f8 <waves+0x8f8>
    2e54:	d4 d5       	rcall	.+2984   	; 0x39fe <main+0x18>
    2e56:	d6 d7       	rcall	.+4012   	; 0x3e04 <__data_load_end+0x2f0>
    2e58:	d8 d9       	rcall	.-3152   	; 0x220a <FormatEeprom+0x6>
    2e5a:	da db       	rcall	.-2124   	; 0x2610 <ProcessMusic+0x20c>
    2e5c:	dc dd       	rcall	.-1096   	; 0x2a16 <esmw+0xe>
    2e5e:	de df       	rcall	.-68     	; 0x2e1c <waves+0x11c>
    2e60:	e0 e1       	ldi	r30, 0x10	; 16
    2e62:	e2 e3       	ldi	r30, 0x32	; 50
    2e64:	e4 e5       	ldi	r30, 0x54	; 84
    2e66:	e6 e7       	ldi	r30, 0x76	; 118
    2e68:	e8 e9       	ldi	r30, 0x98	; 152
    2e6a:	ea eb       	ldi	r30, 0xBA	; 186
    2e6c:	ec ed       	ldi	r30, 0xDC	; 220
    2e6e:	ee ef       	ldi	r30, 0xFE	; 254
    2e70:	f0 f1       	brcs	.+124    	; 0x2eee <waves+0x1ee>
    2e72:	f2 f3       	brmi	.-4      	; 0x2e70 <waves+0x170>
    2e74:	f4 f5       	brge	.+124    	; 0x2ef2 <waves+0x1f2>
    2e76:	f6 f7       	brtc	.-4      	; 0x2e74 <waves+0x174>
    2e78:	f8 f9       	.word	0xf9f8	; ????
    2e7a:	fa fb       	.word	0xfbfa	; ????
    2e7c:	fc fd       	.word	0xfdfc	; ????
    2e7e:	fe ff       	.word	0xfffe	; ????
    2e80:	00 01       	movw	r0, r0
    2e82:	02 03       	mulsu	r16, r18
    2e84:	04 05       	cpc	r16, r4
    2e86:	06 07       	cpc	r16, r22
    2e88:	08 09       	sbc	r16, r8
    2e8a:	0a 0b       	sbc	r16, r26
    2e8c:	0c 0d       	add	r16, r12
    2e8e:	0e 0f       	add	r16, r30
    2e90:	10 11       	cpse	r17, r0
    2e92:	12 13       	cpse	r17, r18
    2e94:	14 15       	cp	r17, r4
    2e96:	16 17       	cp	r17, r22
    2e98:	18 19       	sub	r17, r8
    2e9a:	1a 1b       	sub	r17, r26
    2e9c:	1c 1d       	adc	r17, r12
    2e9e:	1e 1f       	adc	r17, r30
    2ea0:	20 21       	and	r18, r0
    2ea2:	22 23       	and	r18, r18
    2ea4:	24 25       	eor	r18, r4
    2ea6:	26 27       	eor	r18, r22
    2ea8:	28 29       	or	r18, r8
    2eaa:	2a 2b       	or	r18, r26
    2eac:	2c 2d       	mov	r18, r12
    2eae:	2e 2f       	mov	r18, r30
    2eb0:	30 31       	cpi	r19, 0x10	; 16
    2eb2:	32 33       	cpi	r19, 0x32	; 50
    2eb4:	34 35       	cpi	r19, 0x54	; 84
    2eb6:	36 37       	cpi	r19, 0x76	; 118
    2eb8:	38 39       	cpi	r19, 0x98	; 152
    2eba:	3a 3b       	cpi	r19, 0xBA	; 186
    2ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    2ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    2ec0:	40 41       	sbci	r20, 0x10	; 16
    2ec2:	42 43       	sbci	r20, 0x32	; 50
    2ec4:	44 45       	sbci	r20, 0x54	; 84
    2ec6:	46 47       	sbci	r20, 0x76	; 118
    2ec8:	48 49       	sbci	r20, 0x98	; 152
    2eca:	4a 4b       	sbci	r20, 0xBA	; 186
    2ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    2ece:	4e 4f       	sbci	r20, 0xFE	; 254
    2ed0:	50 51       	subi	r21, 0x10	; 16
    2ed2:	52 53       	subi	r21, 0x32	; 50
    2ed4:	54 55       	subi	r21, 0x54	; 84
    2ed6:	56 57       	subi	r21, 0x76	; 118
    2ed8:	58 59       	subi	r21, 0x98	; 152
    2eda:	5a 5b       	subi	r21, 0xBA	; 186
    2edc:	5c 5d       	subi	r21, 0xDC	; 220
    2ede:	5e 5f       	subi	r21, 0xFE	; 254
    2ee0:	60 61       	ori	r22, 0x10	; 16
    2ee2:	62 63       	ori	r22, 0x32	; 50
    2ee4:	64 65       	ori	r22, 0x54	; 84
    2ee6:	66 67       	ori	r22, 0x76	; 118
    2ee8:	68 69       	ori	r22, 0x98	; 152
    2eea:	6a 6b       	ori	r22, 0xBA	; 186
    2eec:	6c 6d       	ori	r22, 0xDC	; 220
    2eee:	6e 6f       	ori	r22, 0xFE	; 254
    2ef0:	70 71       	andi	r23, 0x10	; 16
    2ef2:	72 73       	andi	r23, 0x32	; 50
    2ef4:	74 75       	andi	r23, 0x54	; 84
    2ef6:	76 77       	andi	r23, 0x76	; 118
    2ef8:	78 79       	andi	r23, 0x98	; 152
    2efa:	7a 7b       	andi	r23, 0xBA	; 186
    2efc:	7c 7d       	andi	r23, 0xDC	; 220
    2efe:	7e 7f       	andi	r23, 0xFE	; 254
    2f00:	00 02       	muls	r16, r16
    2f02:	04 06       	cpc	r0, r20
    2f04:	08 0a       	sbc	r0, r24
    2f06:	0c 0e       	add	r0, r28
    2f08:	10 12       	cpse	r1, r16
    2f0a:	14 16       	cp	r1, r20
    2f0c:	18 1a       	sub	r1, r24
    2f0e:	1c 1e       	adc	r1, r28
    2f10:	20 22       	and	r2, r16
    2f12:	24 26       	eor	r2, r20
    2f14:	28 2a       	or	r2, r24
    2f16:	2c 2e       	mov	r2, r28
    2f18:	30 32       	cpi	r19, 0x20	; 32
    2f1a:	34 36       	cpi	r19, 0x64	; 100
    2f1c:	38 3a       	cpi	r19, 0xA8	; 168
    2f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    2f20:	40 42       	sbci	r20, 0x20	; 32
    2f22:	44 46       	sbci	r20, 0x64	; 100
    2f24:	48 4a       	sbci	r20, 0xA8	; 168
    2f26:	4c 4e       	sbci	r20, 0xEC	; 236
    2f28:	50 52       	subi	r21, 0x20	; 32
    2f2a:	54 56       	subi	r21, 0x64	; 100
    2f2c:	58 5a       	subi	r21, 0xA8	; 168
    2f2e:	5c 5e       	subi	r21, 0xEC	; 236
    2f30:	60 62       	ori	r22, 0x20	; 32
    2f32:	64 66       	ori	r22, 0x64	; 100
    2f34:	68 6a       	ori	r22, 0xA8	; 168
    2f36:	6c 6e       	ori	r22, 0xEC	; 236
    2f38:	70 72       	andi	r23, 0x20	; 32
    2f3a:	74 76       	andi	r23, 0x64	; 100
    2f3c:	78 7a       	andi	r23, 0xA8	; 168
    2f3e:	7c 7e       	andi	r23, 0xEC	; 236
    2f40:	7f 7d       	andi	r23, 0xDF	; 223
    2f42:	7b 79       	andi	r23, 0x9B	; 155
    2f44:	77 75       	andi	r23, 0x57	; 87
    2f46:	73 71       	andi	r23, 0x13	; 19
    2f48:	6f 6d       	ori	r22, 0xDF	; 223
    2f4a:	6b 69       	ori	r22, 0x9B	; 155
    2f4c:	67 65       	ori	r22, 0x57	; 87
    2f4e:	63 61       	ori	r22, 0x13	; 19
    2f50:	5f 5d       	subi	r21, 0xDF	; 223
    2f52:	5b 59       	subi	r21, 0x9B	; 155
    2f54:	57 55       	subi	r21, 0x57	; 87
    2f56:	53 51       	subi	r21, 0x13	; 19
    2f58:	4f 4d       	sbci	r20, 0xDF	; 223
    2f5a:	4b 49       	sbci	r20, 0x9B	; 155
    2f5c:	47 45       	sbci	r20, 0x57	; 87
    2f5e:	43 41       	sbci	r20, 0x13	; 19
    2f60:	3f 3d       	cpi	r19, 0xDF	; 223
    2f62:	3b 39       	cpi	r19, 0x9B	; 155
    2f64:	37 35       	cpi	r19, 0x57	; 87
    2f66:	33 31       	cpi	r19, 0x13	; 19
    2f68:	2f 2d       	mov	r18, r15
    2f6a:	2b 29       	or	r18, r11
    2f6c:	27 25       	eor	r18, r7
    2f6e:	23 21       	and	r18, r3
    2f70:	1f 1d       	adc	r17, r15
    2f72:	1b 19       	sub	r17, r11
    2f74:	17 15       	cp	r17, r7
    2f76:	13 11       	cpse	r17, r3
    2f78:	0f 0d       	add	r16, r15
    2f7a:	0b 09       	sbc	r16, r11
    2f7c:	07 05       	cpc	r16, r7
    2f7e:	03 01       	movw	r0, r6
    2f80:	ff fd       	.word	0xfdff	; ????
    2f82:	fb f9       	.word	0xf9fb	; ????
    2f84:	f7 f5       	brid	.+124    	; 0x3002 <waves+0x302>
    2f86:	f3 f1       	brvs	.+124    	; 0x3004 <waves+0x304>
    2f88:	ef ed       	ldi	r30, 0xDF	; 223
    2f8a:	eb e9       	ldi	r30, 0x9B	; 155
    2f8c:	e7 e5       	ldi	r30, 0x57	; 87
    2f8e:	e3 e1       	ldi	r30, 0x13	; 19
    2f90:	df dd       	rcall	.-1090   	; 0x2b50 <steptable+0x48>
    2f92:	db d9       	rcall	.-3146   	; 0x234a <PatchCommand11+0x60>
    2f94:	d7 d5       	rcall	.+2990   	; 0x3b44 <__data_load_end+0x30>
    2f96:	d3 d1       	rcall	.+934    	; 0x333e <waves+0x63e>
    2f98:	cf cd       	rjmp	.-1122   	; 0x2b38 <steptable+0x30>
    2f9a:	cb c9       	rjmp	.-3178   	; 0x2332 <PatchCommand11+0x48>
    2f9c:	c7 c5       	rjmp	.+2958   	; 0x3b2c <__data_load_end+0x18>
    2f9e:	c3 c1       	rjmp	.+902    	; 0x3326 <waves+0x626>
    2fa0:	bf bd       	out	0x2f, r27	; 47
    2fa2:	bb b9       	out	0x0b, r27	; 11
    2fa4:	b7 b5       	in	r27, 0x27	; 39
    2fa6:	b3 b1       	in	r27, 0x03	; 3
    2fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    2faa:	ab a9       	ldd	r26, Y+51	; 0x33
    2fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    2fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fb0:	9f 9d       	mul	r25, r15
    2fb2:	9b 99       	sbic	0x13, 3	; 19
    2fb4:	97 95       	ror	r25
    2fb6:	93 91       	.word	0x9193	; ????
    2fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    2fbe:	83 81       	ldd	r24, Z+3	; 0x03
    2fc0:	80 82       	st	Z, r8
    2fc2:	84 86       	std	Z+12, r8	; 0x0c
    2fc4:	88 8a       	std	Y+16, r8	; 0x10
    2fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    2fc8:	90 92 94 96 	sts	0x9694, r9	; 0x809694 <__bss_end+0x8f09>
    2fcc:	98 9a       	sbi	0x13, 0	; 19
    2fce:	9c 9e       	mul	r9, r28
    2fd0:	a0 a2       	std	Z+32, r10	; 0x20
    2fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    2fd4:	a8 aa       	std	Y+48, r10	; 0x30
    2fd6:	ac ae       	std	Y+60, r10	; 0x3c
    2fd8:	b0 b2       	in	r11, 0x10	; 16
    2fda:	b4 b6       	in	r11, 0x34	; 52
    2fdc:	b8 ba       	out	0x18, r11	; 24
    2fde:	bc be       	out	0x3c, r11	; 60
    2fe0:	c0 c2       	rjmp	.+1408   	; 0x3562 <waves+0x862>
    2fe2:	c4 c6       	rjmp	.+3464   	; 0x3d6c <__data_load_end+0x258>
    2fe4:	c8 ca       	rjmp	.-2672   	; 0x2576 <ProcessMusic+0x172>
    2fe6:	cc ce       	rjmp	.-616    	; 0x2d80 <waves+0x80>
    2fe8:	d0 d2       	rcall	.+1440   	; 0x358a <waves+0x88a>
    2fea:	d4 d6       	rcall	.+3496   	; 0x3d94 <__data_load_end+0x280>
    2fec:	d8 da       	rcall	.-2640   	; 0x259e <ProcessMusic+0x19a>
    2fee:	dc de       	rcall	.-584    	; 0x2da8 <waves+0xa8>
    2ff0:	e0 e2       	ldi	r30, 0x20	; 32
    2ff2:	e4 e6       	ldi	r30, 0x64	; 100
    2ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    2ff6:	ec ee       	ldi	r30, 0xEC	; 236
    2ff8:	f0 f2       	brcs	.-68     	; 0x2fb6 <waves+0x2b6>
    2ffa:	f4 f6       	brge	.-68     	; 0x2fb8 <waves+0x2b8>
    2ffc:	f8 fa       	.word	0xfaf8	; ????
    2ffe:	fc fe       	.word	0xfefc	; ????
    3000:	7f 7f       	andi	r23, 0xFF	; 255
    3002:	7f 7f       	andi	r23, 0xFF	; 255
    3004:	7f 7f       	andi	r23, 0xFF	; 255
    3006:	7f 7f       	andi	r23, 0xFF	; 255
    3008:	7f 7f       	andi	r23, 0xFF	; 255
    300a:	7f 7f       	andi	r23, 0xFF	; 255
    300c:	7f 7f       	andi	r23, 0xFF	; 255
    300e:	7f 7f       	andi	r23, 0xFF	; 255
    3010:	7f 7f       	andi	r23, 0xFF	; 255
    3012:	7f 7f       	andi	r23, 0xFF	; 255
    3014:	7f 7f       	andi	r23, 0xFF	; 255
    3016:	7f 7f       	andi	r23, 0xFF	; 255
    3018:	7f 7f       	andi	r23, 0xFF	; 255
    301a:	7f 7f       	andi	r23, 0xFF	; 255
    301c:	7f 7f       	andi	r23, 0xFF	; 255
    301e:	7f 7f       	andi	r23, 0xFF	; 255
    3020:	7f 7f       	andi	r23, 0xFF	; 255
    3022:	7f 7f       	andi	r23, 0xFF	; 255
    3024:	7f 7f       	andi	r23, 0xFF	; 255
    3026:	7f 7f       	andi	r23, 0xFF	; 255
    3028:	7f 7f       	andi	r23, 0xFF	; 255
    302a:	7f 7f       	andi	r23, 0xFF	; 255
    302c:	7f 7f       	andi	r23, 0xFF	; 255
    302e:	7f 7f       	andi	r23, 0xFF	; 255
    3030:	7f 7f       	andi	r23, 0xFF	; 255
    3032:	7f 7f       	andi	r23, 0xFF	; 255
    3034:	7f 7f       	andi	r23, 0xFF	; 255
    3036:	7f 7f       	andi	r23, 0xFF	; 255
    3038:	7f 7f       	andi	r23, 0xFF	; 255
    303a:	7f 7f       	andi	r23, 0xFF	; 255
    303c:	7f 7f       	andi	r23, 0xFF	; 255
    303e:	7f 7f       	andi	r23, 0xFF	; 255
    3040:	80 80       	ld	r8, Z
    3042:	80 80       	ld	r8, Z
    3044:	80 80       	ld	r8, Z
    3046:	80 80       	ld	r8, Z
    3048:	80 80       	ld	r8, Z
    304a:	80 80       	ld	r8, Z
    304c:	80 80       	ld	r8, Z
    304e:	80 80       	ld	r8, Z
    3050:	80 80       	ld	r8, Z
    3052:	80 80       	ld	r8, Z
    3054:	80 80       	ld	r8, Z
    3056:	80 80       	ld	r8, Z
    3058:	80 80       	ld	r8, Z
    305a:	80 80       	ld	r8, Z
    305c:	80 80       	ld	r8, Z
    305e:	80 80       	ld	r8, Z
    3060:	80 80       	ld	r8, Z
    3062:	80 80       	ld	r8, Z
    3064:	80 80       	ld	r8, Z
    3066:	80 80       	ld	r8, Z
    3068:	80 80       	ld	r8, Z
    306a:	80 80       	ld	r8, Z
    306c:	80 80       	ld	r8, Z
    306e:	80 80       	ld	r8, Z
    3070:	80 80       	ld	r8, Z
    3072:	80 80       	ld	r8, Z
    3074:	80 80       	ld	r8, Z
    3076:	80 80       	ld	r8, Z
    3078:	80 80       	ld	r8, Z
    307a:	80 80       	ld	r8, Z
    307c:	80 80       	ld	r8, Z
    307e:	80 80       	ld	r8, Z
    3080:	80 80       	ld	r8, Z
    3082:	80 80       	ld	r8, Z
    3084:	80 80       	ld	r8, Z
    3086:	80 80       	ld	r8, Z
    3088:	80 80       	ld	r8, Z
    308a:	80 80       	ld	r8, Z
    308c:	80 80       	ld	r8, Z
    308e:	80 80       	ld	r8, Z
    3090:	80 80       	ld	r8, Z
    3092:	80 80       	ld	r8, Z
    3094:	80 80       	ld	r8, Z
    3096:	80 80       	ld	r8, Z
    3098:	80 80       	ld	r8, Z
    309a:	80 80       	ld	r8, Z
    309c:	80 80       	ld	r8, Z
    309e:	80 80       	ld	r8, Z
    30a0:	80 80       	ld	r8, Z
    30a2:	80 80       	ld	r8, Z
    30a4:	80 80       	ld	r8, Z
    30a6:	80 80       	ld	r8, Z
    30a8:	80 80       	ld	r8, Z
    30aa:	80 80       	ld	r8, Z
    30ac:	80 80       	ld	r8, Z
    30ae:	80 80       	ld	r8, Z
    30b0:	80 80       	ld	r8, Z
    30b2:	80 80       	ld	r8, Z
    30b4:	80 80       	ld	r8, Z
    30b6:	80 80       	ld	r8, Z
    30b8:	80 80       	ld	r8, Z
    30ba:	80 80       	ld	r8, Z
    30bc:	80 80       	ld	r8, Z
    30be:	80 80       	ld	r8, Z
    30c0:	80 80       	ld	r8, Z
    30c2:	80 80       	ld	r8, Z
    30c4:	80 80       	ld	r8, Z
    30c6:	80 80       	ld	r8, Z
    30c8:	80 80       	ld	r8, Z
    30ca:	80 80       	ld	r8, Z
    30cc:	80 80       	ld	r8, Z
    30ce:	80 80       	ld	r8, Z
    30d0:	80 80       	ld	r8, Z
    30d2:	80 80       	ld	r8, Z
    30d4:	80 80       	ld	r8, Z
    30d6:	80 80       	ld	r8, Z
    30d8:	80 80       	ld	r8, Z
    30da:	80 80       	ld	r8, Z
    30dc:	80 80       	ld	r8, Z
    30de:	80 80       	ld	r8, Z
    30e0:	80 80       	ld	r8, Z
    30e2:	80 80       	ld	r8, Z
    30e4:	80 80       	ld	r8, Z
    30e6:	80 80       	ld	r8, Z
    30e8:	80 80       	ld	r8, Z
    30ea:	80 80       	ld	r8, Z
    30ec:	80 80       	ld	r8, Z
    30ee:	80 80       	ld	r8, Z
    30f0:	80 80       	ld	r8, Z
    30f2:	80 80       	ld	r8, Z
    30f4:	80 80       	ld	r8, Z
    30f6:	80 80       	ld	r8, Z
    30f8:	80 80       	ld	r8, Z
    30fa:	80 80       	ld	r8, Z
    30fc:	80 80       	ld	r8, Z
    30fe:	80 80       	ld	r8, Z
    3100:	7f 7f       	andi	r23, 0xFF	; 255
    3102:	7f 7f       	andi	r23, 0xFF	; 255
    3104:	7f 7f       	andi	r23, 0xFF	; 255
    3106:	7f 7f       	andi	r23, 0xFF	; 255
    3108:	7f 7f       	andi	r23, 0xFF	; 255
    310a:	7f 7f       	andi	r23, 0xFF	; 255
    310c:	7f 7f       	andi	r23, 0xFF	; 255
    310e:	7f 7f       	andi	r23, 0xFF	; 255
    3110:	7f 7f       	andi	r23, 0xFF	; 255
    3112:	7f 7f       	andi	r23, 0xFF	; 255
    3114:	7f 7f       	andi	r23, 0xFF	; 255
    3116:	7f 7f       	andi	r23, 0xFF	; 255
    3118:	7f 7f       	andi	r23, 0xFF	; 255
    311a:	7f 7f       	andi	r23, 0xFF	; 255
    311c:	7f 7f       	andi	r23, 0xFF	; 255
    311e:	7f 7f       	andi	r23, 0xFF	; 255
    3120:	7f 7f       	andi	r23, 0xFF	; 255
    3122:	7f 7f       	andi	r23, 0xFF	; 255
    3124:	7f 7f       	andi	r23, 0xFF	; 255
    3126:	7f 7f       	andi	r23, 0xFF	; 255
    3128:	7f 7f       	andi	r23, 0xFF	; 255
    312a:	7f 7f       	andi	r23, 0xFF	; 255
    312c:	7f 7f       	andi	r23, 0xFF	; 255
    312e:	7f 7f       	andi	r23, 0xFF	; 255
    3130:	7f 7f       	andi	r23, 0xFF	; 255
    3132:	7f 7f       	andi	r23, 0xFF	; 255
    3134:	7f 7f       	andi	r23, 0xFF	; 255
    3136:	7f 7f       	andi	r23, 0xFF	; 255
    3138:	7f 7f       	andi	r23, 0xFF	; 255
    313a:	7f 7f       	andi	r23, 0xFF	; 255
    313c:	7f 7f       	andi	r23, 0xFF	; 255
    313e:	7f 7f       	andi	r23, 0xFF	; 255
    3140:	7f 7f       	andi	r23, 0xFF	; 255
    3142:	7f 7f       	andi	r23, 0xFF	; 255
    3144:	7f 7f       	andi	r23, 0xFF	; 255
    3146:	7f 7f       	andi	r23, 0xFF	; 255
    3148:	7f 7f       	andi	r23, 0xFF	; 255
    314a:	7f 7f       	andi	r23, 0xFF	; 255
    314c:	7f 7f       	andi	r23, 0xFF	; 255
    314e:	7f 7f       	andi	r23, 0xFF	; 255
    3150:	7f 7f       	andi	r23, 0xFF	; 255
    3152:	7f 7f       	andi	r23, 0xFF	; 255
    3154:	7f 7f       	andi	r23, 0xFF	; 255
    3156:	7f 7f       	andi	r23, 0xFF	; 255
    3158:	7f 7f       	andi	r23, 0xFF	; 255
    315a:	7f 7f       	andi	r23, 0xFF	; 255
    315c:	7f 7f       	andi	r23, 0xFF	; 255
    315e:	7f 7f       	andi	r23, 0xFF	; 255
    3160:	7f 7f       	andi	r23, 0xFF	; 255
    3162:	7f 7f       	andi	r23, 0xFF	; 255
    3164:	7f 7f       	andi	r23, 0xFF	; 255
    3166:	7f 7f       	andi	r23, 0xFF	; 255
    3168:	7f 7f       	andi	r23, 0xFF	; 255
    316a:	7f 7f       	andi	r23, 0xFF	; 255
    316c:	7f 7f       	andi	r23, 0xFF	; 255
    316e:	7f 7f       	andi	r23, 0xFF	; 255
    3170:	7f 7f       	andi	r23, 0xFF	; 255
    3172:	7f 7f       	andi	r23, 0xFF	; 255
    3174:	7f 7f       	andi	r23, 0xFF	; 255
    3176:	7f 7f       	andi	r23, 0xFF	; 255
    3178:	7f 7f       	andi	r23, 0xFF	; 255
    317a:	7f 7f       	andi	r23, 0xFF	; 255
    317c:	7f 7f       	andi	r23, 0xFF	; 255
    317e:	7f 7f       	andi	r23, 0xFF	; 255
    3180:	80 80       	ld	r8, Z
    3182:	80 80       	ld	r8, Z
    3184:	80 80       	ld	r8, Z
    3186:	80 80       	ld	r8, Z
    3188:	80 80       	ld	r8, Z
    318a:	80 80       	ld	r8, Z
    318c:	80 80       	ld	r8, Z
    318e:	80 80       	ld	r8, Z
    3190:	80 80       	ld	r8, Z
    3192:	80 80       	ld	r8, Z
    3194:	80 80       	ld	r8, Z
    3196:	80 80       	ld	r8, Z
    3198:	80 80       	ld	r8, Z
    319a:	80 80       	ld	r8, Z
    319c:	80 80       	ld	r8, Z
    319e:	80 80       	ld	r8, Z
    31a0:	80 80       	ld	r8, Z
    31a2:	80 80       	ld	r8, Z
    31a4:	80 80       	ld	r8, Z
    31a6:	80 80       	ld	r8, Z
    31a8:	80 80       	ld	r8, Z
    31aa:	80 80       	ld	r8, Z
    31ac:	80 80       	ld	r8, Z
    31ae:	80 80       	ld	r8, Z
    31b0:	80 80       	ld	r8, Z
    31b2:	80 80       	ld	r8, Z
    31b4:	80 80       	ld	r8, Z
    31b6:	80 80       	ld	r8, Z
    31b8:	80 80       	ld	r8, Z
    31ba:	80 80       	ld	r8, Z
    31bc:	80 80       	ld	r8, Z
    31be:	80 80       	ld	r8, Z
    31c0:	80 80       	ld	r8, Z
    31c2:	80 80       	ld	r8, Z
    31c4:	80 80       	ld	r8, Z
    31c6:	80 80       	ld	r8, Z
    31c8:	80 80       	ld	r8, Z
    31ca:	80 80       	ld	r8, Z
    31cc:	80 80       	ld	r8, Z
    31ce:	80 80       	ld	r8, Z
    31d0:	80 80       	ld	r8, Z
    31d2:	80 80       	ld	r8, Z
    31d4:	80 80       	ld	r8, Z
    31d6:	80 80       	ld	r8, Z
    31d8:	80 80       	ld	r8, Z
    31da:	80 80       	ld	r8, Z
    31dc:	80 80       	ld	r8, Z
    31de:	80 80       	ld	r8, Z
    31e0:	80 80       	ld	r8, Z
    31e2:	80 80       	ld	r8, Z
    31e4:	80 80       	ld	r8, Z
    31e6:	80 80       	ld	r8, Z
    31e8:	80 80       	ld	r8, Z
    31ea:	80 80       	ld	r8, Z
    31ec:	80 80       	ld	r8, Z
    31ee:	80 80       	ld	r8, Z
    31f0:	80 80       	ld	r8, Z
    31f2:	80 80       	ld	r8, Z
    31f4:	80 80       	ld	r8, Z
    31f6:	80 80       	ld	r8, Z
    31f8:	80 80       	ld	r8, Z
    31fa:	80 80       	ld	r8, Z
    31fc:	80 80       	ld	r8, Z
    31fe:	80 80       	ld	r8, Z
    3200:	7f 7f       	andi	r23, 0xFF	; 255
    3202:	7f 7f       	andi	r23, 0xFF	; 255
    3204:	7f 7f       	andi	r23, 0xFF	; 255
    3206:	7f 7f       	andi	r23, 0xFF	; 255
    3208:	7f 7f       	andi	r23, 0xFF	; 255
    320a:	7f 7f       	andi	r23, 0xFF	; 255
    320c:	7f 7f       	andi	r23, 0xFF	; 255
    320e:	7f 7f       	andi	r23, 0xFF	; 255
    3210:	7f 7f       	andi	r23, 0xFF	; 255
    3212:	7f 7f       	andi	r23, 0xFF	; 255
    3214:	7f 7f       	andi	r23, 0xFF	; 255
    3216:	7f 7f       	andi	r23, 0xFF	; 255
    3218:	7f 7f       	andi	r23, 0xFF	; 255
    321a:	7f 7f       	andi	r23, 0xFF	; 255
    321c:	7f 7f       	andi	r23, 0xFF	; 255
    321e:	7f 7f       	andi	r23, 0xFF	; 255
    3220:	7f 7f       	andi	r23, 0xFF	; 255
    3222:	7f 7f       	andi	r23, 0xFF	; 255
    3224:	7f 7f       	andi	r23, 0xFF	; 255
    3226:	7f 7f       	andi	r23, 0xFF	; 255
    3228:	7f 7f       	andi	r23, 0xFF	; 255
    322a:	7f 7f       	andi	r23, 0xFF	; 255
    322c:	7f 7f       	andi	r23, 0xFF	; 255
    322e:	7f 7f       	andi	r23, 0xFF	; 255
    3230:	7f 7f       	andi	r23, 0xFF	; 255
    3232:	7f 7f       	andi	r23, 0xFF	; 255
    3234:	7f 7f       	andi	r23, 0xFF	; 255
    3236:	7f 7f       	andi	r23, 0xFF	; 255
    3238:	7f 7f       	andi	r23, 0xFF	; 255
    323a:	7f 7f       	andi	r23, 0xFF	; 255
    323c:	7f 7f       	andi	r23, 0xFF	; 255
    323e:	7f 7f       	andi	r23, 0xFF	; 255
    3240:	7f 7f       	andi	r23, 0xFF	; 255
    3242:	7f 7f       	andi	r23, 0xFF	; 255
    3244:	7f 7f       	andi	r23, 0xFF	; 255
    3246:	7f 7f       	andi	r23, 0xFF	; 255
    3248:	7f 7f       	andi	r23, 0xFF	; 255
    324a:	7f 7f       	andi	r23, 0xFF	; 255
    324c:	7f 7f       	andi	r23, 0xFF	; 255
    324e:	7f 7f       	andi	r23, 0xFF	; 255
    3250:	7f 7f       	andi	r23, 0xFF	; 255
    3252:	7f 7f       	andi	r23, 0xFF	; 255
    3254:	7f 7f       	andi	r23, 0xFF	; 255
    3256:	7f 7f       	andi	r23, 0xFF	; 255
    3258:	7f 7f       	andi	r23, 0xFF	; 255
    325a:	7f 7f       	andi	r23, 0xFF	; 255
    325c:	7f 7f       	andi	r23, 0xFF	; 255
    325e:	7f 7f       	andi	r23, 0xFF	; 255
    3260:	7f 7f       	andi	r23, 0xFF	; 255
    3262:	7f 7f       	andi	r23, 0xFF	; 255
    3264:	7f 7f       	andi	r23, 0xFF	; 255
    3266:	7f 7f       	andi	r23, 0xFF	; 255
    3268:	7f 7f       	andi	r23, 0xFF	; 255
    326a:	7f 7f       	andi	r23, 0xFF	; 255
    326c:	7f 7f       	andi	r23, 0xFF	; 255
    326e:	7f 7f       	andi	r23, 0xFF	; 255
    3270:	7f 7f       	andi	r23, 0xFF	; 255
    3272:	7f 7f       	andi	r23, 0xFF	; 255
    3274:	7f 7f       	andi	r23, 0xFF	; 255
    3276:	7f 7f       	andi	r23, 0xFF	; 255
    3278:	7f 7f       	andi	r23, 0xFF	; 255
    327a:	7f 7f       	andi	r23, 0xFF	; 255
    327c:	7f 7f       	andi	r23, 0xFF	; 255
    327e:	7f 7f       	andi	r23, 0xFF	; 255
    3280:	7f 7f       	andi	r23, 0xFF	; 255
    3282:	7f 7f       	andi	r23, 0xFF	; 255
    3284:	7f 7f       	andi	r23, 0xFF	; 255
    3286:	7f 7f       	andi	r23, 0xFF	; 255
    3288:	7f 7f       	andi	r23, 0xFF	; 255
    328a:	7f 7f       	andi	r23, 0xFF	; 255
    328c:	7f 7f       	andi	r23, 0xFF	; 255
    328e:	7f 7f       	andi	r23, 0xFF	; 255
    3290:	7f 7f       	andi	r23, 0xFF	; 255
    3292:	7f 7f       	andi	r23, 0xFF	; 255
    3294:	7f 7f       	andi	r23, 0xFF	; 255
    3296:	7f 7f       	andi	r23, 0xFF	; 255
    3298:	7f 7f       	andi	r23, 0xFF	; 255
    329a:	7f 7f       	andi	r23, 0xFF	; 255
    329c:	7f 7f       	andi	r23, 0xFF	; 255
    329e:	7f 7f       	andi	r23, 0xFF	; 255
    32a0:	7f 7f       	andi	r23, 0xFF	; 255
    32a2:	7f 7f       	andi	r23, 0xFF	; 255
    32a4:	7f 7f       	andi	r23, 0xFF	; 255
    32a6:	7f 7f       	andi	r23, 0xFF	; 255
    32a8:	7f 7f       	andi	r23, 0xFF	; 255
    32aa:	7f 7f       	andi	r23, 0xFF	; 255
    32ac:	7f 7f       	andi	r23, 0xFF	; 255
    32ae:	7f 7f       	andi	r23, 0xFF	; 255
    32b0:	7f 7f       	andi	r23, 0xFF	; 255
    32b2:	7f 7f       	andi	r23, 0xFF	; 255
    32b4:	7f 7f       	andi	r23, 0xFF	; 255
    32b6:	7f 7f       	andi	r23, 0xFF	; 255
    32b8:	7f 7f       	andi	r23, 0xFF	; 255
    32ba:	7f 7f       	andi	r23, 0xFF	; 255
    32bc:	7f 7f       	andi	r23, 0xFF	; 255
    32be:	7f 7f       	andi	r23, 0xFF	; 255
    32c0:	80 80       	ld	r8, Z
    32c2:	80 80       	ld	r8, Z
    32c4:	80 80       	ld	r8, Z
    32c6:	80 80       	ld	r8, Z
    32c8:	80 80       	ld	r8, Z
    32ca:	80 80       	ld	r8, Z
    32cc:	80 80       	ld	r8, Z
    32ce:	80 80       	ld	r8, Z
    32d0:	80 80       	ld	r8, Z
    32d2:	80 80       	ld	r8, Z
    32d4:	80 80       	ld	r8, Z
    32d6:	80 80       	ld	r8, Z
    32d8:	80 80       	ld	r8, Z
    32da:	80 80       	ld	r8, Z
    32dc:	80 80       	ld	r8, Z
    32de:	80 80       	ld	r8, Z
    32e0:	80 80       	ld	r8, Z
    32e2:	80 80       	ld	r8, Z
    32e4:	80 80       	ld	r8, Z
    32e6:	80 80       	ld	r8, Z
    32e8:	80 80       	ld	r8, Z
    32ea:	80 80       	ld	r8, Z
    32ec:	80 80       	ld	r8, Z
    32ee:	80 80       	ld	r8, Z
    32f0:	80 80       	ld	r8, Z
    32f2:	80 80       	ld	r8, Z
    32f4:	80 80       	ld	r8, Z
    32f6:	80 80       	ld	r8, Z
    32f8:	80 80       	ld	r8, Z
    32fa:	80 80       	ld	r8, Z
    32fc:	80 80       	ld	r8, Z
    32fe:	80 80       	ld	r8, Z
    3300:	03 09       	sbc	r16, r3
    3302:	13 1e       	adc	r1, r19
    3304:	28 31       	cpi	r18, 0x18	; 24
    3306:	3a 40       	sbci	r19, 0x0A	; 10
    3308:	46 4c       	sbci	r20, 0xC6	; 198
    330a:	50 54       	subi	r21, 0x40	; 64
    330c:	58 5b       	subi	r21, 0xB8	; 184
    330e:	5e 61       	ori	r21, 0x1E	; 30
    3310:	63 65       	ori	r22, 0x53	; 83
    3312:	67 69       	ori	r22, 0x97	; 151
    3314:	6b 6c       	ori	r22, 0xCB	; 203
    3316:	6e 6f       	ori	r22, 0xFE	; 254
    3318:	70 71       	andi	r23, 0x10	; 16
    331a:	72 73       	andi	r23, 0x32	; 50
    331c:	74 75       	andi	r23, 0x54	; 84
    331e:	76 77       	andi	r23, 0x76	; 118
    3320:	77 78       	andi	r23, 0x87	; 135
    3322:	79 79       	andi	r23, 0x99	; 153
    3324:	7a 7a       	andi	r23, 0xAA	; 170
    3326:	7b 7b       	andi	r23, 0xBB	; 187
    3328:	7c 7c       	andi	r23, 0xCC	; 204
    332a:	7c 7d       	andi	r23, 0xDC	; 220
    332c:	7d 7d       	andi	r23, 0xDD	; 221
    332e:	7e 7e       	andi	r23, 0xEE	; 238
    3330:	7e 7e       	andi	r23, 0xEE	; 238
    3332:	7f 7f       	andi	r23, 0xFF	; 255
    3334:	7f 7f       	andi	r23, 0xFF	; 255
    3336:	7f 7f       	andi	r23, 0xFF	; 255
    3338:	7f 7f       	andi	r23, 0xFF	; 255
    333a:	7f 7f       	andi	r23, 0xFF	; 255
    333c:	7f 7f       	andi	r23, 0xFF	; 255
    333e:	7f 7f       	andi	r23, 0xFF	; 255
    3340:	7f 7f       	andi	r23, 0xFF	; 255
    3342:	7f 7f       	andi	r23, 0xFF	; 255
    3344:	7f 7f       	andi	r23, 0xFF	; 255
    3346:	7f 7f       	andi	r23, 0xFF	; 255
    3348:	7f 7f       	andi	r23, 0xFF	; 255
    334a:	7f 7f       	andi	r23, 0xFF	; 255
    334c:	7f 7e       	andi	r23, 0xEF	; 239
    334e:	7e 7e       	andi	r23, 0xEE	; 238
    3350:	7e 7d       	andi	r23, 0xDE	; 222
    3352:	7d 7d       	andi	r23, 0xDD	; 221
    3354:	7c 7c       	andi	r23, 0xCC	; 204
    3356:	7c 7b       	andi	r23, 0xBC	; 188
    3358:	7b 7a       	andi	r23, 0xAB	; 171
    335a:	7a 79       	andi	r23, 0x9A	; 154
    335c:	79 78       	andi	r23, 0x89	; 137
    335e:	77 77       	andi	r23, 0x77	; 119
    3360:	76 75       	andi	r23, 0x56	; 86
    3362:	74 73       	andi	r23, 0x34	; 52
    3364:	72 71       	andi	r23, 0x12	; 18
    3366:	70 6f       	ori	r23, 0xF0	; 240
    3368:	6e 6c       	ori	r22, 0xCE	; 206
    336a:	6b 69       	ori	r22, 0x9B	; 155
    336c:	67 65       	ori	r22, 0x57	; 87
    336e:	63 61       	ori	r22, 0x13	; 19
    3370:	5e 5b       	subi	r21, 0xBE	; 190
    3372:	58 54       	subi	r21, 0x48	; 72
    3374:	50 4c       	sbci	r21, 0xC0	; 192
    3376:	46 40       	sbci	r20, 0x06	; 6
    3378:	3a 31       	cpi	r19, 0x1A	; 26
    337a:	28 1e       	adc	r2, r24
    337c:	13 09       	sbc	r17, r3
    337e:	03 00       	.word	0x0003	; ????
    3380:	c6 cc       	rjmp	.-1652   	; 0x2d0e <waves+0xe>
    3382:	d5 db       	rcall	.-2134   	; 0x2b2e <steptable+0x26>
    3384:	df e3       	ldi	r29, 0x3F	; 63
    3386:	e5 e7       	ldi	r30, 0x75	; 117
    3388:	e9 ea       	ldi	r30, 0xA9	; 169
    338a:	eb ec       	ldi	r30, 0xCB	; 203
    338c:	ed ee       	ldi	r30, 0xED	; 237
    338e:	ef ef       	ldi	r30, 0xFF	; 255
    3390:	f0 f0       	brcs	.+60     	; 0x33ce <waves+0x6ce>
    3392:	f0 f1       	brcs	.+124    	; 0x3410 <waves+0x710>
    3394:	f1 f1       	breq	.+124    	; 0x3412 <waves+0x712>
    3396:	f1 f2       	breq	.-68     	; 0x3354 <waves+0x654>
    3398:	f2 f2       	brmi	.-68     	; 0x3356 <waves+0x656>
    339a:	f2 f2       	brmi	.-68     	; 0x3358 <waves+0x658>
    339c:	f2 f2       	brmi	.-68     	; 0x335a <waves+0x65a>
    339e:	f2 f3       	brmi	.-4      	; 0x339c <waves+0x69c>
    33a0:	f3 f3       	brvs	.-4      	; 0x339e <waves+0x69e>
    33a2:	f3 f3       	brvs	.-4      	; 0x33a0 <waves+0x6a0>
    33a4:	f3 f3       	brvs	.-4      	; 0x33a2 <waves+0x6a2>
    33a6:	f3 f3       	brvs	.-4      	; 0x33a4 <waves+0x6a4>
    33a8:	f3 f3       	brvs	.-4      	; 0x33a6 <waves+0x6a6>
    33aa:	f3 f3       	brvs	.-4      	; 0x33a8 <waves+0x6a8>
    33ac:	f3 f3       	brvs	.-4      	; 0x33aa <waves+0x6aa>
    33ae:	f3 f3       	brvs	.-4      	; 0x33ac <waves+0x6ac>
    33b0:	f3 f3       	brvs	.-4      	; 0x33ae <waves+0x6ae>
    33b2:	f3 f3       	brvs	.-4      	; 0x33b0 <waves+0x6b0>
    33b4:	f3 f3       	brvs	.-4      	; 0x33b2 <waves+0x6b2>
    33b6:	f3 f3       	brvs	.-4      	; 0x33b4 <waves+0x6b4>
    33b8:	f3 f3       	brvs	.-4      	; 0x33b6 <waves+0x6b6>
    33ba:	f3 f3       	brvs	.-4      	; 0x33b8 <waves+0x6b8>
    33bc:	f3 f3       	brvs	.-4      	; 0x33ba <waves+0x6ba>
    33be:	f3 f3       	brvs	.-4      	; 0x33bc <waves+0x6bc>
    33c0:	f3 f3       	brvs	.-4      	; 0x33be <waves+0x6be>
    33c2:	f3 f3       	brvs	.-4      	; 0x33c0 <waves+0x6c0>
    33c4:	f3 f3       	brvs	.-4      	; 0x33c2 <waves+0x6c2>
    33c6:	f3 f3       	brvs	.-4      	; 0x33c4 <waves+0x6c4>
    33c8:	f3 f3       	brvs	.-4      	; 0x33c6 <waves+0x6c6>
    33ca:	f3 f3       	brvs	.-4      	; 0x33c8 <waves+0x6c8>
    33cc:	f3 f3       	brvs	.-4      	; 0x33ca <waves+0x6ca>
    33ce:	f3 f3       	brvs	.-4      	; 0x33cc <waves+0x6cc>
    33d0:	f3 f3       	brvs	.-4      	; 0x33ce <waves+0x6ce>
    33d2:	f3 f3       	brvs	.-4      	; 0x33d0 <waves+0x6d0>
    33d4:	f3 f3       	brvs	.-4      	; 0x33d2 <waves+0x6d2>
    33d6:	f3 f3       	brvs	.-4      	; 0x33d4 <waves+0x6d4>
    33d8:	f3 f3       	brvs	.-4      	; 0x33d6 <waves+0x6d6>
    33da:	f3 f3       	brvs	.-4      	; 0x33d8 <waves+0x6d8>
    33dc:	f3 f3       	brvs	.-4      	; 0x33da <waves+0x6da>
    33de:	f3 f3       	brvs	.-4      	; 0x33dc <waves+0x6dc>
    33e0:	f2 f2       	brmi	.-68     	; 0x339e <waves+0x69e>
    33e2:	f2 f2       	brmi	.-68     	; 0x33a0 <waves+0x6a0>
    33e4:	f2 f2       	brmi	.-68     	; 0x33a2 <waves+0x6a2>
    33e6:	f2 f2       	brmi	.-68     	; 0x33a4 <waves+0x6a4>
    33e8:	f1 f1       	breq	.+124    	; 0x3466 <waves+0x766>
    33ea:	f1 f1       	breq	.+124    	; 0x3468 <waves+0x768>
    33ec:	f0 f0       	brcs	.+60     	; 0x342a <waves+0x72a>
    33ee:	f0 ef       	ldi	r31, 0xF0	; 240
    33f0:	ef ee       	ldi	r30, 0xEF	; 239
    33f2:	ed ec       	ldi	r30, 0xCD	; 205
    33f4:	eb ea       	ldi	r30, 0xAB	; 171
    33f6:	e9 e7       	ldi	r30, 0x79	; 121
    33f8:	e5 e3       	ldi	r30, 0x35	; 53
    33fa:	df db       	rcall	.-2114   	; 0x2bba <steptable+0xb2>
    33fc:	d5 cc       	rjmp	.-1622   	; 0x2da8 <waves+0xa8>
    33fe:	c6 00       	.word	0x00c6	; ????
    3400:	00 28       	or	r0, r0
    3402:	3d 42       	sbci	r19, 0x2D	; 45
    3404:	30 2d       	mov	r19, r0
    3406:	2c 2b       	or	r18, r28
    3408:	2c 2d       	mov	r18, r12
    340a:	2e 2f       	mov	r18, r30
    340c:	30 32       	cpi	r19, 0x20	; 32
    340e:	33 35       	cpi	r19, 0x53	; 83
    3410:	37 39       	cpi	r19, 0x97	; 151
    3412:	3b 3d       	cpi	r19, 0xDB	; 219
    3414:	3f 41       	sbci	r19, 0x1F	; 31
    3416:	43 45       	sbci	r20, 0x53	; 83
    3418:	48 4a       	sbci	r20, 0xA8	; 168
    341a:	4c 4e       	sbci	r20, 0xEC	; 236
    341c:	50 53       	subi	r21, 0x30	; 48
    341e:	55 57       	subi	r21, 0x75	; 117
    3420:	59 5b       	subi	r21, 0xB9	; 185
    3422:	5d 5f       	subi	r21, 0xFD	; 253
    3424:	61 63       	ori	r22, 0x31	; 49
    3426:	65 67       	ori	r22, 0x75	; 117
    3428:	69 6b       	ori	r22, 0xB9	; 185
    342a:	6c 6e       	ori	r22, 0xEC	; 236
    342c:	70 71       	andi	r23, 0x10	; 16
    342e:	73 74       	andi	r23, 0x43	; 67
    3430:	75 77       	andi	r23, 0x75	; 117
    3432:	78 79       	andi	r23, 0x98	; 152
    3434:	7a 7b       	andi	r23, 0xBA	; 186
    3436:	7c 7d       	andi	r23, 0xDC	; 220
    3438:	7d 7e       	andi	r23, 0xED	; 237
    343a:	7e 7f       	andi	r23, 0xFE	; 254
    343c:	7f 7f       	andi	r23, 0xFF	; 255
    343e:	7f 7f       	andi	r23, 0xFF	; 255
    3440:	7f 7f       	andi	r23, 0xFF	; 255
    3442:	7f 7f       	andi	r23, 0xFF	; 255
    3444:	7f 7f       	andi	r23, 0xFF	; 255
    3446:	7e 7e       	andi	r23, 0xEE	; 238
    3448:	7d 7d       	andi	r23, 0xDD	; 221
    344a:	7c 7b       	andi	r23, 0xBC	; 188
    344c:	7a 79       	andi	r23, 0x9A	; 154
    344e:	78 77       	andi	r23, 0x78	; 120
    3450:	75 74       	andi	r23, 0x45	; 69
    3452:	73 71       	andi	r23, 0x13	; 19
    3454:	70 6e       	ori	r23, 0xE0	; 224
    3456:	6c 6b       	ori	r22, 0xBC	; 188
    3458:	69 67       	ori	r22, 0x79	; 121
    345a:	65 63       	ori	r22, 0x35	; 53
    345c:	61 5f       	subi	r22, 0xF1	; 241
    345e:	5d 5b       	subi	r21, 0xBD	; 189
    3460:	59 57       	subi	r21, 0x79	; 121
    3462:	55 53       	subi	r21, 0x35	; 53
    3464:	50 4e       	sbci	r21, 0xE0	; 224
    3466:	4c 4a       	sbci	r20, 0xAC	; 172
    3468:	48 45       	sbci	r20, 0x58	; 88
    346a:	43 41       	sbci	r20, 0x13	; 19
    346c:	3f 3d       	cpi	r19, 0xDF	; 223
    346e:	3b 39       	cpi	r19, 0x9B	; 155
    3470:	37 35       	cpi	r19, 0x57	; 87
    3472:	33 32       	cpi	r19, 0x23	; 35
    3474:	30 2f       	mov	r19, r16
    3476:	2e 2d       	mov	r18, r14
    3478:	2c 2b       	or	r18, r28
    347a:	2c 2d       	mov	r18, r12
    347c:	30 42       	sbci	r19, 0x20	; 32
    347e:	3d 28       	or	r3, r13
    3480:	00 e9       	ldi	r16, 0x90	; 144
    3482:	e5 fe       	sbrs	r14, 5
    3484:	d4 d7       	rcall	.+4008   	; 0x442e <__data_load_end+0x91a>
    3486:	d7 d7       	rcall	.+4014   	; 0x4436 <__data_load_end+0x922>
    3488:	d6 d4       	rcall	.+2476   	; 0x3e36 <__data_load_end+0x322>
    348a:	d2 d0       	rcall	.+420    	; 0x3630 <waves+0x930>
    348c:	ce cc       	rjmp	.-1636   	; 0x2e2a <waves+0x12a>
    348e:	ca c8       	rjmp	.-3692   	; 0x2624 <ProcessMusic+0x220>
    3490:	c6 c3       	rjmp	.+1932   	; 0x3c1e <__data_load_end+0x10a>
    3492:	c1 bf       	out	0x31, r28	; 49
    3494:	bd ba       	out	0x1d, r11	; 29
    3496:	b8 b6       	in	r11, 0x38	; 56
    3498:	b4 b1       	in	r27, 0x04	; 4
    349a:	af ad       	ldd	r26, Y+63	; 0x3f
    349c:	ab a9       	ldd	r26, Y+51	; 0x33
    349e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    34a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    34a2:	9f 9e       	mul	r9, r31
    34a4:	9c 9a       	sbi	0x13, 4	; 19
    34a6:	99 97       	sbiw	r26, 0x29	; 41
    34a8:	95 94       	asr	r9
    34aa:	93 91       	.word	0x9193	; ????
    34ac:	90 8f       	std	Z+24, r25	; 0x18
    34ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    34b0:	8b 8a       	std	Y+19, r8	; 0x13
    34b2:	89 88       	ldd	r8, Y+17	; 0x11
    34b4:	88 87       	std	Y+8, r24	; 0x08
    34b6:	86 85       	ldd	r24, Z+14	; 0x0e
    34b8:	85 84       	ldd	r8, Z+13	; 0x0d
    34ba:	84 84       	ldd	r8, Z+12	; 0x0c
    34bc:	83 83       	std	Z+3, r24	; 0x03
    34be:	83 83       	std	Z+3, r24	; 0x03
    34c0:	83 83       	std	Z+3, r24	; 0x03
    34c2:	83 83       	std	Z+3, r24	; 0x03
    34c4:	83 84       	ldd	r8, Z+11	; 0x0b
    34c6:	84 84       	ldd	r8, Z+12	; 0x0c
    34c8:	85 85       	ldd	r24, Z+13	; 0x0d
    34ca:	86 87       	std	Z+14, r24	; 0x0e
    34cc:	88 88       	ldd	r8, Y+16	; 0x10
    34ce:	89 8a       	std	Y+17, r8	; 0x11
    34d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
    34d4:	90 91 93 94 	lds	r25, 0x9493	; 0x809493 <__bss_end+0x8d08>
    34d8:	95 97       	sbiw	r26, 0x25	; 37
    34da:	99 9a       	sbi	0x13, 1	; 19
    34dc:	9c 9e       	mul	r9, r28
    34de:	9f a1       	ldd	r25, Y+39	; 0x27
    34e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    34e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    34e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    34e6:	af b1       	in	r26, 0x0f	; 15
    34e8:	b4 b6       	in	r11, 0x34	; 52
    34ea:	b8 ba       	out	0x18, r11	; 24
    34ec:	bd bf       	out	0x3d, r27	; 61
    34ee:	c1 c3       	rjmp	.+1922   	; 0x3c72 <__data_load_end+0x15e>
    34f0:	c6 c8       	rjmp	.-3700   	; 0x267e <ProcessMusic+0x27a>
    34f2:	ca cc       	rjmp	.-1644   	; 0x2e88 <waves+0x188>
    34f4:	ce d0       	rcall	.+412    	; 0x3692 <waves+0x992>
    34f6:	d2 d4       	rcall	.+2468   	; 0x3e9c <__data_load_end+0x388>
    34f8:	d6 d7       	rcall	.+4012   	; 0x44a6 <__data_load_end+0x992>
    34fa:	d7 d7       	rcall	.+4014   	; 0x44aa <__data_load_end+0x996>
    34fc:	d4 fe       	sbrs	r13, 4
    34fe:	e5 e9       	ldi	r30, 0x95	; 149
    3500:	f9 f8       	.word	0xf8f9	; ????
    3502:	f9 f5       	brne	.+126    	; 0x3582 <waves+0x882>
    3504:	eb e1       	ldi	r30, 0x1B	; 27
    3506:	dd de       	rcall	.-582    	; 0x32c2 <waves+0x5c2>
    3508:	e0 e2       	ldi	r30, 0x20	; 32
    350a:	e4 e5       	ldi	r30, 0x54	; 84
    350c:	e6 e5       	ldi	r30, 0x56	; 86
    350e:	e4 e2       	ldi	r30, 0x24	; 36
    3510:	de d9       	rcall	.-3140   	; 0x28ce <TriggerCommon+0x8c>
    3512:	d2 ca       	rjmp	.-2652   	; 0x2ab8 <esmw+0xb0>
    3514:	c1 b7       	in	r28, 0x31	; 49
    3516:	ac a2       	std	Y+36, r10	; 0x24
    3518:	99 91       	ld	r25, Y+
    351a:	8a 86       	std	Y+10, r8	; 0x0a
    351c:	83 81       	ldd	r24, Z+3	; 0x03
    351e:	80 80       	ld	r8, Z
    3520:	81 82       	std	Z+1, r8	; 0x01
    3522:	83 85       	ldd	r24, Z+11	; 0x0b
    3524:	86 88       	ldd	r8, Z+22	; 0x16
    3526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    3528:	8d 8f       	std	Y+29, r24	; 0x1d
    352a:	90 92 93 95 	sts	0x9593, r9	; 0x809593 <__bss_end+0x8e08>
    352e:	96 97       	sbiw	r26, 0x26	; 38
    3530:	98 99       	sbic	0x13, 0	; 19
    3532:	9a 9b       	sbis	0x13, 2	; 19
    3534:	9b 9c       	mul	r9, r11
    3536:	9d 9d       	mul	r25, r13
    3538:	9d 9e       	mul	r9, r29
    353a:	9e 9e       	mul	r9, r30
    353c:	9f 9f       	mul	r25, r31
    353e:	9f 9f       	mul	r25, r31
    3540:	9f 9f       	mul	r25, r31
    3542:	9f 9e       	mul	r9, r31
    3544:	9e 9e       	mul	r9, r30
    3546:	9d 9d       	mul	r25, r13
    3548:	9d 9c       	mul	r9, r13
    354a:	9b 9b       	sbis	0x13, 3	; 19
    354c:	9a 99       	sbic	0x13, 2	; 19
    354e:	98 97       	sbiw	r26, 0x28	; 40
    3550:	96 95       	lsr	r25
    3552:	93 92       	.word	0x9293	; ????
    3554:	90 8f       	std	Z+24, r25	; 0x18
    3556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    3558:	8a 88       	ldd	r8, Y+18	; 0x12
    355a:	86 85       	ldd	r24, Z+14	; 0x0e
    355c:	83 82       	std	Z+3, r8	; 0x03
    355e:	81 80       	ldd	r8, Z+1	; 0x01
    3560:	80 81       	ld	r24, Z
    3562:	83 86       	std	Z+11, r8	; 0x0b
    3564:	8a 91       	ld	r24, -Y
    3566:	99 a2       	std	Y+33, r9	; 0x21
    3568:	ac b7       	in	r26, 0x3c	; 60
    356a:	c1 ca       	rjmp	.-2686   	; 0x2aee <esmw+0xe6>
    356c:	d2 d9       	rcall	.-3164   	; 0x2912 <TriggerCommon+0xd0>
    356e:	de e2       	ldi	r29, 0x2E	; 46
    3570:	e4 e5       	ldi	r30, 0x54	; 84
    3572:	e6 e5       	ldi	r30, 0x56	; 86
    3574:	e4 e2       	ldi	r30, 0x24	; 36
    3576:	e0 de       	rcall	.-576    	; 0x3338 <waves+0x638>
    3578:	dd e1       	ldi	r29, 0x1D	; 29
    357a:	eb f5       	brvc	.+122    	; 0x35f6 <waves+0x8f6>
    357c:	f9 f8       	.word	0xf8f9	; ????
    357e:	f9 00       	.word	0x00f9	; ????
    3580:	07 08       	sbc	r0, r7
    3582:	07 0b       	sbc	r16, r23
    3584:	15 1f       	adc	r17, r21
    3586:	23 22       	and	r2, r19
    3588:	20 1e       	adc	r2, r16
    358a:	1c 1b       	sub	r17, r28
    358c:	1a 1b       	sub	r17, r26
    358e:	1c 1e       	adc	r1, r28
    3590:	22 27       	eor	r18, r18
    3592:	2e 36       	cpi	r18, 0x6E	; 110
    3594:	3f 49       	sbci	r19, 0x9F	; 159
    3596:	54 5e       	subi	r21, 0xE4	; 228
    3598:	67 6f       	ori	r22, 0xF7	; 247
    359a:	76 7a       	andi	r23, 0xA6	; 166
    359c:	7e 7f       	andi	r23, 0xFE	; 254
    359e:	7f 7f       	andi	r23, 0xFF	; 255
    35a0:	7f 7e       	andi	r23, 0xEF	; 239
    35a2:	7d 7b       	andi	r23, 0xBD	; 189
    35a4:	7a 78       	andi	r23, 0x8A	; 138
    35a6:	76 74       	andi	r23, 0x46	; 70
    35a8:	73 71       	andi	r23, 0x13	; 19
    35aa:	70 6e       	ori	r23, 0xE0	; 224
    35ac:	6d 6b       	ori	r22, 0xBD	; 189
    35ae:	6a 69       	ori	r22, 0x9A	; 154
    35b0:	68 67       	ori	r22, 0x78	; 120
    35b2:	66 65       	ori	r22, 0x56	; 86
    35b4:	65 64       	ori	r22, 0x45	; 69
    35b6:	64 63       	ori	r22, 0x34	; 52
    35b8:	63 62       	ori	r22, 0x23	; 35
    35ba:	62 62       	ori	r22, 0x22	; 34
    35bc:	61 61       	ori	r22, 0x11	; 17
    35be:	61 61       	ori	r22, 0x11	; 17
    35c0:	61 61       	ori	r22, 0x11	; 17
    35c2:	61 62       	ori	r22, 0x21	; 33
    35c4:	62 62       	ori	r22, 0x22	; 34
    35c6:	63 63       	ori	r22, 0x33	; 51
    35c8:	63 64       	ori	r22, 0x43	; 67
    35ca:	65 65       	ori	r22, 0x55	; 85
    35cc:	66 67       	ori	r22, 0x76	; 118
    35ce:	68 69       	ori	r22, 0x98	; 152
    35d0:	6a 6b       	ori	r22, 0xBA	; 186
    35d2:	6d 6e       	ori	r22, 0xED	; 237
    35d4:	70 71       	andi	r23, 0x10	; 16
    35d6:	73 74       	andi	r23, 0x43	; 67
    35d8:	76 78       	andi	r23, 0x86	; 134
    35da:	7a 7b       	andi	r23, 0xBA	; 186
    35dc:	7d 7e       	andi	r23, 0xED	; 237
    35de:	7f 7f       	andi	r23, 0xFF	; 255
    35e0:	7f 7f       	andi	r23, 0xFF	; 255
    35e2:	7e 7a       	andi	r23, 0xAE	; 174
    35e4:	76 6f       	ori	r23, 0xF6	; 246
    35e6:	67 5e       	subi	r22, 0xE7	; 231
    35e8:	54 49       	sbci	r21, 0x94	; 148
    35ea:	3f 36       	cpi	r19, 0x6F	; 111
    35ec:	2e 27       	eor	r18, r30
    35ee:	22 1e       	adc	r2, r18
    35f0:	1c 1b       	sub	r17, r28
    35f2:	1a 1b       	sub	r17, r26
    35f4:	1c 1e       	adc	r1, r28
    35f6:	20 22       	and	r2, r16
    35f8:	23 1f       	adc	r18, r19
    35fa:	15 0b       	sbc	r17, r21
    35fc:	07 08       	sbc	r0, r7
    35fe:	07 00       	.word	0x0007	; ????
    3600:	1f 31       	cpi	r17, 0x1F	; 31
    3602:	3d 44       	sbci	r19, 0x4D	; 77
    3604:	4e 53       	subi	r20, 0x3E	; 62
    3606:	54 56       	subi	r21, 0x64	; 100
    3608:	5a 5f       	subi	r21, 0xFA	; 250
    360a:	64 69       	ori	r22, 0x94	; 148
    360c:	6e 74       	andi	r22, 0x4E	; 78
    360e:	76 79       	andi	r23, 0x96	; 150
    3610:	7c 7f       	andi	r23, 0xFC	; 252
    3612:	7f 7f       	andi	r23, 0xFF	; 255
    3614:	7f 7f       	andi	r23, 0xFF	; 255
    3616:	7f 7f       	andi	r23, 0xFF	; 255
    3618:	7f 7f       	andi	r23, 0xFF	; 255
    361a:	7f 7f       	andi	r23, 0xFF	; 255
    361c:	7f 7f       	andi	r23, 0xFF	; 255
    361e:	7f 7f       	andi	r23, 0xFF	; 255
    3620:	7f 7f       	andi	r23, 0xFF	; 255
    3622:	7f 7f       	andi	r23, 0xFF	; 255
    3624:	7f 7f       	andi	r23, 0xFF	; 255
    3626:	7f 7f       	andi	r23, 0xFF	; 255
    3628:	7f 7f       	andi	r23, 0xFF	; 255
    362a:	7f 7f       	andi	r23, 0xFF	; 255
    362c:	7f 7f       	andi	r23, 0xFF	; 255
    362e:	7f 7f       	andi	r23, 0xFF	; 255
    3630:	7f 7f       	andi	r23, 0xFF	; 255
    3632:	7f 7f       	andi	r23, 0xFF	; 255
    3634:	7f 7f       	andi	r23, 0xFF	; 255
    3636:	7f 7f       	andi	r23, 0xFF	; 255
    3638:	7f 7f       	andi	r23, 0xFF	; 255
    363a:	7f 7f       	andi	r23, 0xFF	; 255
    363c:	7f 7f       	andi	r23, 0xFF	; 255
    363e:	7f 7f       	andi	r23, 0xFF	; 255
    3640:	7f 7f       	andi	r23, 0xFF	; 255
    3642:	7f 7f       	andi	r23, 0xFF	; 255
    3644:	7f 7f       	andi	r23, 0xFF	; 255
    3646:	7f 7f       	andi	r23, 0xFF	; 255
    3648:	7f 7f       	andi	r23, 0xFF	; 255
    364a:	7f 7f       	andi	r23, 0xFF	; 255
    364c:	7f 7f       	andi	r23, 0xFF	; 255
    364e:	7f 7f       	andi	r23, 0xFF	; 255
    3650:	7f 7f       	andi	r23, 0xFF	; 255
    3652:	7f 7f       	andi	r23, 0xFF	; 255
    3654:	7f 7f       	andi	r23, 0xFF	; 255
    3656:	7f 7f       	andi	r23, 0xFF	; 255
    3658:	7f 7f       	andi	r23, 0xFF	; 255
    365a:	7f 7f       	andi	r23, 0xFF	; 255
    365c:	7f 7f       	andi	r23, 0xFF	; 255
    365e:	7f 7f       	andi	r23, 0xFF	; 255
    3660:	7f 7f       	andi	r23, 0xFF	; 255
    3662:	7f 7f       	andi	r23, 0xFF	; 255
    3664:	7f 7f       	andi	r23, 0xFF	; 255
    3666:	7f 7f       	andi	r23, 0xFF	; 255
    3668:	7f 7f       	andi	r23, 0xFF	; 255
    366a:	7f 7f       	andi	r23, 0xFF	; 255
    366c:	7f 7f       	andi	r23, 0xFF	; 255
    366e:	7f 7f       	andi	r23, 0xFF	; 255
    3670:	7f 7f       	andi	r23, 0xFF	; 255
    3672:	7f 7f       	andi	r23, 0xFF	; 255
    3674:	7f 7f       	andi	r23, 0xFF	; 255
    3676:	7f 7f       	andi	r23, 0xFF	; 255
    3678:	7f 7f       	andi	r23, 0xFF	; 255
    367a:	7f 7c       	andi	r23, 0xCF	; 207
    367c:	78 71       	andi	r23, 0x18	; 24
    367e:	68 4c       	sbci	r22, 0xC8	; 200
    3680:	2c 1c       	adc	r2, r12
    3682:	12 0c       	add	r1, r2
    3684:	0a 0b       	sbc	r16, r26
    3686:	0a 05       	cpc	r16, r10
    3688:	fd f3       	brhs	.-2      	; 0x3688 <waves+0x988>
    368a:	e9 df       	rcall	.-46     	; 0x365e <waves+0x95e>
    368c:	d4 ca       	rjmp	.-2648   	; 0x2c36 <steptable+0x12e>
    368e:	c0 b7       	in	r28, 0x30	; 48
    3690:	ae a6       	std	Y+46, r10	; 0x2e
    3692:	9e 97       	sbiw	r26, 0x2e	; 46
    3694:	91 8b       	std	Z+17, r25	; 0x11
    3696:	86 85       	ldd	r24, Z+14	; 0x0e
    3698:	82 80       	ldd	r8, Z+2	; 0x02
    369a:	80 80       	ld	r8, Z
    369c:	80 80       	ld	r8, Z
    369e:	80 80       	ld	r8, Z
    36a0:	80 80       	ld	r8, Z
    36a2:	80 80       	ld	r8, Z
    36a4:	80 80       	ld	r8, Z
    36a6:	80 80       	ld	r8, Z
    36a8:	80 80       	ld	r8, Z
    36aa:	80 80       	ld	r8, Z
    36ac:	80 80       	ld	r8, Z
    36ae:	80 80       	ld	r8, Z
    36b0:	80 80       	ld	r8, Z
    36b2:	80 80       	ld	r8, Z
    36b4:	80 80       	ld	r8, Z
    36b6:	80 80       	ld	r8, Z
    36b8:	80 80       	ld	r8, Z
    36ba:	80 80       	ld	r8, Z
    36bc:	80 80       	ld	r8, Z
    36be:	80 80       	ld	r8, Z
    36c0:	80 80       	ld	r8, Z
    36c2:	80 80       	ld	r8, Z
    36c4:	80 80       	ld	r8, Z
    36c6:	80 80       	ld	r8, Z
    36c8:	80 80       	ld	r8, Z
    36ca:	80 80       	ld	r8, Z
    36cc:	80 80       	ld	r8, Z
    36ce:	80 80       	ld	r8, Z
    36d0:	80 80       	ld	r8, Z
    36d2:	80 80       	ld	r8, Z
    36d4:	80 80       	ld	r8, Z
    36d6:	80 80       	ld	r8, Z
    36d8:	80 80       	ld	r8, Z
    36da:	80 80       	ld	r8, Z
    36dc:	80 80       	ld	r8, Z
    36de:	80 80       	ld	r8, Z
    36e0:	80 80       	ld	r8, Z
    36e2:	80 80       	ld	r8, Z
    36e4:	80 80       	ld	r8, Z
    36e6:	80 80       	ld	r8, Z
    36e8:	80 80       	ld	r8, Z
    36ea:	80 80       	ld	r8, Z
    36ec:	80 80       	ld	r8, Z
    36ee:	80 80       	ld	r8, Z
    36f0:	80 80       	ld	r8, Z
    36f2:	80 80       	ld	r8, Z
    36f4:	80 87       	std	Z+8, r24	; 0x08
    36f6:	91 9d       	mul	r25, r1
    36f8:	ac c4       	rjmp	.+2392   	; 0x4052 <__data_load_end+0x53e>
    36fa:	cb d4       	rcall	.+2454   	; 0x4092 <__data_load_end+0x57e>
    36fc:	dd f2       	brhs	.-74     	; 0x36b4 <waves+0x9b4>
    36fe:	fa fa       	.word	0xfafa	; ????

00003700 <RestoreBackground>:
		return;
	}
	
	fadeStep=FADER_STEPS;
	fadeDir=-1;
	doFade(speed,blocking);
    3700:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <userRamTilesCount>
    3704:	90 91 86 07 	lds	r25, 0x0786	; 0x800786 <free_tile_index>
    3708:	89 17       	cp	r24, r25
    370a:	78 f4       	brcc	.+30     	; 0x372a <RestoreBackground+0x2a>
    370c:	e8 2f       	mov	r30, r24
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	9f 01       	movw	r18, r30
    3712:	22 0f       	add	r18, r18
    3714:	33 1f       	adc	r19, r19
    3716:	e2 0f       	add	r30, r18
    3718:	f3 1f       	adc	r31, r19
    371a:	e8 59       	subi	r30, 0x98	; 152
    371c:	fb 4f       	sbci	r31, 0xFB	; 251
    371e:	a0 81       	ld	r26, Z
    3720:	b1 81       	ldd	r27, Z+1	; 0x01
    3722:	92 81       	ldd	r25, Z+2	; 0x02
    3724:	9c 93       	st	X, r25
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	ed cf       	rjmp	.-38     	; 0x3704 <RestoreBackground+0x4>
    372a:	08 95       	ret

0000372c <ProcessSprites>:
    372c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3730:	88 23       	and	r24, r24
    3732:	41 f0       	breq	.+16     	; 0x3744 <ProcessSprites+0x18>
    3734:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <userRamTilesCount_tmp>
    3738:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <userRamTilesCount>
    373c:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <free_tile_index>
    3740:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <RestoreBackground>
    3744:	08 95       	ret

00003746 <DisplayLogo>:
    3746:	08 95       	ret

00003748 <InitializeVideoMode>:
    3748:	08 95       	ret

0000374a <VideoModeVsync>:
    374a:	0e 94 c4 1b 	call	0x3788	; 0x3788 <ProcessFading>
    374e:	0c 94 96 1b 	jmp	0x372c	; 0x372c <ProcessSprites>

00003752 <Print>:
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	06 2f       	mov	r16, r22
    375c:	c4 2f       	mov	r28, r20
    375e:	d5 2f       	mov	r29, r21
    3760:	18 2f       	mov	r17, r24
    3762:	14 1b       	sub	r17, r20
    3764:	fe 01       	movw	r30, r28
    3766:	44 91       	lpm	r20, Z
    3768:	44 23       	and	r20, r20
    376a:	49 f0       	breq	.+18     	; 0x377e <Print+0x2c>
    376c:	4f 77       	andi	r20, 0x7F	; 127
    376e:	40 52       	subi	r20, 0x20	; 32
    3770:	60 2f       	mov	r22, r16
    3772:	8c 2f       	mov	r24, r28
    3774:	81 0f       	add	r24, r17
    3776:	0e 94 80 10 	call	0x2100	; 0x2100 <SetFont>
    377a:	21 96       	adiw	r28, 0x01	; 1
    377c:	f3 cf       	rjmp	.-26     	; 0x3764 <Print+0x12>
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	08 95       	ret

00003788 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    3788:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <fadeActive>
    378c:	88 23       	and	r24, r24
    378e:	01 f1       	breq	.+64     	; 0x37d0 <ProcessFading+0x48>
		if(currFadeFrame==0){
    3790:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <currFadeFrame>
    3794:	81 11       	cpse	r24, r1
    3796:	19 c0       	rjmp	.+50     	; 0x37ca <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    3798:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <fadeSpeed>
    379c:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <currFadeFrame>
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    37a0:	e0 91 89 07 	lds	r30, 0x0789	; 0x800789 <fadeStep>
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	e5 52       	subi	r30, 0x25	; 37
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	e4 91       	lpm	r30, Z
    37ac:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    37ae:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <fadeDir>
    37b2:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <fadeStep>
    37b6:	89 0f       	add	r24, r25
    37b8:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <fadeStep>
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    37bc:	88 23       	and	r24, r24
    37be:	11 f0       	breq	.+4      	; 0x37c4 <ProcessFading+0x3c>
    37c0:	8d 30       	cpi	r24, 0x0D	; 13
    37c2:	31 f4       	brne	.+12     	; 0x37d0 <ProcessFading+0x48>
				fadeActive=false;
    37c4:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <fadeActive>
    37c8:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    37ca:	81 50       	subi	r24, 0x01	; 1
    37cc:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <currFadeFrame>
    37d0:	08 95       	ret

000037d2 <sdCardFindFileFirstSectorFlash>:

.section .text.sd_find_file_section

sdCardFindFileFirstSectorFlash:
sd_find_file_first_sector_flash:
	bset	6					; set the T flag in SREG to indicate we are looking at string in FLASH
    37d2:	68 94       	set
	rjmp	sd_find_file_first_sector_common
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <sd_find_file_first_sector_common>

000037d6 <sdCardFindFileFirstSector>:

sdCardFindFileFirstSector:
sd_find_file_first_sector:
	bclr	6					; clear the T flag in SREG to indicate we are looking at string in RAM
    37d6:	e8 94       	clt

000037d8 <sd_find_file_first_sector_common>:
sd_find_file_first_sector_common:
	push	r2					; Save R2 as it will be overwritten by SPC
    37d8:	2f 92       	push	r2
	push	r16					; Save R16:17 as it will be overwritten by MaxFilesToSearchFor
    37da:	0f 93       	push	r16
	push	r17
    37dc:	1f 93       	push	r17
	push	r28					; Save R28:29 as it will be overwritten by the String Index Pointer
    37de:	cf 93       	push	r28
	push	r29
    37e0:	df 93       	push	r29
	push	r24					; Save the address pointing to the String (could be flash or RAM)
    37e2:	8f 93       	push	r24
	push	r25
    37e4:	9f 93       	push	r25


// sd_cuesector(0x000);
	rcall 	sd_find_clear_r22_23_24_25
    37e6:	52 d0       	rcall	.+164    	; 0x388c <sd_find_clear_r22_23_24_25>
	rcall	sd_card_cue_sector_address
    37e8:	e6 d0       	rcall	.+460    	; 0x39b6 <sdCardCueSectorAddress>
// sdCardSkipBytes(offsetof(MBR, partition1)+ offsetof(PartitionEntry, startSector));
	ldi		r24, 0xC6
    37ea:	86 ec       	ldi	r24, 0xC6	; 198
	ldi		r25, 0x01
    37ec:	91 e0       	ldi	r25, 0x01	; 1
	rcall	sd_card_skip_bytes
    37ee:	5e d0       	rcall	.+188    	; 0x38ac <sdCardSkipBytes>
//long bootRecordSector = sdCardGetLong();
	rcall	sd_card_get_long
    37f0:	63 d0       	rcall	.+198    	; 0x38b8 <sdCardGetLong>
    sts    SD_DEBUG_bootRecordSector+2, r24
    sts    SD_DEBUG_bootRecordSector+1, r23
    sts    SD_DEBUG_bootRecordSector+0, r22
#endif

	movw	r26, r24			; Save the high word of the boot sector to r26:27 (which is untouched by StopTransmission)
    37f2:	dc 01       	movw	r26, r24
	movw	r18, r22			; Save the low word to r18:19
    37f4:	9b 01       	movw	r18, r22
//sd_stoptransmission();
	rcall	sd_card_stop_transmission
    37f6:	f4 d0       	rcall	.+488    	; 0x39e0 <sdCardStopTransmission>
//sd_cuesector(bootRecordSector);
	movw	r24, r26
    37f8:	cd 01       	movw	r24, r26
	movw	r22, r18
    37fa:	b9 01       	movw	r22, r18
	rcall	sd_card_cue_sector_address
    37fc:	dc d0       	rcall	.+440    	; 0x39b6 <sdCardCueSectorAddress>
//sdCardSkipBytes(offsetof(BootRecord, bytesPerSector));
	ldi		r24, 0x0B
    37fe:	8b e0       	ldi	r24, 0x0B	; 11
	rcall	sd_card_skip_bytes_max_256
    3800:	54 d0       	rcall	.+168    	; 0x38aa <sd_card_skip_bytes_max_256>
//int  bytesPerSector    = sdCardGetInt();
	rcall	sd_card_get_int							; We divide BytesPerSector by 32 for a re-arrange of the later maths
    3802:	5c d0       	rcall	.+184    	; 0x38bc <sdCardGetInt>
    sts    SD_DEBUG_bytesPerSector+1, r25
    sts    SD_DEBUG_bytesPerSector+0, r24
#endif


	ldi		r23, 0x20								; ((maxRootDirectoryEntries * 32)/bytesPerSector)
    3804:	70 e2       	ldi	r23, 0x20	; 32
	rcall	sd_find_div_r2425_by_r23_result_r0		; The result of this is at most 8 bits (BPS is 128..4096)
    3806:	46 d0       	rcall	.+140    	; 0x3894 <sd_find_div_r2425_by_r23_result_r0>
//char sectorsPerCluster = sdCardGetChar();
	rcall	sd_card_get_char
    3808:	5f d0       	rcall	.+190    	; 0x38c8 <sdCardGetByte>

#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_sectorsPerCluster+0, r24
#endif

	mov		r2, r24
    380a:	28 2e       	mov	r2, r24
//int  reservedSectors   = sdCardGetInt();
	rcall	sd_card_get_int							; Get reserved sectors and add it straight to R12:19:26:26
    380c:	57 d0       	rcall	.+174    	; 0x38bc <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_reservedSectors+1, r25
    sts    SD_DEBUG_reservedSectors+0, r24
#endif

	rcall	sd_find_add_r2425_to_r1819_r2627			; which now contains (bootRecordSector + reservedSectors)
    380e:	48 d0       	rcall	.+144    	; 0x38a0 <sd_find_add_r2425_to_r1819_r2627>
//sdCardSkipBytes(1);
	ldi		r24, 0x01
    3810:	81 e0       	ldi	r24, 0x01	; 1
	rcall	sd_card_skip_bytes_max_256
    3812:	4b d0       	rcall	.+150    	; 0x38aa <sd_card_skip_bytes_max_256>
//	int  maxRootDirectoryEntries = sdCardGetInt();
	rcall	sd_card_get_int
    3814:	53 d0       	rcall	.+166    	; 0x38bc <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_maxRootDirectoryEntries+1, r25
    sts    SD_DEBUG_maxRootDirectoryEntries+0, r24
#endif

	movw	r16, r24								; Make a copy of Max Root Dir Entries for NumFilesToCheck
    3816:	8c 01       	movw	r16, r24

	mov		r23, r0									; Do the second part of the maths for
    3818:	70 2d       	mov	r23, r0
	rcall	sd_find_div_r2425_by_r23_result_r0		; ((maxRootDirectoryEntries * 32)/bytesPerSector)
    381a:	3c d0       	rcall	.+120    	; 0x3894 <sd_find_div_r2425_by_r23_result_r0>
													; leaving the result in R0 (If you try to custom format a disk
													; with 4096 RDE and only 256 BPS this will fail.  All sensible
													; "round" binary values will work
//sdCardSkipBytes(3);
	ldi		r24, 0x03
    381c:	83 e0       	ldi	r24, 0x03	; 3
	rcall	sd_card_skip_bytes_max_256
    381e:	45 d0       	rcall	.+138    	; 0x38aa <sd_card_skip_bytes_max_256>
//int sectorsPerFat = sdCardGetInt();
	rcall	sd_card_get_int							; Sectors per fat then divide by two
    3820:	4d d0       	rcall	.+154    	; 0x38bc <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_sectorsPerFat+1, r25
    sts    SD_DEBUG_sectorsPerFat+0, r24
#endif

	lsl		r24										; and then add to (bootRecordSector + reservedSectors)
    3822:	88 0f       	add	r24, r24
	rol		r25
    3824:	99 1f       	adc	r25, r25
	rcall	sd_find_add_r2425_to_r1819_r2627
    3826:	3c d0       	rcall	.+120    	; 0x38a0 <sd_find_add_r2425_to_r1819_r2627>
//long dirTableSector = bootRecordSector + reservedSectors + (sectorsPerFat * 2);
//sd_stoptransmission();
	rcall	sd_card_stop_transmission
    3828:	db d0       	rcall	.+438    	; 0x39e0 <sdCardStopTransmission>


//sd_cuesector(dirTableSector);
	movw	r24, r26
    382a:	cd 01       	movw	r24, r26
	movw	r22, r18
    382c:	b9 01       	movw	r22, r18
    sts    SD_DEBUG_dirTableSector+2, r24
    sts    SD_DEBUG_dirTableSector+1, r23
    sts    SD_DEBUG_dirTableSector+0, r22
#endif

	rcall	sd_card_cue_sector_address
    382e:	c3 d0       	rcall	.+390    	; 0x39b6 <sdCardCueSectorAddress>

	movw	r24, r0									; Now that we have finished "cueing" the DirTable we can continue the maths
    3830:	c0 01       	movw	r24, r0
	rcall	sd_find_add_r2425_to_r1819_r2627			; dirTableSector + ((maxRootDirectoryEntries * 32)/bytesPerSector)
    3832:	36 d0       	rcall	.+108    	; 0x38a0 <sd_find_add_r2425_to_r1819_r2627>

	pop		r21								; pop the base address of the 8.3 filename string
    3834:	5f 91       	pop	r21
	pop		r20
    3836:	4f 91       	pop	r20

00003838 <sd_find_file_for_each_dir_entry_loop>:

sd_find_file_for_each_dir_entry_loop:
	movw	r28, r20						; Get the base address of the filename into the index_backup
    3838:	ea 01       	movw	r28, r20
	ldi		r22, 11							; number of chars to check (11 = 8+3)
    383a:	6b e0       	ldi	r22, 0x0B	; 11
	cbr		r23, (1<<0)						; clear the search for file flag
    383c:	7e 7f       	andi	r23, 0xFE	; 254

0000383e <sd_find_file_text_search_loop>:
sd_find_file_text_search_loop:
	rcall	sd_card_get_char				; Get the first byte from the SD card to compare
    383e:	44 d0       	rcall	.+136    	; 0x38c8 <sdCardGetByte>

	movw	r30, r28
    3840:	fe 01       	movw	r30, r28
	brts	sd_find_file_text_search_loop_not_ram
    3842:	0e f0       	brts	.+2      	; 0x3846 <sd_find_file_text_search_loop_not_ram>
	ld		r25, Z+							; get the first byte of the search string to compare
    3844:	91 91       	ld	r25, Z+

00003846 <sd_find_file_text_search_loop_not_ram>:
sd_find_file_text_search_loop_not_ram:
	brtc	sd_find_file_text_search_loop_not_flash
    3846:	0e f4       	brtc	.+2      	; 0x384a <sd_find_file_text_search_loop_not_flash>
	lpm		r25, Z+
    3848:	95 91       	lpm	r25, Z+

0000384a <sd_find_file_text_search_loop_not_flash>:
sd_find_file_text_search_loop_not_flash:

	movw	r28, r30
    384a:	ef 01       	movw	r28, r30

	cp		r24, r25						; compare the two bytes
    384c:	89 17       	cp	r24, r25

	breq	sd_find_file_text_not_equal	; and if not matched then set dirty flag
    384e:	09 f0       	breq	.+2      	; 0x3852 <sd_find_file_text_not_equal>
	sbr		r23, (1<<0)
    3850:	71 60       	ori	r23, 0x01	; 1

00003852 <sd_find_file_text_not_equal>:
sd_find_file_text_not_equal:
	dec		r22
    3852:	6a 95       	dec	r22
	brne	sd_find_file_text_search_loop	; continue for all 11 bytes
    3854:	a1 f7       	brne	.-24     	; 0x383e <sd_find_file_text_search_loop>

	sbrs	r23, 0							; if the dirty flag was not set (ie: all 11 chars matched)
    3856:	70 ff       	sbrs	r23, 0
	rjmp	sd_find_file_text_found		; then we have found the file
    3858:	08 c0       	rjmp	.+16     	; 0x386a <sd_find_file_text_found>

	subi	r16, 1							; subtract ONE from NumFilesToCheck
    385a:	01 50       	subi	r16, 0x01	; 1
	sbc		r17, r1
    385c:	11 09       	sbc	r17, r1

	brne	sd_find_file_keep_searching
    385e:	11 f4       	brne	.+4      	; 0x3864 <sd_find_file_keep_searching>
	rcall	sd_find_clear_r22_23_24_25
    3860:	15 d0       	rcall	.+42     	; 0x388c <sd_find_clear_r22_23_24_25>
	rjmp	sd_find_file_file_not_found
    3862:	0e c0       	rjmp	.+28     	; 0x3880 <sd_find_file_file_not_found>

00003864 <sd_find_file_keep_searching>:

sd_find_file_keep_searching:
	ldi		r24, 21							; other wise skip fwd 21 bytes to the next directory entry (11 + 21 = 32)
    3864:	85 e1       	ldi	r24, 0x15	; 21
	rcall	sd_card_skip_bytes_max_256
    3866:	21 d0       	rcall	.+66     	; 0x38aa <sd_card_skip_bytes_max_256>

	rjmp	sd_find_file_for_each_dir_entry_loop	; and continue
    3868:	e7 cf       	rjmp	.-50     	; 0x3838 <sd_find_file_for_each_dir_entry_loop>

0000386a <sd_find_file_text_found>:

sd_find_file_text_found:

//sdCardSkipBytes(15);
	ldi		r24, 15							; Skip FWD to read the address of the first cluster of this file
    386a:	8f e0       	ldi	r24, 0x0F	; 15
	rcall	sd_card_skip_bytes_max_256
    386c:	1e d0       	rcall	.+60     	; 0x38aa <sd_card_skip_bytes_max_256>

//int firstCluster = sdCardGetInt();
	rcall	sd_card_get_int
    386e:	26 d0       	rcall	.+76     	; 0x38bc <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_firstCluster+1, r25
    sts    SD_DEBUG_firstCluster+0, r24
#endif

	subi	r24, 2							; (firstCluster-2)
    3870:	82 50       	subi	r24, 0x02	; 2
	sbc		r25, r1
    3872:	91 09       	sbc	r25, r1

00003874 <sd_find_file_mul_by_BPS_loop>:

sd_find_file_mul_by_BPS_loop:					; Do a really dumb multiply by successive adds.
	rcall	sd_find_add_r2425_to_r1819_r2627	; This smaller code because we already have a function for the add
    3874:	15 d0       	rcall	.+42     	; 0x38a0 <sd_find_add_r2425_to_r1819_r2627>
	dec		r2									; so looping back x many SectorsPerCluster (in r2) manages a 8x16->24
    3876:	2a 94       	dec	r2
	brne	sd_find_file_mul_by_BPS_loop		; in only 3 words (even though it could take 4000 cycles)
    3878:	e9 f7       	brne	.-6      	; 0x3874 <sd_find_file_mul_by_BPS_loop>
												; Note: This IS a 24 bit result for any file past the 40 megabyte mark

;sd_stoptransmission();
	rcall	sd_card_stop_transmission
    387a:	b2 d0       	rcall	.+356    	; 0x39e0 <sdCardStopTransmission>


;return(dirTableSector+((maxRootDirectoryEntries * 32)/bytesPerSector)+((firstCluster-2)*sectorsPerCluster));
	movw	r22, r18
    387c:	b9 01       	movw	r22, r18
	movw	r24, r26
    387e:	cd 01       	movw	r24, r26

00003880 <sd_find_file_file_not_found>:
    sts    SD_DEBUG_firstSector+1, r23
    sts    SD_DEBUG_firstSector+0, r22
#endif

sd_find_file_file_not_found:
	pop		r29								; restore the registers we used
    3880:	df 91       	pop	r29
	pop		r28
    3882:	cf 91       	pop	r28
	pop		r17
    3884:	1f 91       	pop	r17
	pop		r16
    3886:	0f 91       	pop	r16
	pop		r2
    3888:	2f 90       	pop	r2
	ret
    388a:	08 95       	ret

0000388c <sd_find_clear_r22_23_24_25>:

sd_find_clear_r22_23_24_25:
	ldi		r22, 0x00
    388c:	60 e0       	ldi	r22, 0x00	; 0
	ldi		r23, 0x00
    388e:	70 e0       	ldi	r23, 0x00	; 0
	movw	r24, r22
    3890:	cb 01       	movw	r24, r22
	ret
    3892:	08 95       	ret

00003894 <sd_find_div_r2425_by_r23_result_r0>:

sd_find_div_r2425_by_r23_result_r0:					; This is a dumb divide only works for values with 1 high bit
	lsr		r25										; AFAIK this is OK for the FAT maths as MaxRDE can only be 512, 1024, 2048 or 4096
    3894:	96 95       	lsr	r25
	ror		r24
    3896:	87 95       	ror	r24
	lsr		r23
    3898:	76 95       	lsr	r23
	brcc	sd_find_div_r2425_by_r23_result_r0
    389a:	e0 f7       	brcc	.-8      	; 0x3894 <sd_find_div_r2425_by_r23_result_r0>
	mov		r0, r24
    389c:	08 2e       	mov	r0, r24
	ret
    389e:	08 95       	ret

000038a0 <sd_find_add_r2425_to_r1819_r2627>:

sd_find_add_r2425_to_r1819_r2627:
	add		r18, r24
    38a0:	28 0f       	add	r18, r24
	adc		r19, r25
    38a2:	39 1f       	adc	r19, r25
	adc		r26, r1
    38a4:	a1 1d       	adc	r26, r1
	adc		r27, r1
    38a6:	b1 1d       	adc	r27, r1
	ret
    38a8:	08 95       	ret

000038aa <sd_card_skip_bytes_max_256>:



.section .text.sd_card_common_section
sd_card_skip_bytes_max_256:
	ldi		r25, 0x00
    38aa:	90 e0       	ldi	r25, 0x00	; 0

000038ac <sdCardSkipBytes>:
sdCardSkipBytes:
sd_card_skip_bytes:
	movw	r22, r24
    38ac:	bc 01       	movw	r22, r24

000038ae <sd_card_skip_bytes_loop>:

sd_card_skip_bytes_loop:
	rcall	sd_card_get_byte
    38ae:	0c d0       	rcall	.+24     	; 0x38c8 <sdCardGetByte>
	subi	r22, 1
    38b0:	61 50       	subi	r22, 0x01	; 1
	sbci	r23, 0
    38b2:	70 40       	sbci	r23, 0x00	; 0
	brne	sd_card_skip_bytes_loop
    38b4:	e1 f7       	brne	.-8      	; 0x38ae <sd_card_skip_bytes_loop>
	ret
    38b6:	08 95       	ret

000038b8 <sdCardGetLong>:

sdCardGetLong:
sd_card_get_long:
    rcall   sd_card_get_int     ; First two bytes from SD card and move to R22:23
    38b8:	01 d0       	rcall	.+2      	; 0x38bc <sdCardGetInt>
    movw    r22, r24
    38ba:	bc 01       	movw	r22, r24

000038bc <sdCardGetInt>:
                                ; Fall through to GetInt to receive 3rd and 4th bytes
sdCardGetInt:
sd_card_get_int:
    rcall   sd_card_get_byte    ; First byte from SD card to temp location in R20 (3rd byte of GetLong)
    38bc:	05 d0       	rcall	.+10     	; 0x38c8 <sdCardGetByte>
    mov     r20, r24
    38be:	48 2f       	mov	r20, r24
    rcall   sd_card_get_byte    ; Second byte from SD card to temp location in R21 (4th byte of GetLong)
    38c0:	03 d0       	rcall	.+6      	; 0x38c8 <sdCardGetByte>
    mov     r21, r24
    38c2:	58 2f       	mov	r21, r24
    movw    r24, r20            ; Move R20:21 to the R24:25 location C is expecting it
    38c4:	ca 01       	movw	r24, r20
    ret
    38c6:	08 95       	ret

000038c8 <sdCardGetByte>:

sdCardGetChar:
sd_card_get_char:
sdCardGetByte:
sd_card_get_byte:
    ldi     r24, 0xFF                  ; Send an FF out the SPI port
    38c8:	8f ef       	ldi	r24, 0xFF	; 255
    out     _SFR_IO_ADDR(SPDR),r24
    38ca:	8e bd       	out	0x2e, r24	; 46

    lds     r30, sd_512_byte_count+0   ; Get the 512 Byte counter from RAM
    38cc:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <sd_512_byte_count>
    lds     r31, sd_512_byte_count+1
    38d0:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <sd_512_byte_count+0x1>
    adiw    r30, 1                     ; Increment the 512 Byte counter
    38d4:	31 96       	adiw	r30, 0x01	; 1
    sts     sd_512_byte_count+0, r30   ; store the low byte of the 512 counter
    38d6:	e0 93 d0 06 	sts	0x06D0, r30	; 0x8006d0 <sd_512_byte_count>
    mov     r24, r31                   ; make a copy of the high byte of the counter
    38da:	8f 2f       	mov	r24, r31
    andi    r24, 0x01                  ; AND it with 0x01 (mask the 16 bit counter to be maximum of 0x01FF)
    38dc:	81 70       	andi	r24, 0x01	; 1
    sts     sd_512_byte_count+1, r24   ; store the masked high byte back into RAM
    38de:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <sd_512_byte_count+0x1>

    sbrs    r31, 1                     ; if the NON ANDed version is not 0x0200 (512)
    38e2:	f1 ff       	sbrs	r31, 1
    rjmp    sd_card_send_byte_wait     ; then just read the next byte
    38e4:	09 c0       	rjmp	.+18     	; 0x38f8 <sd_card_send_byte_wait>

000038e6 <sd_card_hit_512_boundary>:

sd_card_hit_512_boundary:
    rcall	sd_card_send_byte_wait     ; Other wise read the next byte
    38e6:	08 d0       	rcall	.+16     	; 0x38f8 <sd_card_send_byte_wait>

    push    r24                        ; save it on the stack
    38e8:	8f 93       	push	r24
    rcall   sd_card_send_byte_ff       ; read and discard the two CRC bytes
    38ea:	04 d0       	rcall	.+8      	; 0x38f4 <sdCardSendByteFF>
    rcall   sd_card_send_byte_ff
    38ec:	03 d0       	rcall	.+6      	; 0x38f4 <sdCardSendByteFF>
    rcall   sd_card_get_data_token     ; wait for the data token
    38ee:	33 d0       	rcall	.+102    	; 0x3956 <sd_card_get_data_token>
    pop     r24                        ; then restore the data byte that was saved on the stack
    38f0:	8f 91       	pop	r24
    ret
    38f2:	08 95       	ret

000038f4 <sdCardSendByteFF>:

sdCardSendByteFF:
sd_card_send_byte_ff:
    ldi     r24,0xff
    38f4:	8f ef       	ldi	r24, 0xFF	; 255

000038f6 <sdCardSendByte>:
sdCardSendByte:
sd_card_send_byte:
    out     _SFR_IO_ADDR(SPDR),r24
    38f6:	8e bd       	out	0x2e, r24	; 46

000038f8 <sd_card_send_byte_wait>:
sd_card_send_byte_wait:
    in      r24,_SFR_IO_ADDR(SPSR)
    38f8:	8d b5       	in	r24, 0x2d	; 45
    sbrs    r24,SPIF
    38fa:	87 ff       	sbrs	r24, 7
    rjmp    sd_card_send_byte_wait
    38fc:	fd cf       	rjmp	.-6      	; 0x38f8 <sd_card_send_byte_wait>
    in      r24,_SFR_IO_ADDR(SPDR)
    38fe:	8e b5       	in	r24, 0x2e	; 46
    ret
    3900:	08 95       	ret

00003902 <sd_card_send_80_clocks>:

sd_card_send_80_clocks:
    ldi     r25,10
    3902:	9a e0       	ldi	r25, 0x0A	; 10

00003904 <sd_card_send_80_clocks_loop>:
sd_card_send_80_clocks_loop:
    rcall   sd_card_send_byte_ff
    3904:	f7 df       	rcall	.-18     	; 0x38f4 <sdCardSendByteFF>
    dec     r25
    3906:	9a 95       	dec	r25
    brne    sd_card_send_80_clocks_loop
    3908:	e9 f7       	brne	.-6      	; 0x3904 <sd_card_send_80_clocks_loop>
    ret
    390a:	08 95       	ret

0000390c <sd_card_clock_and_release_with_error>:


sd_card_clock_and_release_with_error:
    ldi     r24, 0x01
    390c:	81 e0       	ldi	r24, 0x01	; 1

0000390e <sd_card_clock_and_release>:
sd_card_clock_and_release:
    push    r24
    390e:	8f 93       	push	r24

00003910 <sd_card_clock_and_release_no_push_r24>:
sd_card_clock_and_release_no_push_r24:
    sbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS         ; Deassert Chip Select
    3910:	5e 9a       	sbi	0x0b, 6	; 11
    rcall   sd_card_send_byte_ff
    3912:	f0 df       	rcall	.-32     	; 0x38f4 <sdCardSendByteFF>
    pop     r24
    3914:	8f 91       	pop	r24
    ret
    3916:	08 95       	ret

00003918 <sd_card_send_command_no_address>:
;     Nil
;
; Trashed
;     R24 - temp
sd_card_send_command_no_address:
	ldi		r20, 0
    3918:	40 e0       	ldi	r20, 0x00	; 0
	ldi		r21, 0
    391a:	50 e0       	ldi	r21, 0x00	; 0
	movw	r22, r20
    391c:	ba 01       	movw	r22, r20

0000391e <sdCardSendCommand>:
sdCardSendCommand:
sd_card_send_command:
    cbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS        ; Assert Chip Select
    391e:	5e 98       	cbi	0x0b, 6	; 11

    rcall   sd_card_send_byte           ; send command
    3920:	ea df       	rcall	.-44     	; 0x38f6 <sdCardSendByte>
    mov     r24,r23
    3922:	87 2f       	mov	r24, r23
    rcall   sd_card_send_byte           ; send high x
    3924:	e8 df       	rcall	.-48     	; 0x38f6 <sdCardSendByte>
    mov     r24,r22
    3926:	86 2f       	mov	r24, r22
    rcall   sd_card_send_byte           ; send low x
    3928:	e6 df       	rcall	.-52     	; 0x38f6 <sdCardSendByte>
    mov     r24,r21
    392a:	85 2f       	mov	r24, r21
    rcall   sd_card_send_byte           ; send high y
    392c:	e4 df       	rcall	.-56     	; 0x38f6 <sdCardSendByte>
    mov     r24,r20
    392e:	84 2f       	mov	r24, r20
    rcall   sd_card_send_byte           ; send low y
    3930:	e2 df       	rcall	.-60     	; 0x38f6 <sdCardSendByte>
    ldi     r24, 0x95                   ; correct CRC for first command in SPI
    3932:	85 e9       	ldi	r24, 0x95	; 149
    rjmp   sd_card_send_byte            ; after that CRC is ignored, so no problem with always sending 0x95
    3934:	e0 cf       	rjmp	.-64     	; 0x38f6 <sdCardSendByte>

00003936 <sd_card_get_r1b_response>:
;
; Trashed
;     R24 (via sd_card_send_byte_ff)
;     R30, R31
sd_card_get_r1b_response:
    rcall   sd_card_get_r1_response_common  ; Get the R1 response into R24
    3936:	07 d0       	rcall	.+14     	; 0x3946 <sd_card_get_r1_response_common>
    push    r24                             ; Save R1 to the stack
    3938:	8f 93       	push	r24

0000393a <sd_card_get_r1b_response_loop>:
sd_card_get_r1b_response_loop:
    rcall   sd_card_send_byte_ff            ; Send out bytes on the SPI port until we
    393a:	dc df       	rcall	.-72     	; 0x38f4 <sdCardSendByteFF>
    cpi     r24, 0xFF                       ; recieve an 0xFF back which indicates no
    393c:	8f 3f       	cpi	r24, 0xFF	; 255
    brne    sd_card_get_r1b_response_loop   ; longer busy
    393e:	e9 f7       	brne	.-6      	; 0x393a <sd_card_get_r1b_response_loop>

    ; phantom pop r24                       ; restores the R1 response to R24
    ; phantom ret                           ; and return the R1 response in R24
    rjmp    sd_card_clock_and_release_no_push_r24
    3940:	e7 cf       	rjmp	.-50     	; 0x3910 <sd_card_clock_and_release_no_push_r24>

00003942 <sd_card_get_r1_response>:
;
; Trashed
;     R24 (via sd_card_send_byte_ff)
;     R30, R31
sd_card_get_r1_response:
    rcall   sd_card_get_r1_response_common  ; get the R1 response into R24
    3942:	01 d0       	rcall	.+2      	; 0x3946 <sd_card_get_r1_response_common>
    rjmp    sd_card_clock_and_release       ; and return the response after end of command clocks
    3944:	e4 cf       	rjmp	.-56     	; 0x390e <sd_card_clock_and_release>

00003946 <sd_card_get_r1_response_common>:
    ; phantom ret

sd_card_get_r1_response_common:
    ser     r30                             ; use R30:31 as a timeout counter
    3946:	ef ef       	ldi	r30, 0xFF	; 255
    ser     r31
    3948:	ff ef       	ldi	r31, 0xFF	; 255

0000394a <sd_card_get_r1_response_loop>:
sd_card_get_r1_response_loop:
    sbiw    r30,1                           ; Decrement the timeout counter
    394a:	31 97       	sbiw	r30, 0x01	; 1
    breq    sd_card_get_r1_response_end     ; if we have timed out then fail with whatever data was in r24
    394c:	19 f0       	breq	.+6      	; 0x3954 <sd_card_get_r1_response_end>
    rcall   sd_card_send_byte_ff            ; get the next byte from the SD card to see if it is a data token
    394e:	d2 df       	rcall	.-92     	; 0x38f4 <sdCardSendByteFF>
    sbrc    r24, 7                          ; If the MSB is set then we have found the R1 response
    3950:	87 fd       	sbrc	r24, 7
    rjmp    sd_card_get_r1_response_loop    ; So can skip the loop back to the start
    3952:	fb cf       	rjmp	.-10     	; 0x394a <sd_card_get_r1_response_loop>

00003954 <sd_card_get_r1_response_end>:
sd_card_get_r1_response_end:
    ret                                     ; and return the R1 response in R24
    3954:	08 95       	ret

00003956 <sd_card_get_data_token>:
;     R24, R25 (via sd_card_send_byte_ff)
;     R30, R31
;
; Continually RXs bytes from the SD card until it receives 0xFE the data
sd_card_get_data_token:
    ser     r30                             ; use R30:31 as a timeout counter
    3956:	ef ef       	ldi	r30, 0xFF	; 255
    ser     r31
    3958:	ff ef       	ldi	r31, 0xFF	; 255

0000395a <sd_card_data_token_loop>:
sd_card_data_token_loop:
    sbiw    r30,1                           ; Decrement the timeout counter
    395a:	31 97       	sbiw	r30, 0x01	; 1
    breq    sd_card_data_token_end          ; if we have timed out then fail with whatever data was in r24
    395c:	19 f0       	breq	.+6      	; 0x3964 <sd_card_data_token_end>
    rcall   sd_card_send_byte_ff            ; get the next byte from the SD card to see if it is a data token
    395e:	ca df       	rcall	.-108    	; 0x38f4 <sdCardSendByteFF>
    cpi     r24, SD_DATA_TOKEN              ; if it is a data_token (0xFE) the quit loop with data_token in r24
    3960:	8e 3f       	cpi	r24, 0xFE	; 254
    brne    sd_card_data_token_loop         ; if it was not the data_token then try again
    3962:	d9 f7       	brne	.-10     	; 0x395a <sd_card_data_token_loop>

00003964 <sd_card_data_token_end>:
sd_card_data_token_end:
    clr     r31                             ; leave r30:31 as 0x0000 for 512_byte_counter for other ASM functions
    3964:	ff 27       	eor	r31, r31
    clr     r30
    3966:	ee 27       	eor	r30, r30
    ret
    3968:	08 95       	ret

0000396a <sdCardInitNoBuffer>:
;     Nil
;
; Initializes the SD card.
sdCardInitNoBuffer:
sd_card_init_no_buffer:                     ; Setup I/O ports
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_SCK  ; SCK is high
    396a:	2f 9a       	sbi	0x05, 7	; 5
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_MOSI ; MOSI is high
    396c:	2d 9a       	sbi	0x05, 5	; 5
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_MISO ; NOTE: MISO must be weak pull up during init for some cards
    396e:	2e 9a       	sbi	0x05, 6	; 5

    sbi     _SFR_IO_ADDR(SPI_DDR), SD_SCK   ; SD_SCK is an output
    3970:	27 9a       	sbi	0x04, 7	; 4
    sbi     _SFR_IO_ADDR(SPI_DDR), SD_MOSI  ; SD_MOSI is an output
    3972:	25 9a       	sbi	0x04, 5	; 4

    sbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS ; Initial SD_CS level is high
    3974:	5e 9a       	sbi	0x0b, 6	; 11
    sbi     _SFR_IO_ADDR(SD_CS_DDR),  SD_CS ; Direction is output
    3976:	56 9a       	sbi	0x0a, 6	; 10

    ldi     r30, 0x00                       ; load a counter for a SW delay loop of
    3978:	e0 e0       	ldi	r30, 0x00	; 0
    ldi     r31, 0x20                       ; approx 1mS (8192 x4 clks / 28Mhz)
    397a:	f0 e2       	ldi	r31, 0x20	; 32

0000397c <sd_card_init_delay_loop>:
sd_card_init_delay_loop:
    sbiw    r30, 0x01                       ; wait 1mS
    397c:	31 97       	sbiw	r30, 0x01	; 1
    brne    sd_card_init_delay_loop
    397e:	f1 f7       	brne	.-4      	; 0x397c <sd_card_init_delay_loop>

    ldi     r24, (1<<MSTR)|(1<<SPE)|(1<<SPR1)|(1<<SPR0)    ;enable SPI interface clock div by 128 = ~~200Khz
    3980:	83 e5       	ldi	r24, 0x53	; 83
    out     _SFR_IO_ADDR(SPCR), r24
    3982:	8c bd       	out	0x2c, r24	; 44

	rcall   sd_card_send_80_clocks          ; 80 clocks for power stabilization
    3984:	be df       	rcall	.-132    	; 0x3902 <sd_card_send_80_clocks>

    ; send CMD0 until we get a 0x01 back, indicating card is busy

    ldi     r19, 0x20                       ; Maximum of 32 attempts for CMD0
    3986:	30 e2       	ldi	r19, 0x20	; 32

00003988 <sd_card_init_cmd0_loop>:
sd_card_init_cmd0_loop:
    ldi     r24, SD_CMD_GO_IDLE_STATE       ; issue card reset
    3988:	80 e4       	ldi	r24, 0x40	; 64
    rcall   sd_card_send_command_no_address
    398a:	c6 df       	rcall	.-116    	; 0x3918 <sd_card_send_command_no_address>
    rcall   sd_card_get_r1_response         ; wait for the r1 response
    398c:	da df       	rcall	.-76     	; 0x3942 <sd_card_get_r1_response>
    cpi     r24, 0x01                       ; should be 0x01 which is "busy" but no other errors
    398e:	81 30       	cpi	r24, 0x01	; 1
    breq    sd_card_init_card_detected
    3990:	19 f0       	breq	.+6      	; 0x3998 <sd_card_init_card_detected>

    dec     r19								; Decrement the "attempt" counter
    3992:	3a 95       	dec	r19
	brne    sd_card_init_cmd0_loop          ; if not tried MAX times yet then jump back and try again
    3994:	c9 f7       	brne	.-14     	; 0x3988 <sd_card_init_cmd0_loop>

                                                       ; Otherwise invalid / no card detected
	rjmp    sd_card_clock_and_release_with_error       ; so we give up and return an error
    3996:	ba cf       	rjmp	.-140    	; 0x390c <sd_card_clock_and_release_with_error>

00003998 <sd_card_init_card_detected>:
    ; phantom ret

sd_card_init_card_detected:
    ; send CMD1 until we get a 0x00 back, indicating card is done initializing

    ldi     r19, 0xFF                       ; Maximum of 255 attempts for CMD1
    3998:	3f ef       	ldi	r19, 0xFF	; 255

0000399a <sd_card_init_cmd1_loop>:
sd_card_init_cmd1_loop:
    ldi     r24, SD_CMD_SEND_OP_COND        ; Send CMD1 "Send OP Cond" to initialise the card
    399a:	81 e4       	ldi	r24, 0x41	; 65
    rcall   sd_card_send_command_no_address
    399c:	bd df       	rcall	.-134    	; 0x3918 <sd_card_send_command_no_address>
    rcall   sd_card_get_r1_response         ; Get the R1 response
    399e:	d1 df       	rcall	.-94     	; 0x3942 <sd_card_get_r1_response>
    cpi     r24, 0x00                       ; if Response is 0x00 then card is ready
    39a0:	80 30       	cpi	r24, 0x00	; 0
    breq    sd_card_init_cmd1_done
    39a2:	19 f0       	breq	.+6      	; 0x39aa <sd_card_init_cmd1_done>

    dec     r19								; Decrement the "attempt" counter
    39a4:	3a 95       	dec	r19
	brne    sd_card_init_cmd1_loop          ; if not tried MAX times yet then jump back and try again
    39a6:	c9 f7       	brne	.-14     	; 0x399a <sd_card_init_cmd1_loop>

                                                       ; Otherwise invalid / no card detected
	rjmp    sd_card_clock_and_release_with_error       ; so we give up and return an error
    39a8:	b1 cf       	rjmp	.-158    	; 0x390c <sd_card_clock_and_release_with_error>

000039aa <sd_card_init_cmd1_done>:
    ; phantom ret

sd_card_init_cmd1_done:
    cbi     _SFR_IO_ADDR(SPI_PORT), SD_MISO ; remove the weak pullup on MISO now we have done card init
    39aa:	2e 98       	cbi	0x05, 6	; 5

    ldi     r25, (1<<MSTR)|(1<<SPE)         ; enable SPI interface clock div cleared for fastest speed
    39ac:	90 e5       	ldi	r25, 0x50	; 80
    out     _SFR_IO_ADDR(SPCR), r25
    39ae:	9c bd       	out	0x2c, r25	; 44
    ldi     r25, (1<<SPI2X)                 ; set SPI double speed
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    out     _SFR_IO_ADDR(SPSR), r25
    39b2:	9d bd       	out	0x2d, r25	; 45

    rjmp    sd_card_clock_and_release       ; Deassert CS and return 0x00 "success" (already in r24 from above)
    39b4:	ac cf       	rjmp	.-168    	; 0x390e <sd_card_clock_and_release>

000039b6 <sdCardCueSectorAddress>:
; resets the sd_512_byte_count variable for further reads to keep track of packet
; location.
.section .text.sd_card_cue_section
sdCardCueSectorAddress:
sd_card_cue_sector_address:
    mov     r25, r24                        ; Regular SD needs byte adress so shift sector value by 9 bits (*512)
    39b6:	98 2f       	mov	r25, r24
    mov     r24, r23                        ; by first shifting it one byte (8 bits)
    39b8:	87 2f       	mov	r24, r23
    mov     r23, r22
    39ba:	76 2f       	mov	r23, r22
    clr     r22
    39bc:	66 27       	eor	r22, r22
    lsl     r23                             ; and then follow up with 1 more shift for a total of 9 bits
    39be:	77 0f       	add	r23, r23
    rol     r24
    39c0:	88 1f       	adc	r24, r24
    rol     r25
    39c2:	99 1f       	adc	r25, r25

000039c4 <sdCardCueByteAddress>:

sdCardCueByteAddress:
sd_card_cue_byte_address:
    movw    r20, r22                        ; shift the address from R22:23:24:25 where it came in
    39c4:	ab 01       	movw	r20, r22
    movw    r22, r24                        ; into R20:21:22:23 where sd_card_send_command expects it
    39c6:	bc 01       	movw	r22, r24

    ldi     r24, SD_CMD_READ_MULTIPLE_BLOCK
    39c8:	82 e5       	ldi	r24, 0x52	; 82
    rcall   sd_card_send_command
    39ca:	a9 df       	rcall	.-174    	; 0x391e <sdCardSendCommand>

    rcall   sd_card_get_data_token          ; wait for data token
    39cc:	c4 df       	rcall	.-120    	; 0x3956 <sd_card_get_data_token>
    cpi     r24, SD_DATA_TOKEN
    39ce:	8e 3f       	cpi	r24, 0xFE	; 254
    breq    sd_card_cue_end                 ; if data token received cue_sector succeded
    39d0:	09 f0       	breq	.+2      	; 0x39d4 <sd_card_cue_end>

                                            ; other wise there was an error and we need to

                                                       ; return fail and
    rjmp    sd_card_clock_and_release_with_error       ; release the SD card bus
    39d2:	9c cf       	rjmp	.-200    	; 0x390c <sd_card_clock_and_release_with_error>

000039d4 <sd_card_cue_end>:
    ; phantom ret

sd_card_cue_end:
    sts     sd_512_byte_count+0, r1         ; Reset the 512_byte counter
    39d4:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <sd_512_byte_count>
    sts     sd_512_byte_count+1, r1
    39d8:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <sd_512_byte_count+0x1>
    clr     r24                             ; return success
    39dc:	88 27       	eor	r24, r24
    ret
    39de:	08 95       	ret

000039e0 <sdCardStopTransmission>:
;
; Sends SD CMD12 "Stop Transmission" and then waits for the R1b response to
; indicate SD card is ready and deasserts the SD chip select line.
sdCardStopTransmission:
sd_card_stop_transmission:
    ldi     r24, SD_CMD_STOPTRANSMISSION
    39e0:	8c e4       	ldi	r24, 0x4C	; 76
    rcall   sd_card_send_command_no_address
    39e2:	9a df       	rcall	.-204    	; 0x3918 <sd_card_send_command_no_address>
    rjmp    sd_card_get_r1b_response
    39e4:	a8 cf       	rjmp	.-176    	; 0x3936 <sd_card_get_r1b_response>

000039e6 <main>:
extern volatile u16 loopStart;
extern volatile u16 loopEnd;

int main(){

	SetTileTable(tiles);			//Set the tileset to use (set this first)
    39e6:	88 ee       	ldi	r24, 0xE8	; 232
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	0e 94 95 10 	call	0x212a	; 0x212a <SetTileTable>
	SetFontTilesIndex(TILES_SIZE);	//Set the tile number in the tilset that contains the first font
    39ee:	80 e2       	ldi	r24, 0x20	; 32
    39f0:	0e 94 92 10 	call	0x2124	; 0x2124 <SetFontTilesIndex>
	ClearVram();					//Clear the screen (fills the vram with tile zero)
    39f4:	0e 94 76 10 	call	0x20ec	; 0x20ec <ClearVram>

	long sectorStart;
	long otherOffset = 10;

	sdCardInitNoBuffer();
    39f8:	0e 94 b5 1c 	call	0x396a	; 0x396a <sdCardInitNoBuffer>
	
	if((sectorStart = sdCardFindFileFirstSectorFlash(fileName)) == 0)
    39fc:	88 ee       	ldi	r24, 0xE8	; 232
    39fe:	96 e1       	ldi	r25, 0x16	; 22
    3a00:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <sdCardFindFileFirstSectorFlash>
    3a04:	61 15       	cp	r22, r1
    3a06:	71 05       	cpc	r23, r1
    3a08:	81 05       	cpc	r24, r1
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	49 f4       	brne	.+18     	; 0x3a20 <main+0x3a>
		Print(0,0,PSTR("FILE SD_MUSIC.DAT NOT FOUND ON SD CARD"));
    3a0e:	44 ef       	ldi	r20, 0xF4	; 244
    3a10:	56 e1       	ldi	r21, 0x16	; 22
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <Print>
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <main+0x3e>
	else
		sdCardCueSectorAddress(sectorStart);
    3a20:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <sdCardCueSectorAddress>

	sdInUse = 0;
    3a24:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <sdInUse>

	while(!SongBufFull())
    3a28:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SongBufFull>
    3a2c:	81 11       	cpse	r24, r1
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <main+0x54>
		SongBufWrite(sdCardGetByte());
    3a30:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <sdCardGetByte>
    3a34:	0e 94 ff 13 	call	0x27fe	; 0x27fe <SongBufWrite>
    3a38:	f7 cf       	rjmp	.-18     	; 0x3a28 <main+0x42>
	songOff = 0;
    3a3a:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <songOff>
    3a3e:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <songOff+0x1>
    3a42:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <songOff+0x2>
    3a46:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <songOff+0x3>
	StartSong(0);
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <StartSong>

	u16 counter = 0;
	while(1){
		CustomWaitVsync(1);
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <CustomWaitVsync>
			sdCardCueSectorAddress(sectorStart+otherOffset);//move to the start of the other data
			sdCardReadSimple(&vram[100],16);//read "HELLO WORLD!"
			sdCardCueByteAddress((uint32_t)((sectorStart*512UL)+songOff));//restore the SD back to the song position
			sdInUse = 0;//tell the CustomWaitVsync() it can touch the SD card again
		}
	}
    3a58:	fc cf       	rjmp	.-8      	; 0x3a52 <main+0x6c>

00003a5a <CustomWaitVsync>:
}

void CustomWaitVsync(u8 frames){//we do a best effort to keep up to the demand of the song player
	if(loopEnd){//we read past the end of the song..luckily it is padded with bytes from the loop start
    3a5a:	80 91 39 07 	lds	r24, 0x0739	; 0x800739 <loopEnd>
    3a5e:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <loopEnd+0x1>
    3a62:	89 2b       	or	r24, r25
    3a64:	e9 f0       	breq	.+58     	; 0x3aa0 <CustomWaitVsync+0x46>
		songPos = (songPos-loopEnd)+loopStart;
    3a66:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <songPos>
    3a6a:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <songPos+0x1>
    3a6e:	20 91 39 07 	lds	r18, 0x0739	; 0x800739 <loopEnd>
    3a72:	30 91 3a 07 	lds	r19, 0x073A	; 0x80073a <loopEnd+0x1>
    3a76:	40 91 80 07 	lds	r20, 0x0780	; 0x800780 <loopStart>
    3a7a:	50 91 81 07 	lds	r21, 0x0781	; 0x800781 <loopStart+0x1>
    3a7e:	84 0f       	add	r24, r20
    3a80:	95 1f       	adc	r25, r21
    3a82:	82 1b       	sub	r24, r18
    3a84:	93 0b       	sbc	r25, r19
    3a86:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <songPos+0x1>
    3a8a:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <songPos>
		loopEnd = 0;
    3a8e:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <loopEnd+0x1>
    3a92:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <loopEnd>
    3a96:	04 c0       	rjmp	.+8      	; 0x3aa0 <CustomWaitVsync+0x46>
	}
 	
	while(!GetVsyncFlag()){//try to use cycles that we would normally waste
		if(!sdInUse){//we are clear to use the SD card, the other section has restored our offset
    3a98:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <sdInUse>
    3a9c:	88 23       	and	r24, r24
    3a9e:	29 f0       	breq	.+10     	; 0x3aaa <CustomWaitVsync+0x50>
	if(loopEnd){//we read past the end of the song..luckily it is padded with bytes from the loop start
		songPos = (songPos-loopEnd)+loopStart;
		loopEnd = 0;
	}
 	
	while(!GetVsyncFlag()){//try to use cycles that we would normally waste
    3aa0:	0e 94 9a 10 	call	0x2134	; 0x2134 <GetVsyncFlag>
    3aa4:	88 23       	and	r24, r24
    3aa6:	c1 f3       	breq	.-16     	; 0x3a98 <CustomWaitVsync+0x3e>
    3aa8:	09 c0       	rjmp	.+18     	; 0x3abc <CustomWaitVsync+0x62>
		if(!sdInUse){//we are clear to use the SD card, the other section has restored our offset
			if(!SongBufFull())
    3aaa:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SongBufFull>
    3aae:	81 11       	cpse	r24, r1
    3ab0:	f7 cf       	rjmp	.-18     	; 0x3aa0 <CustomWaitVsync+0x46>
				SongBufWrite(sdCardGetByte());
    3ab2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <sdCardGetByte>
    3ab6:	0e 94 ff 13 	call	0x27fe	; 0x27fe <SongBufWrite>
    3aba:	f2 cf       	rjmp	.-28     	; 0x3aa0 <CustomWaitVsync+0x46>
		}
	}
}
    3abc:	08 95       	ret

00003abe <__udivmodhi4>:
    3abe:	aa 1b       	sub	r26, r26
    3ac0:	bb 1b       	sub	r27, r27
    3ac2:	51 e1       	ldi	r21, 0x11	; 17
    3ac4:	07 c0       	rjmp	.+14     	; 0x3ad4 <__udivmodhi4_ep>

00003ac6 <__udivmodhi4_loop>:
    3ac6:	aa 1f       	adc	r26, r26
    3ac8:	bb 1f       	adc	r27, r27
    3aca:	a6 17       	cp	r26, r22
    3acc:	b7 07       	cpc	r27, r23
    3ace:	10 f0       	brcs	.+4      	; 0x3ad4 <__udivmodhi4_ep>
    3ad0:	a6 1b       	sub	r26, r22
    3ad2:	b7 0b       	sbc	r27, r23

00003ad4 <__udivmodhi4_ep>:
    3ad4:	88 1f       	adc	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	5a 95       	dec	r21
    3ada:	a9 f7       	brne	.-22     	; 0x3ac6 <__udivmodhi4_loop>
    3adc:	80 95       	com	r24
    3ade:	90 95       	com	r25
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	08 95       	ret

00003ae6 <__divmodhi4>:
    3ae6:	97 fb       	bst	r25, 7
    3ae8:	07 2e       	mov	r0, r23
    3aea:	16 f4       	brtc	.+4      	; 0x3af0 <__divmodhi4+0xa>
    3aec:	00 94       	com	r0
    3aee:	07 d0       	rcall	.+14     	; 0x3afe <__divmodhi4_neg1>
    3af0:	77 fd       	sbrc	r23, 7
    3af2:	09 d0       	rcall	.+18     	; 0x3b06 <__divmodhi4_neg2>
    3af4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    3af8:	07 fc       	sbrc	r0, 7
    3afa:	05 d0       	rcall	.+10     	; 0x3b06 <__divmodhi4_neg2>
    3afc:	3e f4       	brtc	.+14     	; 0x3b0c <__divmodhi4_exit>

00003afe <__divmodhi4_neg1>:
    3afe:	90 95       	com	r25
    3b00:	81 95       	neg	r24
    3b02:	9f 4f       	sbci	r25, 0xFF	; 255
    3b04:	08 95       	ret

00003b06 <__divmodhi4_neg2>:
    3b06:	70 95       	com	r23
    3b08:	61 95       	neg	r22
    3b0a:	7f 4f       	sbci	r23, 0xFF	; 255

00003b0c <__divmodhi4_exit>:
    3b0c:	08 95       	ret

00003b0e <_exit>:
    3b0e:	f8 94       	cli

00003b10 <__stop_program>:
    3b10:	ff cf       	rjmp	.-2      	; 0x3b10 <__stop_program>
