
SDMusicDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b4c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000741  00800100  00800100  00003c4c  2**1
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00003ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003088  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aeb  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e84  00000000  00000000  00007beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000081c  00000000  00000000  0000aa70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bfd  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d4d  00000000  00000000  0000be89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0000ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__ctors_end>
       4:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
       8:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
       c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      10:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      14:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      18:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      1c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      20:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      24:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      28:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      2c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      30:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      34:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__vector_13>
      38:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_14>
      3c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      40:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      44:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      48:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      4c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      50:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      54:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      58:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      5c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      60:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      64:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      68:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>
      6c:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	5a 55       	subi	r21, 0x5A	; 90
      72:	01 20       	and	r0, r1
      74:	01 01       	movw	r0, r2
      76:	00 38       	cpi	r16, 0x80	; 128
      78:	08 00       	.word	0x0008	; ????
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	9f 10 a2 10 a3 10 a7 10 ae 10 b6 10 bb 10 c0 10     ................
      ce:	c3 10 d3 10 d6 10 d9 10 14 11 17 11 1a 11           ..............

000000dc <tiles>:
	...
     10c:	00 00 7f 00 00 00 00 7f 7f 00 00 00 00 00 7f 00     ................
     11c:	00 00 00 00 7f 00 00 00 00 00 7f 00 00 00 00 00     ................
     12c:	7f 00 00 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     13c:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 00 00 00 00     ................
     14c:	7f 00 00 00 7f 7f 00 00 00 7f 00 00 00 00 7f 00     ................
     15c:	00 00 00 00 7f 7f 7f 7f 7f 00 00 00 00 00 00 00     ................
     16c:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 00 00 00 00     ................
     17c:	7f 00 00 7f 7f 7f 00 00 00 00 00 00 7f 00 7f 00     ................
     18c:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     19c:	00 00 00 7f 00 00 00 00 7f 7f 00 00 00 7f 00 7f     ................
     1ac:	00 00 7f 00 00 7f 00 00 7f 7f 7f 7f 7f 00 00 00     ................
     1bc:	00 7f 00 00 00 00 00 7f 00 00 00 00 00 00 00 00     ................
     1cc:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     1dc:	00 00 7f 7f 7f 7f 00 00 00 00 00 00 7f 00 7f 00     ................
     1ec:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     1fc:	00 00 7f 7f 00 00 00 7f 00 00 00 00 7f 00 00 00     ................
     20c:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     21c:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     22c:	7f 7f 7f 7f 7f 00 00 00 00 00 7f 00 00 00 00 7f     ................
     23c:	00 00 00 00 7f 00 00 00 00 7f 00 00 00 00 00 7f     ................
     24c:	00 00 00 00 00 7f 00 00 00 00 00 00 00 00 00 00     ................
     25c:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     26c:	7f 00 00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     27c:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     28c:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     29c:	7f 00 00 7f 7f 7f 7f 00 00 00 00 00 7f 00 00 00     ................
     2ac:	00 7f 00 00 00 7f 7f 00 00 00 00 00 00 00 00 00     ................
     2bc:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     2cc:	7f 00 7f 00 00 00 7f 00 7f 7f 7f 7f 7f 00 7f 00     ................
     2dc:	00 00 7f 00 7f 00 00 00 7f 00 00 00 00 00 00 00     ................
     2ec:	7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     2fc:	7f 00 7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00     ................
     30c:	00 00 7f 00 7f 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     31c:	00 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     32c:	00 00 7f 00 00 00 00 00 7f 00 00 00 00 00 7f 00     ................
     33c:	00 00 7f 00 00 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     34c:	7f 7f 7f 7f 00 00 7f 00 00 00 7f 00 7f 00 00 00     ................
     35c:	7f 00 7f 00 00 00 7f 00 7f 00 00 00 7f 00 7f 00     ................
     36c:	00 00 7f 00 7f 7f 7f 7f 00 00 00 00 00 00 00 00     ................
     37c:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     38c:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 00 00 7f 00     ................
     39c:	00 00 00 00 7f 7f 7f 7f 7f 00 00 00 00 00 00 00     ................
     3ac:	7f 7f 7f 7f 7f 00 7f 00 00 00 00 00 7f 00 00 00     ................
     3bc:	00 00 7f 7f 7f 7f 00 00 7f 00 00 00 00 00 7f 00     ................
     3cc:	00 00 00 00 7f 00 00 00 00 00 00 00 00 00 00 00     ................
     3dc:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 f8     ................
     3ec:	f8 00 f8 00 f8 00 f8 00 f8 f8 00 00 f8 00 f8 00     ................
     3fc:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     40c:	00 00 f8 00 00 00 00 f8 f8 00 00 00 00 00 f8 00     ................
     41c:	00 00 00 00 f8 00 00 00 00 00 f8 00 00 00 00 00     ................
     42c:	f8 00 00 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     43c:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 00 00 00 00     ................
     44c:	f8 00 00 00 f8 f8 00 00 00 f8 00 00 00 00 f8 00     ................
     45c:	00 00 00 00 f8 f8 f8 f8 f8 00 00 00 00 00 00 00     ................
     46c:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 00 00 00 00     ................
     47c:	f8 00 00 f8 f8 f8 00 00 00 00 00 00 f8 00 f8 00     ................
     48c:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     49c:	00 00 00 f8 00 00 00 00 f8 f8 00 00 00 f8 00 f8     ................
     4ac:	00 00 f8 00 00 f8 00 00 f8 f8 f8 f8 f8 00 00 00     ................
     4bc:	00 f8 00 00 00 00 00 f8 00 00 00 00 00 00 00 00     ................
     4cc:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     4dc:	00 00 f8 f8 f8 f8 00 00 00 00 00 00 f8 00 f8 00     ................
     4ec:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     4fc:	00 00 f8 f8 00 00 00 f8 00 00 00 00 f8 00 00 00     ................
     50c:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     51c:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     52c:	f8 f8 f8 f8 f8 00 00 00 00 00 f8 00 00 00 00 f8     ................
     53c:	00 00 00 00 f8 00 00 00 00 f8 00 00 00 00 00 f8     ................
     54c:	00 00 00 00 00 f8 00 00 00 00 00 00 00 00 00 00     ................
     55c:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     56c:	f8 00 00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     57c:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     58c:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     59c:	f8 00 00 f8 f8 f8 f8 00 00 00 00 00 f8 00 00 00     ................
     5ac:	00 f8 00 00 00 f8 f8 00 00 00 00 00 00 00 00 00     ................
     5bc:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     5cc:	f8 00 f8 00 00 00 f8 00 f8 f8 f8 f8 f8 00 f8 00     ................
     5dc:	00 00 f8 00 f8 00 00 00 f8 00 00 00 00 00 00 00     ................
     5ec:	f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     5fc:	f8 00 f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00     ................
     60c:	00 00 f8 00 f8 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     61c:	00 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     62c:	00 00 f8 00 00 00 00 00 f8 00 00 00 00 00 f8 00     ................
     63c:	00 00 f8 00 00 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     64c:	f8 f8 f8 f8 00 00 f8 00 00 00 f8 00 f8 00 00 00     ................
     65c:	f8 00 f8 00 00 00 f8 00 f8 00 00 00 f8 00 f8 00     ................
     66c:	00 00 f8 00 f8 f8 f8 f8 00 00 00 00 00 00 00 00     ................
     67c:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     68c:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 00 00 f8 00     ................
     69c:	00 00 00 00 f8 f8 f8 f8 f8 00 00 00 00 00 00 00     ................
     6ac:	f8 f8 f8 f8 f8 00 f8 00 00 00 00 00 f8 00 00 00     ................
     6bc:	00 00 f8 f8 f8 f8 00 00 f8 00 00 00 00 00 f8 00     ................
     6cc:	00 00 00 00 f8 00 00 00 00 00 00 00 00 00 00 00     ................

000006dc <font>:
	...
     70c:	00 00 ff 00 00 00 00 ff ff ff 00 00 00 ff ff ff     ................
     71c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     72c:	00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
     73c:	ff ff 00 ff ff 00 ff ff 00 ff ff 00 ff 00 00 ff     ................
	...
     770:	00 00 00 ff 00 ff 00 00 ff ff ff ff ff 00 00 ff     ................
     780:	00 ff 00 00 00 ff 00 ff 00 00 ff ff ff ff ff 00     ................
     790:	00 ff 00 ff 00 00 00 00 00 00 00 00 00 ff 00 00     ................
     7a0:	00 00 00 ff ff ff 00 00 ff 00 00 00 00 00 00 ff     ................
     7b0:	ff 00 00 00 00 00 00 ff 00 00 ff ff ff 00 00 00     ................
     7c0:	00 00 ff 00 00 00 00 00 00 00 00 00 ff ff 00 00     ................
     7d0:	ff 00 ff ff 00 00 ff 00 00 00 00 ff 00 00 00 00     ................
     7e0:	ff 00 00 00 00 ff 00 00 00 00 ff 00 00 ff ff 00     ................
     7f0:	ff 00 00 ff ff 00 00 00 00 00 00 00 00 ff 00 00     ................
     800:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 00 ff     ................
     810:	00 00 00 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 00     ................
     820:	00 ff ff 00 ff 00 00 00 00 00 00 00 00 ff ff 00     ................
     830:	00 00 00 ff ff 00 00 00 00 ff 00 00 00 00 00 00     ................
	...
     85c:	00 00 ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
     86c:	00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff     ................
     87c:	00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
     88c:	00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     89c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     8ac:	ff 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
     8bc:	00 00 00 00 00 00 00 ff 00 ff 00 00 00 ff ff ff     ................
     8cc:	00 00 ff ff ff ff ff 00 00 ff ff ff 00 00 00 ff     ................
     8dc:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     8f4:	ff 00 00 00 00 00 ff 00 00 00 ff ff ff ff ff 00     ................
     904:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     938:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 ff     ................
	...
     95c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
     998:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
     9b4:	00 00 ff 00 00 00 00 ff 00 00 00 00 ff 00 00 00     ................
     9c4:	00 ff 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     9dc:	00 2f 2f 2f 00 00 2f 00 00 00 2f 00 2f 00 00 2f     .///../..././../
     9ec:	2f 00 2f 00 2f 00 2f 00 2f 2f 00 00 2f 00 2f 00     /././././/.././.
     9fc:	00 00 2f 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     ../..///........
     a0c:	00 00 2f 00 00 00 00 2f 2f 00 00 00 00 00 2f 00     ../....//...../.
     a1c:	00 00 00 00 2f 00 00 00 00 00 2f 00 00 00 00 00     ..../...../.....
     a2c:	2f 00 00 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     /....///........
     a3c:	00 2f 2f 2f 00 00 2f 00 00 00 2f 00 00 00 00 00     .///../.../.....
     a4c:	2f 00 00 00 2f 2f 00 00 00 2f 00 00 00 00 2f 00     /...//.../..../.
     a5c:	00 00 00 00 2f 2f 2f 2f 2f 00 00 00 00 00 00 00     ..../////.......
     a6c:	00 2f 2f 2f 00 00 2f 00 00 00 2f 00 00 00 00 00     .///../.../.....
     a7c:	2f 00 00 2f 2f 2f 00 00 00 00 00 00 2f 00 2f 00     /..///.....././.
     a8c:	00 00 2f 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     ../..///........
     a9c:	00 00 00 2f 00 00 00 00 2f 2f 00 00 00 2f 00 2f     .../....//..././
     aac:	00 00 2f 00 00 2f 00 00 2f 2f 2f 2f 2f 00 00 00     ../../../////...
     abc:	00 2f 00 00 00 00 00 2f 00 00 00 00 00 00 00 00     ./...../........
     acc:	2f 2f 2f 2f 2f 00 2f 00 00 00 00 00 2f 00 00 00     /////./...../...
     adc:	00 00 2f 2f 2f 2f 00 00 00 00 00 00 2f 00 2f 00     ..////.....././.
     aec:	00 00 2f 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     ../..///........
     afc:	00 00 2f 2f 00 00 00 2f 00 00 00 00 2f 00 00 00     ..//.../..../...
     b0c:	00 00 2f 2f 2f 2f 00 00 2f 00 00 00 2f 00 2f 00     ..////../..././.
     b1c:	00 00 2f 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     ../..///........
     b2c:	2f 2f 2f 2f 2f 00 00 00 00 00 2f 00 00 00 00 2f     /////...../..../
     b3c:	00 00 00 00 2f 00 00 00 00 2f 00 00 00 00 00 2f     ..../..../...../
     b4c:	00 00 00 00 00 2f 00 00 00 00 00 00 00 00 00 00     ...../..........
     b5c:	00 2f 2f 2f 00 00 2f 00 00 00 2f 00 2f 00 00 00     .///../..././...
     b6c:	2f 00 00 2f 2f 2f 00 00 2f 00 00 00 2f 00 2f 00     /..///../..././.
     b7c:	00 00 2f 00 00 2f 2f 2f 00 00 00 00 00 00 00 00     ../..///........
     b8c:	00 2f 2f 2f 00 00 2f 00 00 00 2f 00 2f 00 00 00     .///../..././...
     b9c:	2f 00 00 2f 2f 2f 2f 00 00 00 00 00 2f 00 00 00     /..////...../...
     bac:	00 2f 00 00 00 2f 2f 00 00 00 00 00 00 00 00 00     ./...//.........
	...
     bc8:	00 ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     bd8:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
     bf8:	00 ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     c08:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 ff     ................
	...
     c20:	ff 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 ff     ................
     c30:	00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00     ................
     c40:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     c58:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     c68:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
     c78:	00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00     ................
     c88:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 ff     ................
     c98:	00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 00 00     ................
     ca8:	00 00 00 00 00 ff ff ff 00 00 ff 00 00 00 ff 00     ................
     cb8:	00 00 00 00 ff 00 00 00 ff ff 00 00 00 00 ff 00     ................
	...
     cd0:	00 00 ff 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
     ce0:	00 00 ff 00 00 00 ff 00 ff 00 ff ff ff 00 ff 00     ................
     cf0:	ff 00 ff 00 ff 00 ff ff ff 00 ff 00 00 00 00 00     ................
     d00:	00 ff ff ff 00 00 00 00 00 00 00 00 00 ff ff ff     ................
     d10:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     d20:	00 00 ff 00 ff ff ff ff ff 00 ff 00 00 00 ff 00     ................
     d30:	ff 00 00 00 ff 00 00 00 00 00 00 00 ff ff ff ff     ................
     d40:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff ff     ................
     d50:	ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     d60:	ff ff ff ff 00 00 00 00 00 00 00 00 00 ff ff ff     ................
     d70:	00 00 ff 00 00 00 ff 00 ff 00 00 00 00 00 ff 00     ................
     d80:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 ff 00     ................
     d90:	00 ff ff ff 00 00 00 00 00 00 00 00 ff ff ff ff     ................
     da0:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     db0:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     dc0:	ff ff ff ff 00 00 00 00 00 00 00 00 ff ff ff ff     ................
     dd0:	ff 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff ff     ................
     de0:	ff ff 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     df0:	ff ff ff ff ff 00 00 00 00 00 00 00 ff ff ff ff     ................
     e00:	ff 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff ff     ................
     e10:	ff ff 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     e20:	ff 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
     e30:	00 00 ff 00 00 00 ff 00 ff 00 00 00 00 00 ff 00     ................
     e40:	ff ff ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     e50:	00 ff ff ff ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     e60:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff ff     ................
     e70:	ff ff ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     e80:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 ff ff ff     ................
     e90:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     ea0:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
     eb0:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ec0:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
     ed0:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     ee0:	00 ff ff ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
     ef0:	ff 00 ff 00 00 ff 00 00 ff 00 ff 00 00 00 ff ff     ................
     f00:	00 00 00 00 ff 00 ff 00 00 00 ff 00 00 ff 00 00     ................
     f10:	ff 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     f20:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     f30:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     f40:	ff ff ff ff ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     f50:	ff 00 ff ff 00 ff ff 00 ff 00 ff 00 ff 00 ff 00     ................
     f60:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     f70:	ff 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     f80:	ff 00 ff ff 00 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
     f90:	00 ff ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     fa0:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 ff ff ff     ................
     fb0:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     fc0:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     fd0:	00 ff ff ff 00 00 00 00 00 00 00 00 ff ff ff ff     ................
     fe0:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff ff     ................
     ff0:	ff ff 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    1000:	ff 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
    1010:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
    1020:	00 00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 00     ................
    1030:	00 ff ff 00 ff 00 00 00 00 00 00 00 ff ff ff ff     ................
    1040:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff ff     ................
    1050:	ff ff 00 00 ff 00 00 ff 00 00 ff 00 00 00 ff 00     ................
    1060:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 ff ff ff     ................
    1070:	00 00 ff 00 00 00 ff 00 ff 00 00 00 00 00 00 ff     ................
    1080:	ff ff 00 00 00 00 00 00 ff 00 ff 00 00 00 ff 00     ................
    1090:	00 ff ff ff 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    10a0:	ff 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    10b0:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    10c0:	00 00 ff 00 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    10d0:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
    10e0:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
    10f0:	00 ff ff ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    1100:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
    1110:	00 00 ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00     ................
    1120:	00 00 ff 00 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    1130:	ff 00 ff 00 00 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    1140:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    1150:	00 ff 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    1160:	ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00 00 00     ................
    1170:	ff 00 00 00 00 ff 00 ff 00 00 ff 00 00 00 ff 00     ................
    1180:	ff 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
    1190:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 00 ff     ................
    11a0:	00 ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    11b0:	00 00 ff 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    11c0:	00 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 ff     ................
    11d0:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    11e0:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 ff ff     ................
    11f0:	00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 ff ff     ................
    1200:	00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00     ................
    1210:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 ff ff     ................
    1220:	00 00 00 ff 00 00 ff 00 ff 00 ff ff 00 ff ff 00     ................
    1230:	ff 00 00 ff ff 00 ff ff 00 ff 00 ff 00 00 ff 00     ................
    1240:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    1250:	00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00     ................
    1260:	00 ff ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
    1270:	00 ff ff 00 00 00 00 00 00 00 00 00                 ............

0000127c <CompressedSong>:
    127c:	a0 00 a1 01 a2 02 12 c7 32 b1 52 a9 d3 12 c5 db     ........2.R.....
    128c:	12 c1 d7 12 c7 32 b1 52 a9 df 12 12 c5 d7 12 c1     .....2.R........
    129c:	d7 12 c0 32 b2 52 a8 df 0c 12 cc 32 c4 df 0c 12     ...2.R.....2....
    12ac:	cc 32 c4 df 13 c1 d7 52 a1 d3 12 b9 db 12 c5 32     .2.....R.......2
    12bc:	bd 52 b9 d7 12 c0 d7 12 c3 52 a8 d7 12 c5 32 bd     .R.......R....2.
    12cc:	d7 52 b9 d7 12 c0 d7 12 c5 32 bd 52 a1 d7 12 bd     .R.......2.R....
    12dc:	d7 12 c0 52 b9 d7 12 c5 32 bd d7 52 a8 df 0c 12     ...R....2..R....
    12ec:	b9 52 b9 df 0c 52 a6 d7 12 b9 db 12 c5 32 c1 52     .R...R.......2.R
    12fc:	b9 d7 12 b9 d7 12 be 52 a1 d7 12 c5 32 c1 d7 52     .......R....2..R
    130c:	b9 d7 12 b9 d7 12 c5 32 c1 52 a6 d7 12 b9 d7 12     .......2.R......
    131c:	be 52 b9 d7 12 c5 32 c1 d7 52 a1 df 0c 12 b9 52     .R....2..R.....R
    132c:	b9 df 0c 52 9f db 12 b7 d7 12 c3 32 bb 52 b7 d7     ...R.......2.R..
    133c:	12 be d7 12 c1 52 a6 d7 12 c3 32 bb d7 52 b7 d7     .....R....2..R..
    134c:	12 be d7 12 c3 32 bb 52 9f d7 12 bb d7 12 be 52     .....2.R.......R
    135c:	b7 d7 12 c3 32 bb d7 52 a6 df 0c 12 b7 52 b7 df     ....2..R.....R..
    136c:	0c 52 a4 d7 12 b7 db 12 c3 32 bc 52 b7 d3 12 bc     .R.......2.R....
    137c:	db 12 c0 52 9f d7 12 c3 32 bc d7 52 b7 d7 12 bc     ...R....2..R....
    138c:	d7 12 c3 32 b4 52 a4 df 0c 12 c3 32 b4 52 a4 df     ...2.R.....2.R..
    139c:	0c 12 c2 32 b3 52 a3 df 0c 12 c1 32 b2 52 a2 df     ...2.R.....2.R..
    13ac:	0d 52 a1 d3 12 b9 db 12 c5 32 bd 52 b9 d3 12 c0     .R.......2.R....
    13bc:	db 12 c3 52 a8 d7 12 c5 32 bd d7 52 b9 d7 12 c0     ...R....2..R....
    13cc:	d7 12 c5 32 bd 52 a1 d7 12 bd d7 12 c0 52 b9 d7     ...2.R.......R..
    13dc:	12 c5 32 bd d7 52 a8 df 0c 12 b9 52 b9 df 0c 52     ..2..R.....R...R
    13ec:	a6 d7 12 b9 d7 12 c5 32 c1 52 b9 db 12 b9 d7 12     .......2.R......
    13fc:	be 52 a1 d7 12 c5 32 c1 d7 52 b9 d7 12 b9 d7 12     .R....2..R......
    140c:	c5 32 c1 52 a6 d7 12 b9 d7 12 be 52 b9 d7 12 c5     .2.R.......R....
    141c:	32 c1 d7 52 a1 df 0c 12 b9 52 b9 df 0c 52 9f d7     2..R.....R...R..
    142c:	12 bb db 12 c7 32 c1 52 b7 d3 12 bb d7 12 be 52     .....2.R.......R
    143c:	a6 db 12 c7 32 c1 d7 52 b7 d7 12 bb d7 12 c7 32     ....2..R.......2
    144c:	c1 52 9f d7 12 bb d7 12 be 52 b7 d7 12 c7 32 c1     .R.......R....2.
    145c:	d7 52 a6 df 0c 12 bb 52 b7 df 0c 52 a4 d7 12 bc     .R.....R...R....
    146c:	db 12 c8 32 c0 52 b7 d3 12 b7 32 bc db 52 9f d3     ...2.R....2..R..
    147c:	12 c3 32 bc db 12 c5 32 bc 52 b7 d7 12 c7 32 be     ..2....2.R....2.
    148c:	d7 12 c8 32 c0 52 a4 df 0c 12 c7 32 be 52 9f df     ...2.R.....2.R..
    149c:	0c 12 c8 32 c0 52 a4 df 0c 32 b4 52 a4 df 0c 12     ...2.R...2.R....
    14ac:	cc 52 a4 df 0c 32 b4 52 b7 df 0c 12 c8 52 a8 df     .R...2.R.....R..
    14bc:	0d 32 b4 52 b7 d3 12 c3 db 12 c5 52 a9 d7 12 c8     .2.R.......R....
    14cc:	d7 32 b5 52 b9 d7 12 c8 d7 52 aa df 0c 32 b6 52     .2.R.....R...2.R
    14dc:	b9 d7 12 c5 d7 12 c3 52 a8 df 0c 12 c8 32 b4 52     .......R.....2.R
    14ec:	b7 df 0c 12 c8 52 a7 df 0d 12 cf 32 b4 52 b7 df     .....R.....2.R..
    14fc:	0c 12 cc 52 a6 df 0c 32 b5 52 b9 d7 12 ca d7 52     ...R...2.R.....R
    150c:	9f df 0c 32 b5 52 b7 d7 12 c3 d7 12 cc 52 a4 df     ...2.R.......R..
    151c:	0c 32 b4 52 b7 df 0c 12 c8 52 a8 df 0c 32 b4 52     .2.R.....R...2.R
    152c:	b7 db 12 c3 d3 12 c5 52 a9 d7 12 c8 db 32 b5 52     .......R.....2.R
    153c:	b9 d7 12 c8 d7 52 aa df 0c 32 b6 52 b9 d7 12 c5     .....R...2.R....
    154c:	d7 12 c3 52 a6 df 0c 12 c8 32 b5 52 b9 df 0c 12     ...R.....2.R....
    155c:	cd 52 ab d7 12 cc db 12 ca 32 b7 52 bb d3 12 c8     .R.......2.R....
    156c:	db 52 a4 df 0c 32 b4 52 b7 df 0c 52 a4 df 0c 32     .R...2.R...R...2
    157c:	b4 52 b7 df 0c 12 cc 52 a4 df 0c 32 b4 52 b7 df     .R.....R...2.R..
    158c:	0c 12 c8 52 a8 df 0c 32 b4 52 b7 d7 12 c3 d7 12     ...R...2.R......
    159c:	c5 52 a9 d7 12 c8 db 32 b5 52 b9 d3 12 c8 db 52     .R.....2.R.....R
    15ac:	aa df 0c 32 b6 52 b9 d7 12 c5 d7 12 c3 52 a8 df     ...2.R.......R..
    15bc:	0c 12 c8 32 b4 52 b7 df 0c 12 c8 52 a7 df 0c 12     ...2.R.....R....
    15cc:	cf 32 b4 52 b7 df 0c 12 cc 52 a6 df 0d 32 b5 52     .2.R.....R...2.R
    15dc:	b9 d7 12 ca d3 52 9f df 0d 32 b5 52 b7 d7 12 c3     .....R...2.R....
    15ec:	d7 12 cc 52 a4 df 0c 32 b4 52 b7 df 0c 12 c8 52     ...R...2.R.....R
    15fc:	a8 df 0c 32 b4 52 b7 d7 12 c3 d7 12 c5 52 a9 d7     ...2.R.......R..
    160c:	12 c8 d7 32 b5 52 b9 d7 12 c8 d7 52 aa df 0d 32     ...2.R.....R...2
    161c:	b6 52 b9 d7 12 c5 d7 12 c3 52 a6 df 0c 12 c8 32     .R.......R.....2
    162c:	b5 52 b9 df 0c 12 cd 52 ab d7 12 cc d7 12 ca 32     .R.....R.......2
    163c:	b7 52 bb d7 12 c8 d7 52 a4 df 0d 32 b4 52 b7 df     .R.....R...2.R..
    164c:	0c 52 a4 df 0c 32 b4 52 b7 df 0c 12 cc 52 a9 df     .R...2.R.....R..
    165c:	0c 32 b5 52 b9 d7 12 c8 d7 52 a9 df 0c 12 c3 32     .2.R.....R.....2
    166c:	b5 52 b9 df 0c 12 cc 52 a8 df 0c 32 b4 52 b7 d7     .R.....R...2.R..
    167c:	12 c8 db 52 a8 df 0c 32 b4 52 b7 df 0c 12 cb 52     ...R...2.R.....R
    168c:	a7 d7 12 c8 d7 12 c3 32 b3 52 b7 df 0c 12 cb 52     .......2.R.....R
    169c:	a7 df 0c 32 b3 52 b7 d7 12 ca d7 52 a6 df 0c 32     ...2.R.....R...2
    16ac:	b5 52 b9 df 0c 52 9f df 0d 32 b5 52 b7 df 0c 12     .R...R...2.R....
    16bc:	cc 52 a9 df 0c 32 b5 52 b9 d7 12 c8 d7 52 a9 df     .R...2.R.....R..
    16cc:	0c 12 c3 32 b5 52 b9 df 0c 12 cc 52 a8 df 0c 32     ...2.R.....R...2
    16dc:	b4 52 b7 d7 12 c8 d7 52 a8 df 0c 32 b4 52 b7 df     .R.....R...2.R..
    16ec:	0d 12 cb 52 a7 d7 12 c8 d7 12 c3 32 b3 52 b7 df     ...R.......2.R..
    16fc:	0c 12 cf 52 a7 df 0c 32 b3 52 b7 df 0c 52 a6 df     ...R...2.R...R..
    170c:	0c 32 b5 52 b9 df 0d 52 9f df 0c 32 b5 52 b7 df     .2.R...R...2.R..
    171c:	0c 12 cc 52 a4 df 0c 32 b4 52 b7 df 0c 12 c8 52     ...R...2.R.....R
    172c:	a4 df 0c 32 b4 52 b7 d7 12 c3 d7 12 c5 52 a2 d7     ...2.R.......R..
    173c:	12 c8 d7 32 b5 52 b7 d7 12 c8 d7 52 a2 df 0d 32     ...2.R.....R...2
    174c:	b5 52 b7 d3 12 ca db 12 cc 52 a1 d3 12 c8 db 12     .R.......R......
    175c:	c3 32 b4 52 b7 df 0c 12 c5 52 a1 df 0c 32 b4 52     .2.R.....R...2.R
    176c:	b7 d7 12 c8 d7 52 a0 df 0c 32 b3 52 b6 df 0c 52     .....R...2.R...R
    177c:	a0 df 0c 32 b3 52 b6 db 12 c5 d7 12 cf 32 b5 52     ...2.R.......2.R
    178c:	9f df 0b 12 d1 df 0d 12 cf df 0c 12 d1 df 0c 12     ................
    179c:	cf df 12 12 c3 d7 12 cd 52 a1 d7 12 cc d7 12 ca     ........R.......
    17ac:	52 a3 df 0c 12 c8 52 a4 df 0d 32 bc 52 b7 d7 32     R.....R...2.R..2
    17bc:	b4 d7 52 a4 d7 32 bc d7 32 b4 52 b7 df 0c 32 bc     ..R..2..2.R...2.
    17cc:	52 a4 d7 32 b4 d7 52 b7 d7 32 bc d7 52 a4 df 0c     R..2..R..2..R...
    17dc:	52 b7 df 08 c0 d7 52 a1 d3 12 b9 db 12 c5 32 bd     R.....R.......2.
    17ec:	52 b9 d7 12 c0 d7 12 c3 52 a8 d7 12 c5 32 bd d7     R.......R....2..
    17fc:	52 b9 d7 12 c0 d7 12 c5 32 bd 52 a1 d7 12 bd d7     R.......2.R.....
    180c:	12 c0 52 b9 d7 12 c5 32 bd d7 52 a8 df 0c 12 b9     ..R....2..R.....
    181c:	52 b9 df 0c 52 a6 d7 12 b9 db 12 c5 32 c1 52 b9     R...R.......2.R.
    182c:	d7 12 b9 d7 12 be 52 a1 d7 12 c5 32 c1 d7 52 b9     ......R....2..R.
    183c:	d7 12 b9 d7 12 c5 32 c1 52 a6 d7 12 b9 d7 12 be     ......2.R.......
    184c:	52 b9 d7 12 c5 32 c1 d7 52 a1 df 0c 12 b9 52 b9     R....2..R.....R.
    185c:	df 0c 52 9f db 12 b7 d7 12 c3 32 bb 52 b7 d7 12     ..R.......2.R...
    186c:	be d7 12 c1 52 a6 d7 12 c3 32 bb d7 52 b7 d7 12     ....R....2..R...
    187c:	be d7 12 c3 32 bb 52 9f d7 12 bb d7 12 be 52 b7     ....2.R.......R.
    188c:	d7 12 c3 32 bb d7 52 a6 df 0c 12 b7 52 b7 df 0c     ...2..R.....R...
    189c:	52 a4 d7 12 b7 db 12 c3 32 bc 52 b7 d3 12 bc db     R.......2.R.....
    18ac:	12 c0 52 9f d7 12 c3 32 bc d7 52 b7 d7 12 bc d7     ..R....2..R.....
    18bc:	12 c3 32 b4 52 a4 df 0c 12 c3 32 b4 52 a4 df 0c     ..2.R.....2.R...
    18cc:	12 c2 32 b3 52 a3 df 0c 12 c1 32 b2 52 a2 df 0d     ..2.R.....2.R...
    18dc:	52 a1 d3 12 b9                                      R....

000018e1 <bass_gameover>:
    18e1:	00 02 08 00 0a 01 00 09 40 00 07 34 00 06 00 01     ........@..4....
    18f1:	00 f8 0a ff 00                                      .....

000018f6 <bass_title>:
    18f6:	00 02 04 00 0a de 00 09 80 00 07 21 00 06 00 01     ...........!....
    1906:	00 ff 02 00 fe 00 02 08 0e ff 00                    ...........

00001911 <lead_title>:
    1911:	00 02 04 00 0a de 00 09 80 00 07 1c 00 06 00 01     ................
    1921:	00 fe 00 02 08 0e ff 00                             ........

00001929 <noise_bass_drum>:
    1929:	00 01 12 00 07 2e 00 00 fc 01 01 17 01 01 12 01     ................
    1939:	00 f4 00 ff                                         ....

0000193d <noise_crash_cymbal>:
    193d:	00 01 02 00 07 22 00 00 ff 01 01 01 01 01 02 02     ....."..........
    194d:	01 01 05 00 fe 40 ff                                .....@.

00001954 <patches>:
    1954:	00 00 00 11 19 00 00 00 00 00 00 00 f6 18 00 00     ................
    1964:	00 00 00 00 00 e1 18 00 00 00 00 01 00 00 29 19     ..............).
    1974:	00 00 00 00 01 00 00 3d 19 00 00 00 00              .......=.....

00001981 <fileName>:
    1981:	53 44 5f 4d 55 53 49 43 44 41 54 00                 SD_MUSICDAT.

0000198d <__c.2228>:
    198d:	46 49 4c 45 20 53 44 5f 4d 55 53 49 43 2e 44 41     FILE SD_MUSIC.DA
    199d:	54 20 4e 4f 54 20 46 4f 55 4e 44 20 4f 4e 20 53     T NOT FOUND ON S
    19ad:	44 20 43 41 52 44 00                                D CARD.

000019b4 <__c.2230>:
    19b4:	46 4f 55 4e 44 20 53 44 5f 4d 55 53 49 43 2e 44     FOUND SD_MUSIC.D
    19c4:	41 54 00                                            AT.

000019c7 <__c.2239>:
    19c7:	53 4f 4e 47 50 4f 53 20 20 3a 00                    SONGPOS  :.

000019d2 <__c.2241>:
    19d2:	4c 4f 4f 50 53 54 41 52 54 3a 00                    LOOPSTART:.

000019dd <__c.2243>:
    19dd:	4c 4f 4f 50 45 4e 44 20 20 3a 00                    LOOPEND  :.

000019e8 <__c.2245>:
    19e8:	42 55 46 46 45 52 45 44 20 3a 00                    BUFFERED :.

000019f3 <__c.2247>:
    19f3:	43 41 50 41 43 49 54 59 20 3a 00                    CAPACITY :.

000019fe <__ctors_end>:
    19fe:	11 24       	eor	r1, r1
    1a00:	1f be       	out	0x3f, r1	; 63
    1a02:	cf ef       	ldi	r28, 0xFF	; 255
    1a04:	d0 e1       	ldi	r29, 0x10	; 16
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	cd bf       	out	0x3d, r28	; 61

00001a0a <__do_clear_bss>:
    1a0a:	28 e0       	ldi	r18, 0x08	; 8
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b1 e0       	ldi	r27, 0x01	; 1
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <.do_clear_bss_start>

00001a12 <.do_clear_bss_loop>:
    1a12:	1d 92       	st	X+, r1

00001a14 <.do_clear_bss_start>:
    1a14:	a1 34       	cpi	r26, 0x41	; 65
    1a16:	b2 07       	cpc	r27, r18
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <.do_clear_bss_loop>

00001a1a <wdt_init>:
	  if (j == count) {
		 WriteEeprom(i*EEPROM_BLOCK_SIZE,(u8)EEPROM_FREE_BLOCK);
		 WriteEeprom(i*EEPROM_BLOCK_SIZE+1,(u8)(EEPROM_FREE_BLOCK>>8));
	  }
   }
}
    1a1a:	14 be       	out	0x34, r1	; 52
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	a8 95       	wdr
    1a22:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1a26:	88 61       	ori	r24, 0x18	; 24
    1a28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1a2c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1a30:	0f be       	out	0x3f, r0	; 63

00001a32 <Initialize>:
    1a32:	0e 94 88 10 	call	0x2110	; 0x2110 <isEepromFormatted>
    1a36:	81 11       	cpse	r24, r1
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <Initialize+0xc>
    1a3a:	0e 94 66 10 	call	0x20cc	; 0x20cc <FormatEeprom>
    1a3e:	f8 94       	cli
    1a40:	e9 e7       	ldi	r30, 0x79	; 121
    1a42:	f5 e0       	ldi	r31, 0x05	; 5
    1a44:	80 e8       	ldi	r24, 0x80	; 128
    1a46:	81 93       	st	Z+, r24
    1a48:	27 e0       	ldi	r18, 0x07	; 7
    1a4a:	e5 38       	cpi	r30, 0x85	; 133
    1a4c:	f2 07       	cpc	r31, r18
    1a4e:	d9 f7       	brne	.-10     	; 0x1a46 <Initialize+0x14>
    1a50:	89 e7       	ldi	r24, 0x79	; 121
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	90 93 86 07 	sts	0x0786, r25	; 0x800786 <mix_pos+0x1>
    1a58:	80 93 85 07 	sts	0x0785, r24	; 0x800785 <mix_pos>
    1a5c:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <mix_bank>
    1a60:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <mixer>
    1a64:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <tr2_vol>
    1a68:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <tr3_vol>
    1a6c:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <tr4_vol>
    1a70:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <sync_phase>
    1a74:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <sync_flags>
    1a78:	82 e1       	ldi	r24, 0x12	; 18
    1a7a:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <sync_pulse>
    1a7e:	80 ee       	ldi	r24, 0xE0	; 224
    1a80:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <render_lines_count>
    1a84:	84 e1       	ldi	r24, 0x14	; 20
    1a86:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <first_render_line>
    1a8a:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <joypad1_status_hi+0x1>
    1a8e:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <joypad1_status_hi>
    1a92:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <joypad2_status_hi+0x1>
    1a96:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <joypad2_status_hi>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <sound_enabled>
    1aa0:	0e 94 01 1b 	call	0x3602	; 0x3602 <InitializeVideoMode>
    1aa4:	80 e9       	ldi	r24, 0x90	; 144
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	25 91       	lpm	r18, Z+
    1aac:	34 91       	lpm	r19, Z
    1aae:	f9 01       	movw	r30, r18
    1ab0:	ff 27       	eor	r31, r31
    1ab2:	30 83       	st	Z, r19
    1ab4:	02 96       	adiw	r24, 0x02	; 2
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	8e 3b       	cpi	r24, 0xBE	; 190
    1aba:	92 07       	cpc	r25, r18
    1abc:	a9 f7       	brne	.-22     	; 0x1aa8 <Initialize+0x76>
    1abe:	78 94       	sei
    1ac0:	0e 94 00 1b 	call	0x3600	; 0x3600 <DisplayLogo>
    1ac4:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <main>
    1ac8:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <_exit>

00001acc <__bad_interrupt>:
    1acc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ad0 <sub_video_mode5>:
	brne .-4 ;~1 us
	nop
	sbiw r24,1
	brne WaitUs

	ret
    1ad0:	e0 ee       	ldi	r30, 0xE0	; 224
    1ad2:	ea 95       	dec	r30
    1ad4:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <sub_video_mode5+0x8>
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <sub_video_mode5+0x2>
    1ada:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <sub_video_mode5+0xe>
    1ade:	c0 e0       	ldi	r28, 0x00	; 0
    1ae0:	d1 e0       	ldi	r29, 0x01	; 1
    1ae2:	a0 90 6c 05 	lds	r10, 0x056C	; 0x80056c <render_lines_count>
    1ae6:	66 27       	eor	r22, r22
    1ae8:	76 e0       	ldi	r23, 0x06	; 6

00001aea <next_text_line>:
    1aea:	3d d1       	rcall	.+634    	; 0x1d66 <hsync_pulse>
    1aec:	3a e2       	ldi	r19, 0x2A	; 42
    1aee:	3a 95       	dec	r19
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <next_text_line+0x4>
    1af2:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <render_tile_line>
    1af6:	30 e1       	ldi	r19, 0x10	; 16
    1af8:	3a 95       	dec	r19
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <next_text_line+0xe>
    1afc:	aa 94       	dec	r10
    1afe:	89 f0       	breq	.+34     	; 0x1b22 <text_frame_end>
    1b00:	c8 95       	lpm
    1b02:	63 95       	inc	r22
    1b04:	68 30       	cpi	r22, 0x08	; 8
    1b06:	29 f0       	breq	.+10     	; 0x1b12 <next_text_row>
    1b08:	c8 95       	lpm
    1b0a:	c8 95       	lpm
    1b0c:	c8 95       	lpm
    1b0e:	00 00       	nop
    1b10:	ec cf       	rjmp	.-40     	; 0x1aea <next_text_line>

00001b12 <next_text_row>:
    1b12:	66 27       	eor	r22, r22
    1b14:	00 24       	eor	r0, r0
    1b16:	38 e2       	ldi	r19, 0x28	; 40
    1b18:	c3 0f       	add	r28, r19
    1b1a:	d0 1d       	adc	r29, r0
    1b1c:	c8 95       	lpm
    1b1e:	00 00       	nop
    1b20:	e4 cf       	rjmp	.-56     	; 0x1aea <next_text_line>

00001b22 <text_frame_end>:
    1b22:	35 e0       	ldi	r19, 0x05	; 5
    1b24:	3a 95       	dec	r19
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <text_frame_end+0x2>
    1b28:	00 c0       	rjmp	.+0      	; 0x1b2a <text_frame_end+0x8>
    1b2a:	1d d1       	rcall	.+570    	; 0x1d66 <hsync_pulse>
    1b2c:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <sync_flags>
    1b30:	42 e0       	ldi	r20, 0x02	; 2
    1b32:	e1 60       	ori	r30, 0x01	; 1
    1b34:	e4 27       	eor	r30, r20
    1b36:	e0 93 66 05 	sts	0x0566, r30	; 0x800566 <sync_flags>
    1b3a:	e2 e0       	ldi	r30, 0x02	; 2
    1b3c:	e0 93 36 00 	sts	0x0036, r30	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
    1b40:	08 95       	ret

00001b42 <render_tile_line>:
    1b42:	de 01       	movw	r26, r28
    1b44:	10 e3       	ldi	r17, 0x30	; 48
    1b46:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <tile_table_lo>
    1b4a:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <tile_table_hi>
    1b4e:	67 9f       	mul	r22, r23
    1b50:	80 0d       	add	r24, r0
    1b52:	91 1d       	adc	r25, r1
    1b54:	4d 91       	ld	r20, X+
    1b56:	41 9f       	mul	r20, r17
    1b58:	08 0e       	add	r0, r24
    1b5a:	19 1e       	adc	r1, r25
    1b5c:	f0 01       	movw	r30, r0
    1b5e:	28 e2       	ldi	r18, 0x28	; 40

00001b60 <mode5_loop>:
    1b60:	05 91       	lpm	r16, Z+
    1b62:	08 b9       	out	0x08, r16	; 8
    1b64:	4d 91       	ld	r20, X+
    1b66:	05 91       	lpm	r16, Z+
    1b68:	08 b9       	out	0x08, r16	; 8
    1b6a:	41 9f       	mul	r20, r17
    1b6c:	05 91       	lpm	r16, Z+
    1b6e:	08 b9       	out	0x08, r16	; 8
    1b70:	ac 01       	movw	r20, r24
    1b72:	40 0d       	add	r20, r0
    1b74:	05 91       	lpm	r16, Z+
    1b76:	08 b9       	out	0x08, r16	; 8
    1b78:	51 1d       	adc	r21, r1
    1b7a:	00 00       	nop
    1b7c:	05 91       	lpm	r16, Z+
    1b7e:	08 b9       	out	0x08, r16	; 8
    1b80:	05 91       	lpm	r16, Z+
    1b82:	fa 01       	movw	r30, r20
    1b84:	2a 95       	dec	r18
    1b86:	08 b9       	out	0x08, r16	; 8
    1b88:	59 f7       	brne	.-42     	; 0x1b60 <mode5_loop>
    1b8a:	00 c0       	rjmp	.+0      	; 0x1b8c <mode5_loop+0x2c>
    1b8c:	00 00       	nop
    1b8e:	00 27       	eor	r16, r16
    1b90:	08 b9       	out	0x08, r16	; 8
    1b92:	08 95       	ret

00001b94 <__vector_13>:
    1b94:	0f 92       	push	r0
    1b96:	1f 92       	push	r1
    1b98:	ef 93       	push	r30
    1b9a:	ff 93       	push	r31
    1b9c:	ef b7       	in	r30, 0x3f	; 63
    1b9e:	ef 93       	push	r30
    1ba0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1ba4:	e2 51       	subi	r30, 0x12	; 18
    1ba6:	f1 e0       	ldi	r31, 0x01	; 1

00001ba8 <latency_loop>:
    1ba8:	ef 17       	cp	r30, r31
    1baa:	00 f0       	brcs	.+0      	; 0x1bac <latency_loop+0x4>
    1bac:	f3 95       	inc	r31
    1bae:	fa 30       	cpi	r31, 0x0A	; 10
    1bb0:	d8 f3       	brcs	.-10     	; 0x1ba8 <latency_loop>
    1bb2:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <latency_loop+0xe>
    1bb6:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <sync_pulse>
    1bba:	ea 95       	dec	r30
    1bbc:	e0 93 65 05 	sts	0x0565, r30	; 0x800565 <sync_pulse>
    1bc0:	f0 91 64 05 	lds	r31, 0x0564	; 0x800564 <sync_phase>
    1bc4:	f0 fd       	sbrc	r31, 0
    1bc6:	57 c0       	rjmp	.+174    	; 0x1c76 <sync_hsync>
    1bc8:	ec 30       	cpi	r30, 0x0C	; 12
    1bca:	98 f0       	brcs	.+38     	; 0x1bf2 <sync_eq>
    1bcc:	f3 e0       	ldi	r31, 0x03	; 3
    1bce:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1bd2:	fd e8       	ldi	r31, 0x8D	; 141
    1bd4:	f0 93 88 00 	sts	0x0088, r31	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1bd8:	e0 fb       	bst	r30, 0
    1bda:	28 98       	cbi	0x05, 0	; 5
    1bdc:	26 f4       	brtc	.+8      	; 0x1be6 <sync_pre_eq_no_sound_update>
    1bde:	e1 e0       	ldi	r30, 0x01	; 1
    1be0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <update_sound>
    1be4:	b9 c0       	rjmp	.+370    	; 0x1d58 <sync_end>

00001be6 <sync_pre_eq_no_sound_update>:
    1be6:	e5 e1       	ldi	r30, 0x15	; 21
    1be8:	ea 95       	dec	r30
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <sync_pre_eq_no_sound_update+0x2>
    1bec:	00 00       	nop
    1bee:	28 9a       	sbi	0x05, 0	; 5
    1bf0:	b3 c0       	rjmp	.+358    	; 0x1d58 <sync_end>

00001bf2 <sync_eq>:
    1bf2:	e6 30       	cpi	r30, 0x06	; 6
    1bf4:	38 f1       	brcs	.+78     	; 0x1c44 <sync_post_eq>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <sync_eq+0x6>
    1bf8:	00 c0       	rjmp	.+0      	; 0x1bfa <sync_eq+0x8>
    1bfa:	28 98       	cbi	0x05, 0	; 5
    1bfc:	e0 fb       	bst	r30, 0
    1bfe:	e4 e0       	ldi	r30, 0x04	; 4
    1c00:	16 f4       	brtc	.+4      	; 0x1c06 <sync_eq_skip>
    1c02:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <update_sound>

00001c06 <sync_eq_skip>:
    1c06:	e4 e0       	ldi	r30, 0x04	; 4
    1c08:	e0 93 36 00 	sts	0x0036, r30	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
    1c0c:	e6 e0       	ldi	r30, 0x06	; 6
    1c0e:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c12:	a2 c0       	rjmp	.+324    	; 0x1d58 <sync_end>

00001c14 <__vector_14>:
    1c14:	ef 93       	push	r30
    1c16:	ef b7       	in	r30, 0x3f	; 63
    1c18:	ef 93       	push	r30
    1c1a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1c1e:	ed 55       	subi	r30, 0x5D	; 93
    1c20:	e1 30       	cpi	r30, 0x01	; 1
    1c22:	00 f0       	brcs	.+0      	; 0x1c24 <__vector_14+0x10>
    1c24:	e2 30       	cpi	r30, 0x02	; 2
    1c26:	00 f0       	brcs	.+0      	; 0x1c28 <__vector_14+0x14>
    1c28:	e3 30       	cpi	r30, 0x03	; 3
    1c2a:	00 f0       	brcs	.+0      	; 0x1c2c <__vector_14+0x18>
    1c2c:	e4 30       	cpi	r30, 0x04	; 4
    1c2e:	00 f0       	brcs	.+0      	; 0x1c30 <__vector_14+0x1c>
    1c30:	e5 30       	cpi	r30, 0x05	; 5
    1c32:	00 f0       	brcs	.+0      	; 0x1c34 <__vector_14+0x20>
    1c34:	28 9a       	sbi	0x05, 0	; 5
    1c36:	e2 e0       	ldi	r30, 0x02	; 2
    1c38:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c3c:	ef 91       	pop	r30
    1c3e:	ef bf       	out	0x3f, r30	; 63
    1c40:	ef 91       	pop	r30
    1c42:	18 95       	reti

00001c44 <sync_post_eq>:
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <sync_post_eq+0x2>
    1c46:	e0 fb       	bst	r30, 0
    1c48:	28 98       	cbi	0x05, 0	; 5
    1c4a:	26 f4       	brtc	.+8      	; 0x1c54 <sync_post_eq_no_sound_update>
    1c4c:	e1 e0       	ldi	r30, 0x01	; 1
    1c4e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <update_sound>
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <sync_pre_eq_cont>

00001c54 <sync_post_eq_no_sound_update>:
    1c54:	e5 e1       	ldi	r30, 0x15	; 21
    1c56:	ea 95       	dec	r30
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <sync_post_eq_no_sound_update+0x2>
    1c5a:	00 00       	nop
    1c5c:	28 9a       	sbi	0x05, 0	; 5

00001c5e <sync_pre_eq_cont>:
    1c5e:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <sync_pulse>
    1c62:	e0 30       	cpi	r30, 0x00	; 0
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <sync_pre_eq_cont+0xa>
    1c66:	78 c0       	rjmp	.+240    	; 0x1d58 <sync_end>
    1c68:	ed ef       	ldi	r30, 0xFD	; 253
    1c6a:	e0 93 65 05 	sts	0x0565, r30	; 0x800565 <sync_pulse>
    1c6e:	e1 e0       	ldi	r30, 0x01	; 1
    1c70:	e0 93 64 05 	sts	0x0564, r30	; 0x800564 <sync_phase>
    1c74:	71 c0       	rjmp	.+226    	; 0x1d58 <sync_end>

00001c76 <sync_hsync>:
    1c76:	e7 e0       	ldi	r30, 0x07	; 7
    1c78:	e0 93 89 00 	sts	0x0089, r30	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1c7c:	eb e1       	ldi	r30, 0x1B	; 27
    1c7e:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <sync_hsync+0xe>
    1c84:	28 98       	cbi	0x05, 0	; 5
    1c86:	e2 e0       	ldi	r30, 0x02	; 2
    1c88:	00 c0       	rjmp	.+0      	; 0x1c8a <sync_hsync+0x14>
    1c8a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <update_sound>
    1c8e:	fd ef       	ldi	r31, 0xFD	; 253
    1c90:	00 90 6b 05 	lds	r0, 0x056B	; 0x80056b <first_render_line>
    1c94:	f0 19       	sub	r31, r0
    1c96:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <sync_pulse>
    1c9a:	ef 17       	cp	r30, r31
    1c9c:	e0 f4       	brcc	.+56     	; 0x1cd6 <no_render>
    1c9e:	fd ef       	ldi	r31, 0xFD	; 253
    1ca0:	00 90 6b 05 	lds	r0, 0x056B	; 0x80056b <first_render_line>
    1ca4:	f0 19       	sub	r31, r0
    1ca6:	00 90 6c 05 	lds	r0, 0x056C	; 0x80056c <render_lines_count>
    1caa:	f0 19       	sub	r31, r0
    1cac:	ef 17       	cp	r30, r31
    1cae:	98 f0       	brcs	.+38     	; 0x1cd6 <no_render>
    1cb0:	ed e1       	ldi	r30, 0x1D	; 29
    1cb2:	ff 27       	eor	r31, r31

00001cb4 <push_loop>:
    1cb4:	00 80       	ld	r0, Z
    1cb6:	0f 92       	push	r0
    1cb8:	ea 95       	dec	r30
    1cba:	e1 f7       	brne	.-8      	; 0x1cb4 <push_loop>
    1cbc:	0f e1       	ldi	r16, 0x1F	; 31
    1cbe:	0a 95       	dec	r16
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <push_loop+0xa>
    1cc2:	00 00       	nop
    1cc4:	00 00       	nop
    1cc6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <sub_video_mode5>
    1cca:	e1 e0       	ldi	r30, 0x01	; 1
    1ccc:	ff 27       	eor	r31, r31

00001cce <pop_loop>:
    1cce:	0f 90       	pop	r0
    1cd0:	01 92       	st	Z+, r0
    1cd2:	ee 31       	cpi	r30, 0x1E	; 30
    1cd4:	e0 f3       	brcs	.-8      	; 0x1cce <pop_loop>

00001cd6 <no_render>:
    1cd6:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <sync_pulse>
    1cda:	e0 30       	cpi	r30, 0x00	; 0
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <no_render+0xa>
    1cde:	3c c0       	rjmp	.+120    	; 0x1d58 <sync_end>
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	4f 93       	push	r20
    1ce6:	5f 93       	push	r21
    1ce8:	6f 93       	push	r22
    1cea:	7f 93       	push	r23
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	af 93       	push	r26
    1cf2:	bf 93       	push	r27
    1cf4:	78 94       	sei
    1cf6:	11 24       	eor	r1, r1
    1cf8:	ee 27       	eor	r30, r30
    1cfa:	e0 93 64 05 	sts	0x0564, r30	; 0x800564 <sync_phase>
    1cfe:	e2 e1       	ldi	r30, 0x12	; 18
    1d00:	e0 93 65 05 	sts	0x0565, r30	; 0x800565 <sync_pulse>
    1d04:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <vsync_counter>
    1d08:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <vsync_counter+0x1>
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <vsync_counter>
    1d12:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <vsync_counter+0x1>
    1d16:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <pre_vsync_user_callback>
    1d1a:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <pre_vsync_user_callback+0x1>
    1d1e:	e1 15       	cp	r30, r1
    1d20:	f1 05       	cpc	r31, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <no_render+0x50>
    1d24:	09 95       	icall
    1d26:	0e 94 56 10 	call	0x20ac	; 0x20ac <ReadControllers>
    1d2a:	0e 94 02 1b 	call	0x3604	; 0x3604 <VideoModeVsync>
    1d2e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <process_music>
    1d32:	11 24       	eor	r1, r1
    1d34:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <post_vsync_user_callback>
    1d38:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <post_vsync_user_callback+0x1>
    1d3c:	e1 15       	cp	r30, r1
    1d3e:	f1 05       	cpc	r31, r1
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <no_render+0x6e>
    1d42:	09 95       	icall
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	7f 91       	pop	r23
    1d4e:	6f 91       	pop	r22
    1d50:	5f 91       	pop	r21
    1d52:	4f 91       	pop	r20
    1d54:	3f 91       	pop	r19
    1d56:	2f 91       	pop	r18

00001d58 <sync_end>:
    1d58:	ef 91       	pop	r30
    1d5a:	ef bf       	out	0x3f, r30	; 63
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	1f 90       	pop	r1
    1d62:	0f 90       	pop	r0
    1d64:	18 95       	reti

00001d66 <hsync_pulse>:
    1d66:	28 98       	cbi	0x05, 0	; 5
    1d68:	e2 e0       	ldi	r30, 0x02	; 2
    1d6a:	00 c0       	rjmp	.+0      	; 0x1d6c <hsync_pulse+0x6>
    1d6c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <update_sound>
    1d70:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <sync_pulse>
    1d74:	ea 95       	dec	r30
    1d76:	e0 93 65 05 	sts	0x0565, r30	; 0x800565 <sync_pulse>
    1d7a:	08 95       	ret

00001d7c <process_music>:
;*****************************
.section .text.EnableSoundEngine
EnableSoundEngine:	
	ldi r24,1
	sts sound_enabled,r24
	ret
    1d7c:	e0 91 89 07 	lds	r30, 0x0789	; 0x800789 <sound_enabled>
    1d80:	e0 fd       	sbrc	r30, 0
    1d82:	0e 94 88 11 	call	0x2310	; 0x2310 <ProcessMusic>
    1d86:	00 90 87 07 	lds	r0, 0x0787	; 0x800787 <mix_bank>
    1d8a:	00 20       	and	r0, r0
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <set_hi_bank>
    1d8e:	a9 e7       	ldi	r26, 0x79	; 121
    1d90:	b5 e0       	ldi	r27, 0x05	; 5
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <end_set_bank>

00001d94 <set_hi_bank>:
    1d94:	af e7       	ldi	r26, 0x7F	; 127
    1d96:	b6 e0       	ldi	r27, 0x06	; 6

00001d98 <end_set_bank>:
    1d98:	21 e0       	ldi	r18, 0x01	; 1
    1d9a:	02 26       	eor	r0, r18
    1d9c:	00 92 87 07 	sts	0x0787, r0	; 0x800787 <mix_bank>
    1da0:	22 e0       	ldi	r18, 0x02	; 2
    1da2:	20 93 88 07 	sts	0x0788, r18	; 0x800788 <mix_block>
    1da6:	e0 91 89 07 	lds	r30, 0x0789	; 0x800789 <sound_enabled>
    1daa:	e0 ff       	sbrs	r30, 0
    1dac:	08 95       	ret
    1dae:	2f 92       	push	r2
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	50 91 9c 07 	lds	r21, 0x079C	; 0x80079c <tr4_vol>
    1dd6:	e0 91 a0 07 	lds	r30, 0x07A0	; 0x8007a0 <tr4_pos_lo>
    1dda:	f0 91 a1 07 	lds	r31, 0x07A1	; 0x8007a1 <tr4_pos_hi>
    1dde:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <tr4_pos_frac>
    1de2:	40 90 9d 07 	lds	r4, 0x079D	; 0x80079d <tr4_step_lo>
    1de6:	50 90 9e 07 	lds	r5, 0x079E	; 0x80079e <tr4_step_hi>
    1dea:	66 24       	eor	r6, r6
    1dec:	5f 01       	movw	r10, r30
    1dee:	00 90 a2 07 	lds	r0, 0x07A2	; 0x8007a2 <tr4_loop_len_lo>
    1df2:	10 90 a3 07 	lds	r1, 0x07A3	; 0x8007a3 <tr4_loop_len_hi>
    1df6:	a0 18       	sub	r10, r0
    1df8:	b1 08       	sbc	r11, r1
    1dfa:	80 90 a4 07 	lds	r8, 0x07A4	; 0x8007a4 <tr4_loop_end_lo>
    1dfe:	90 90 a5 07 	lds	r9, 0x07A5	; 0x8007a5 <tr4_loop_end_hi>
    1e02:	1d 01       	movw	r2, r26
    1e04:	c3 e8       	ldi	r28, 0x83	; 131

00001e06 <ch4_loop>:
    1e06:	84 0d       	add	r24, r4
    1e08:	e5 1d       	adc	r30, r5
    1e0a:	f6 1d       	adc	r31, r6
    1e0c:	e8 15       	cp	r30, r8
    1e0e:	f9 05       	cpc	r31, r9
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <ch4_loop+0xe>
    1e12:	f5 01       	movw	r30, r10
    1e14:	44 91       	lpm	r20, Z
    1e16:	45 03       	mulsu	r20, r21
    1e18:	1d 92       	st	X+, r1
    1e1a:	84 0d       	add	r24, r4
    1e1c:	e5 1d       	adc	r30, r5
    1e1e:	f6 1d       	adc	r31, r6
    1e20:	e8 15       	cp	r30, r8
    1e22:	f9 05       	cpc	r31, r9
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <ch4_loop+0x22>
    1e26:	f5 01       	movw	r30, r10
    1e28:	44 91       	lpm	r20, Z
    1e2a:	45 03       	mulsu	r20, r21
    1e2c:	1d 92       	st	X+, r1
    1e2e:	ca 95       	dec	r28
    1e30:	51 f7       	brne	.-44     	; 0x1e06 <ch4_loop>
    1e32:	d1 01       	movw	r26, r2
    1e34:	50 93 9c 07 	sts	0x079C, r21	; 0x80079c <tr4_vol>
    1e38:	e0 93 a0 07 	sts	0x07A0, r30	; 0x8007a0 <tr4_pos_lo>
    1e3c:	f0 93 a1 07 	sts	0x07A1, r31	; 0x8007a1 <tr4_pos_hi>
    1e40:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <tr4_pos_frac>
    1e44:	20 90 8b 07 	lds	r2, 0x078B	; 0x80078b <tr1_step_lo>
    1e48:	30 90 8c 07 	lds	r3, 0x078C	; 0x80078c <tr1_step_hi>
    1e4c:	40 90 8e 07 	lds	r4, 0x078E	; 0x80078e <tr1_pos_lo>
    1e50:	50 90 8f 07 	lds	r5, 0x078F	; 0x80078f <tr1_pos_hi>
    1e54:	60 90 8d 07 	lds	r6, 0x078D	; 0x80078d <tr1_pos_frac>
    1e58:	10 91 8a 07 	lds	r17, 0x078A	; 0x80078a <mixer>
    1e5c:	70 90 91 07 	lds	r7, 0x0791	; 0x800791 <tr2_step_lo>
    1e60:	80 90 92 07 	lds	r8, 0x0792	; 0x800792 <tr2_step_hi>
    1e64:	90 90 93 07 	lds	r9, 0x0793	; 0x800793 <tr2_pos_frac>
    1e68:	a0 90 94 07 	lds	r10, 0x0794	; 0x800794 <tr2_pos_lo>
    1e6c:	b0 90 95 07 	lds	r11, 0x0795	; 0x800795 <tr2_pos_hi>
    1e70:	20 91 90 07 	lds	r18, 0x0790	; 0x800790 <tr2_vol>
    1e74:	c0 90 97 07 	lds	r12, 0x0797	; 0x800797 <tr3_step_lo>
    1e78:	d0 90 98 07 	lds	r13, 0x0798	; 0x800798 <tr3_step_hi>
    1e7c:	e0 90 9a 07 	lds	r14, 0x079A	; 0x80079a <tr3_pos_lo>
    1e80:	f0 90 9b 07 	lds	r15, 0x079B	; 0x80079b <tr3_pos_hi>
    1e84:	00 91 99 07 	lds	r16, 0x0799	; 0x800799 <tr3_pos_frac>
    1e88:	30 91 96 07 	lds	r19, 0x0796	; 0x800796 <tr3_vol>
    1e8c:	9f ef       	ldi	r25, 0xFF	; 255

00001e8e <mix_loop>:
    1e8e:	cc 91       	ld	r28, X
    1e90:	dd 27       	eor	r29, r29
    1e92:	c7 fd       	sbrc	r28, 7
    1e94:	df ef       	ldi	r29, 0xFF	; 255
    1e96:	62 0c       	add	r6, r2
    1e98:	43 1c       	adc	r4, r3
    1e9a:	f2 01       	movw	r30, r4
    1e9c:	44 91       	lpm	r20, Z
    1e9e:	41 03       	mulsu	r20, r17
    1ea0:	00 08       	sbc	r0, r0
    1ea2:	c1 0d       	add	r28, r1
    1ea4:	d0 1d       	adc	r29, r0
    1ea6:	97 0c       	add	r9, r7
    1ea8:	a8 1c       	adc	r10, r8
    1eaa:	f5 01       	movw	r30, r10
    1eac:	44 91       	lpm	r20, Z
    1eae:	42 03       	mulsu	r20, r18
    1eb0:	00 08       	sbc	r0, r0
    1eb2:	c1 0d       	add	r28, r1
    1eb4:	d0 1d       	adc	r29, r0
    1eb6:	0c 0d       	add	r16, r12
    1eb8:	ed 1c       	adc	r14, r13
    1eba:	f7 01       	movw	r30, r14
    1ebc:	44 91       	lpm	r20, Z
    1ebe:	43 03       	mulsu	r20, r19
    1ec0:	00 08       	sbc	r0, r0
    1ec2:	c1 0d       	add	r28, r1
    1ec4:	d0 1d       	adc	r29, r0
    1ec6:	00 24       	eor	r0, r0
    1ec8:	c0 38       	cpi	r28, 0x80	; 128
    1eca:	d0 05       	cpc	r29, r0
    1ecc:	0c f0       	brlt	.+2      	; 0x1ed0 <mix_loop+0x42>
    1ece:	cf e7       	ldi	r28, 0x7F	; 127
    1ed0:	0a 94       	dec	r0
    1ed2:	c0 38       	cpi	r28, 0x80	; 128
    1ed4:	d0 05       	cpc	r29, r0
    1ed6:	0c f4       	brge	.+2      	; 0x1eda <mix_loop+0x4c>
    1ed8:	c0 e8       	ldi	r28, 0x80	; 128
    1eda:	c0 58       	subi	r28, 0x80	; 128
    1edc:	cd 93       	st	X+, r28
    1ede:	9a 95       	dec	r25
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <mix_loop+0x56>
    1ee2:	d5 cf       	rjmp	.-86     	; 0x1e8e <mix_loop>
    1ee4:	40 91 88 07 	lds	r20, 0x0788	; 0x800788 <mix_block>
    1ee8:	4a 95       	dec	r20
    1eea:	40 93 88 07 	sts	0x0788, r20	; 0x800788 <mix_block>
    1eee:	97 e0       	ldi	r25, 0x07	; 7
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <mix_loop+0x66>
    1ef2:	cd cf       	rjmp	.-102    	; 0x1e8e <mix_loop>
    1ef4:	60 92 8d 07 	sts	0x078D, r6	; 0x80078d <tr1_pos_frac>
    1ef8:	40 92 8e 07 	sts	0x078E, r4	; 0x80078e <tr1_pos_lo>
    1efc:	90 92 93 07 	sts	0x0793, r9	; 0x800793 <tr2_pos_frac>
    1f00:	a0 92 94 07 	sts	0x0794, r10	; 0x800794 <tr2_pos_lo>
    1f04:	00 93 99 07 	sts	0x0799, r16	; 0x800799 <tr3_pos_frac>
    1f08:	e0 92 9a 07 	sts	0x079A, r14	; 0x80079a <tr3_pos_lo>
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	3f 90       	pop	r3
    1f2e:	2f 90       	pop	r2
    1f30:	08 95       	ret

00001f32 <update_sound_buffer_fast>:
    1f32:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <mix_pos>
    1f36:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <mix_pos+0x1>
    1f3a:	01 91       	ld	r16, Z+
    1f3c:	00 00       	nop
    1f3e:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f42:	07 e0       	ldi	r16, 0x07	; 7
    1f44:	e5 38       	cpi	r30, 0x85	; 133
    1f46:	f0 07       	cpc	r31, r16
    1f48:	09 e7       	ldi	r16, 0x79	; 121
    1f4a:	15 e0       	ldi	r17, 0x05	; 5
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <update_sound_buffer_fast+0x1e>
    1f4e:	f8 01       	movw	r30, r16
    1f50:	e0 93 85 07 	sts	0x0785, r30	; 0x800785 <mix_pos>
    1f54:	f0 93 86 07 	sts	0x0786, r31	; 0x800786 <mix_pos+0x1>
    1f58:	08 95       	ret

00001f5a <update_sound>:
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	2f 93       	push	r18
    1f60:	ef 93       	push	r30
    1f62:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <mix_pos>
    1f66:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <mix_pos+0x1>
    1f6a:	01 91       	ld	r16, Z+
    1f6c:	00 93 b3 00 	sts	0x00B3, r16	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f70:	07 e0       	ldi	r16, 0x07	; 7
    1f72:	e5 38       	cpi	r30, 0x85	; 133
    1f74:	f0 07       	cpc	r31, r16
    1f76:	09 e7       	ldi	r16, 0x79	; 121
    1f78:	15 e0       	ldi	r17, 0x05	; 5
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <update_sound+0x24>
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	e0 93 85 07 	sts	0x0785, r30	; 0x800785 <mix_pos>
    1f82:	f0 93 86 07 	sts	0x0786, r31	; 0x800786 <mix_pos+0x1>
    1f86:	e8 e0       	ldi	r30, 0x08	; 8
    1f88:	ea 95       	dec	r30
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <update_sound+0x2e>
    1f8c:	ef 91       	pop	r30
    1f8e:	2f 91       	pop	r18
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	e0 fd       	sbrc	r30, 0
    1f96:	28 9a       	sbi	0x05, 0	; 5
    1f98:	e0 ff       	sbrs	r30, 0
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <update_sound+0x44>
    1f9c:	08 95       	ret
    1f9e:	f4 e1       	ldi	r31, 0x14	; 20
    1fa0:	fa 95       	dec	r31
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <update_sound+0x46>
    1fa4:	00 c0       	rjmp	.+0      	; 0x1fa6 <update_sound+0x4c>
    1fa6:	e1 fd       	sbrc	r30, 1
    1fa8:	28 9a       	sbi	0x05, 0	; 5
    1faa:	e1 ff       	sbrs	r30, 1
    1fac:	00 c0       	rjmp	.+0      	; 0x1fae <update_sound+0x54>
    1fae:	08 95       	ret

00001fb0 <ClearVram>:
    1fb0:	e0 e6       	ldi	r30, 0x60	; 96
    1fb2:	f4 e0       	ldi	r31, 0x04	; 4
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b1 e0       	ldi	r27, 0x01	; 1

00001fb8 <fill_vram_loop>:
    1fb8:	1d 92       	st	X+, r1
    1fba:	31 97       	sbiw	r30, 0x01	; 1
    1fbc:	e9 f7       	brne	.-6      	; 0x1fb8 <fill_vram_loop>
    1fbe:	11 24       	eor	r1, r1
    1fc0:	08 95       	ret

00001fc2 <SetFont>:
    1fc2:	99 27       	eor	r25, r25
    1fc4:	28 e2       	ldi	r18, 0x28	; 40
    1fc6:	62 9f       	mul	r22, r18
    1fc8:	08 0e       	add	r0, r24
    1fca:	19 1e       	adc	r1, r25
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b1 e0       	ldi	r27, 0x01	; 1
    1fd0:	a0 0d       	add	r26, r0
    1fd2:	b1 1d       	adc	r27, r1
    1fd4:	50 91 62 05 	lds	r21, 0x0562	; 0x800562 <font_tile_index>
    1fd8:	45 0f       	add	r20, r21
    1fda:	4c 93       	st	X, r20
    1fdc:	11 24       	eor	r1, r1
    1fde:	08 95       	ret

00001fe0 <SetFontTilesIndex>:
    1fe0:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <font_tile_index>
    1fe4:	08 95       	ret

00001fe6 <SetTileTable>:
    1fe6:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <tile_table_lo>
    1fea:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <tile_table_hi>
    1fee:	08 95       	ret

00001ff0 <GetVsyncFlag>:
    1ff0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <sync_flags>
    1ff4:	81 70       	andi	r24, 0x01	; 1
    1ff6:	08 95       	ret

00001ff8 <ClearVsyncFlag>:
    1ff8:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <sync_flags>
    1ffc:	2e 7f       	andi	r18, 0xFE	; 254
    1ffe:	20 93 66 05 	sts	0x0566, r18	; 0x800566 <sync_flags>
    2002:	08 95       	ret

00002004 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    2004:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    2006:	fe cf       	rjmp	.-4      	; 0x2004 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    2008:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    200a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    200c:	60 bd       	out	0x20, r22	; 32
   cli
    200e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    2010:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    2012:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    2014:	78 94       	sei
   ret
    2016:	08 95       	ret

00002018 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    2018:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    201a:	fe cf       	rjmp	.-4      	; 0x2018 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    201c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    201e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    2020:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    2022:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    2024:	80 b5       	in	r24, 0x20	; 32
   sei
    2026:	78 94       	sei
   ret
    2028:	08 95       	ret

0000202a <SoftReset>:
    202a:	98 e0       	ldi	r25, 0x08	; 8
    202c:	88 e1       	ldi	r24, 0x18	; 24
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	a8 95       	wdr
    2034:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    203e:	ff cf       	rjmp	.-2      	; 0x203e <SoftReset+0x14>

00002040 <ReadButtons>:
    2040:	12 9a       	sbi	0x02, 2	; 2
    2042:	c8 95       	lpm
    2044:	c8 95       	lpm
    2046:	c8 95       	lpm
    2048:	c8 95       	lpm
    204a:	12 98       	cbi	0x02, 2	; 2
    204c:	40 e1       	ldi	r20, 0x10	; 16
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	36 95       	lsr	r19
    2058:	27 95       	ror	r18
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	c8 95       	lpm
    2060:	c8 95       	lpm
    2062:	c8 95       	lpm
    2064:	c8 95       	lpm
    2066:	13 98       	cbi	0x02, 3	; 2
    2068:	00 9b       	sbis	0x00, 0	; 0
    206a:	30 68       	ori	r19, 0x80	; 128
    206c:	01 9b       	sbis	0x00, 1	; 0
    206e:	90 68       	ori	r25, 0x80	; 128
    2070:	13 9a       	sbi	0x02, 3	; 2
    2072:	c8 95       	lpm
    2074:	c8 95       	lpm
    2076:	c8 95       	lpm
    2078:	c8 95       	lpm
    207a:	41 50       	subi	r20, 0x01	; 1
    207c:	61 f7       	brne	.-40     	; 0x2056 <ReadButtons+0x16>
    207e:	30 93 6e 05 	sts	0x056E, r19	; 0x80056e <joypad1_status_lo+0x1>
    2082:	20 93 6d 05 	sts	0x056D, r18	; 0x80056d <joypad1_status_lo>
    2086:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <joypad2_status_lo+0x1>
    208a:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <joypad2_status_lo>
    208e:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <joypad1_status_lo>
    2092:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <joypad1_status_lo+0x1>
    2096:	0f 97       	sbiw	r24, 0x0f	; 15
    2098:	31 f0       	breq	.+12     	; 0x20a6 <ReadButtons+0x66>
    209a:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <joypad2_status_lo>
    209e:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <joypad2_status_lo+0x1>
    20a2:	0f 97       	sbiw	r24, 0x0f	; 15
    20a4:	11 f4       	brne	.+4      	; 0x20aa <ReadButtons+0x6a>
    20a6:	0e 94 15 10 	call	0x202a	; 0x202a <SoftReset>
    20aa:	08 95       	ret

000020ac <ReadControllers>:
    20ac:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <joypadsConnectionStatus>
    20b0:	00 99       	sbic	0x00, 0	; 0
    20b2:	03 c0       	rjmp	.+6      	; 0x20ba <ReadControllers+0xe>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <joypadsConnectionStatus>
    20ba:	01 99       	sbic	0x00, 1	; 0
    20bc:	05 c0       	rjmp	.+10     	; 0x20c8 <ReadControllers+0x1c>
    20be:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <joypadsConnectionStatus>
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <joypadsConnectionStatus>
    20c8:	0c 94 20 10 	jmp	0x2040	; 0x2040 <ReadButtons>

000020cc <FormatEeprom>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	c0 e0       	ldi	r28, 0x00	; 0
    20d2:	d0 e0       	ldi	r29, 0x00	; 0
    20d4:	fe 01       	movw	r30, r28
    20d6:	e0 59       	subi	r30, 0x90	; 144
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	64 91       	lpm	r22, Z
    20dc:	ce 01       	movw	r24, r28
    20de:	0e 94 02 10 	call	0x2004	; 0x2004 <WriteEeprom>
    20e2:	21 96       	adiw	r28, 0x01	; 1
    20e4:	c0 32       	cpi	r28, 0x20	; 32
    20e6:	d1 05       	cpc	r29, r1
    20e8:	a9 f7       	brne	.-22     	; 0x20d4 <FormatEeprom+0x8>
    20ea:	c0 e2       	ldi	r28, 0x20	; 32
    20ec:	d0 e0       	ldi	r29, 0x00	; 0
    20ee:	6f ef       	ldi	r22, 0xFF	; 255
    20f0:	ce 01       	movw	r24, r28
    20f2:	0e 94 02 10 	call	0x2004	; 0x2004 <WriteEeprom>
    20f6:	6f ef       	ldi	r22, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 02 10 	call	0x2004	; 0x2004 <WriteEeprom>
    2100:	a0 96       	adiw	r28, 0x20	; 32
    2102:	c1 15       	cp	r28, r1
    2104:	88 e0       	ldi	r24, 0x08	; 8
    2106:	d8 07       	cpc	r29, r24
    2108:	91 f7       	brne	.-28     	; 0x20ee <FormatEeprom+0x22>
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <isEepromFormatted>:
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    2110:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 0c 10 	call	0x2018	; 0x2018 <ReadEeprom>
    211a:	c8 2f       	mov	r28, r24
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 0c 10 	call	0x2018	; 0x2018 <ReadEeprom>
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	32 2f       	mov	r19, r18
    212a:	22 27       	eor	r18, r18
    212c:	2c 0f       	add	r18, r28
    212e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	2a 35       	cpi	r18, 0x5A	; 90
    2134:	35 45       	sbci	r19, 0x55	; 85
    2136:	09 f0       	breq	.+2      	; 0x213a <isEepromFormatted+0x2a>
    2138:	80 e0       	ldi	r24, 0x00	; 0
}
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <PatchCommand00>:
	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
	track->patchCommandStreamPos = NULL;
	TriggerCommon(track,patch,volume,80);
	track->flags|=TRACK_FLAGS_PLAYING;
}
    213e:	fc 01       	movw	r30, r24
    2140:	67 87       	std	Z+15, r22	; 0x0f
    2142:	08 95       	ret

00002144 <PatchCommand01>:
    2144:	08 95       	ret

00002146 <PatchCommand02>:
    2146:	fc 01       	movw	r30, r24
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <SetMixerWave>

0000214e <PatchCommand03>:
    214e:	fc 01       	movw	r30, r24
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	69 0f       	add	r22, r25
    2154:	61 83       	std	Z+1, r22	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <SetMixerNote>

0000215c <PatchCommand04>:
    215c:	fc 01       	movw	r30, r24
    215e:	91 81       	ldd	r25, Z+1	; 0x01
    2160:	96 1b       	sub	r25, r22
    2162:	69 2f       	mov	r22, r25
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <SetMixerNote>

0000216c <PatchCommand05>:
    216c:	fc 01       	movw	r30, r24
    216e:	90 81       	ld	r25, Z
    2170:	9f 75       	andi	r25, 0x5F	; 95
    2172:	90 83       	st	Z, r25
    2174:	08 95       	ret

00002176 <PatchCommand06>:
    2176:	fc 01       	movw	r30, r24
    2178:	90 81       	ld	r25, Z
    217a:	90 64       	ori	r25, 0x40	; 64
    217c:	90 83       	st	Z, r25
    217e:	08 95       	ret

00002180 <PatchCommand07>:
    2180:	fc 01       	movw	r30, r24
    2182:	66 87       	std	Z+14, r22	; 0x0e
    2184:	08 95       	ret

00002186 <PatchCommand08>:
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	16 2f       	mov	r17, r22
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SetMixerNote>
    2196:	19 83       	std	Y+1, r17	; 0x01
    2198:	88 81       	ld	r24, Y
    219a:	87 7f       	andi	r24, 0xF7	; 247
    219c:	88 83       	st	Y, r24
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	08 95       	ret

000021a6 <PatchCommand09>:
    21a6:	fc 01       	movw	r30, r24
    21a8:	62 87       	std	Z+10, r22	; 0x0a
    21aa:	08 95       	ret

000021ac <PatchCommand10>:
    21ac:	fc 01       	movw	r30, r24
    21ae:	63 87       	std	Z+11, r22	; 0x0b
    21b0:	08 95       	ret

000021b2 <PatchCommand11>:
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	ec 01       	movw	r28, r24
    21b8:	46 2f       	mov	r20, r22
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	f9 01       	movw	r30, r18
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	e8 5f       	subi	r30, 0xF8	; 248
    21c6:	f5 4d       	sbci	r31, 0xD5	; 213
    21c8:	65 91       	lpm	r22, Z+
    21ca:	74 91       	lpm	r23, Z
    21cc:	f9 01       	movw	r30, r18
    21ce:	e4 0f       	add	r30, r20
    21d0:	f1 1d       	adc	r31, r1
    21d2:	47 fd       	sbrc	r20, 7
    21d4:	fa 95       	dec	r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e8 5f       	subi	r30, 0xF8	; 248
    21dc:	f5 4d       	sbci	r31, 0xD5	; 213
    21de:	85 91       	lpm	r24, Z+
    21e0:	94 91       	lpm	r25, Z
    21e2:	86 1b       	sub	r24, r22
    21e4:	97 0b       	sbc	r25, r23
    21e6:	68 85       	ldd	r22, Y+8	; 0x08
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__divmodhi4>
    21ee:	61 15       	cp	r22, r1
    21f0:	71 05       	cpc	r23, r1
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <PatchCommand11+0x46>
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	ea 81       	ldd	r30, Y+2	; 0x02
    21fa:	86 e0       	ldi	r24, 0x06	; 6
    21fc:	e8 9f       	mul	r30, r24
    21fe:	f0 01       	movw	r30, r0
    2200:	11 24       	eor	r1, r1
    2202:	e6 57       	subi	r30, 0x76	; 118
    2204:	f8 4f       	sbci	r31, 0xF8	; 248
    2206:	81 81       	ldd	r24, Z+1	; 0x01
    2208:	92 81       	ldd	r25, Z+2	; 0x02
    220a:	86 0f       	add	r24, r22
    220c:	97 1f       	adc	r25, r23
    220e:	92 83       	std	Z+2, r25	; 0x02
    2210:	81 83       	std	Z+1, r24	; 0x01
    2212:	7e 83       	std	Y+6, r23	; 0x06
    2214:	6d 83       	std	Y+5, r22	; 0x05
    2216:	88 81       	ld	r24, Y
    2218:	88 60       	ori	r24, 0x08	; 8
    221a:	88 83       	st	Y, r24
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	48 0f       	add	r20, r24
    2220:	4f 83       	std	Y+7, r20	; 0x07
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <PatchCommand12>:
    2228:	fc 01       	movw	r30, r24
    222a:	60 87       	std	Z+8, r22	; 0x08
    222c:	08 95       	ret

0000222e <PatchCommand13>:
    222e:	fc 01       	movw	r30, r24
    2230:	64 83       	std	Z+4, r22	; 0x04
    2232:	08 95       	ret

00002234 <PatchCommand14>:
    2234:	dc 01       	movw	r26, r24
    2236:	14 96       	adiw	r26, 0x04	; 4
    2238:	8c 91       	ld	r24, X
    223a:	14 97       	sbiw	r26, 0x04	; 4
    223c:	88 23       	and	r24, r24
    223e:	19 f1       	breq	.+70     	; 0x2286 <PatchCommand14+0x52>
    2240:	55 96       	adiw	r26, 0x15	; 21
    2242:	2d 91       	ld	r18, X+
    2244:	3c 91       	ld	r19, X
    2246:	56 97       	sbiw	r26, 0x16	; 22
    2248:	66 23       	and	r22, r22
    224a:	79 f0       	breq	.+30     	; 0x226a <PatchCommand14+0x36>
    224c:	06 2e       	mov	r0, r22
    224e:	00 0c       	add	r0, r0
    2250:	77 0b       	sbc	r23, r23
    2252:	6f 5f       	subi	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	ab 01       	movw	r20, r22
    2258:	44 0f       	add	r20, r20
    225a:	55 1f       	adc	r21, r21
    225c:	64 0f       	add	r22, r20
    225e:	75 1f       	adc	r23, r21
    2260:	26 1b       	sub	r18, r22
    2262:	37 0b       	sbc	r19, r23
    2264:	09 c0       	rjmp	.+18     	; 0x2278 <PatchCommand14+0x44>
    2266:	ef 3f       	cpi	r30, 0xFF	; 255
    2268:	39 f0       	breq	.+14     	; 0x2278 <PatchCommand14+0x44>
    226a:	23 50       	subi	r18, 0x03	; 3
    226c:	31 09       	sbc	r19, r1
    226e:	f9 01       	movw	r30, r18
    2270:	32 97       	sbiw	r30, 0x02	; 2
    2272:	e4 91       	lpm	r30, Z
    2274:	ed 30       	cpi	r30, 0x0D	; 13
    2276:	b9 f7       	brne	.-18     	; 0x2266 <PatchCommand14+0x32>
    2278:	56 96       	adiw	r26, 0x16	; 22
    227a:	3c 93       	st	X, r19
    227c:	2e 93       	st	-X, r18
    227e:	55 97       	sbiw	r26, 0x15	; 21
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	14 96       	adiw	r26, 0x04	; 4
    2284:	8c 93       	st	X, r24
    2286:	08 95       	ret

00002288 <InitMusicPlayer>:
    2288:	90 93 0c 08 	sts	0x080C, r25	; 0x80080c <patchPointers+0x1>
    228c:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <patchPointers>
    2290:	8f e6       	ldi	r24, 0x6F	; 111
    2292:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <masterVolume>
    2296:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <playSong>
    229a:	ef eb       	ldi	r30, 0xBF	; 191
    229c:	f7 e0       	ldi	r31, 0x07	; 7
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e1       	ldi	r25, 0x10	; 16
    22a2:	3f ef       	ldi	r19, 0xFF	; 255
    22a4:	28 e1       	ldi	r18, 0x18	; 24
    22a6:	df 01       	movw	r26, r30
    22a8:	1e 97       	sbiw	r26, 0x0e	; 14
    22aa:	8c 93       	st	X, r24
    22ac:	12 97       	sbiw	r26, 0x02	; 2
    22ae:	9c 93       	st	X, r25
    22b0:	1d 96       	adiw	r26, 0x0d	; 13
    22b2:	1c 92       	st	X, r1
    22b4:	11 97       	sbiw	r26, 0x01	; 1
    22b6:	3c 93       	st	X, r19
    22b8:	10 82       	st	Z, r1
    22ba:	11 97       	sbiw	r26, 0x01	; 1
    22bc:	2c 93       	st	X, r18
    22be:	13 97       	sbiw	r26, 0x03	; 3
    22c0:	9c 93       	st	X, r25
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	77 96       	adiw	r30, 0x17	; 23
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	71 f7       	brne	.-36     	; 0x22a6 <InitMusicPlayer+0x1e>
    22ca:	08 95       	ret

000022cc <StartSong>:
    22cc:	ef ea       	ldi	r30, 0xAF	; 175
    22ce:	f7 e0       	ldi	r31, 0x07	; 7
    22d0:	9f ef       	ldi	r25, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	8f 77       	andi	r24, 0x7F	; 127
    22d6:	80 83       	st	Z, r24
    22d8:	93 83       	std	Z+3, r25	; 0x03
    22da:	77 96       	adiw	r30, 0x17	; 23
    22dc:	88 e0       	ldi	r24, 0x08	; 8
    22de:	eb 30       	cpi	r30, 0x0B	; 11
    22e0:	f8 07       	cpc	r31, r24
    22e2:	b9 f7       	brne	.-18     	; 0x22d2 <StartSong+0x6>
    22e4:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <songPos+0x1>
    22e8:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <songPos>
    22ec:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <songStart+0x1>
    22f0:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <songStart>
    22f4:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <loopStart+0x1>
    22f8:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <loopStart>
    22fc:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <nextDeltaTime>
    2300:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <songSpeed>
    2304:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <lastStatus>
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <playSong>
    230e:	08 95       	ret

00002310 <ProcessMusic>:
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	0f ea       	ldi	r16, 0xAF	; 175
    232e:	17 e0       	ldi	r17, 0x07	; 7
    2330:	ea e8       	ldi	r30, 0x8A	; 138
    2332:	ee 2e       	mov	r14, r30
    2334:	e7 e0       	ldi	r30, 0x07	; 7
    2336:	fe 2e       	mov	r15, r30
    2338:	d7 01       	movw	r26, r14
    233a:	e8 01       	movw	r28, r16
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	f9 01       	movw	r30, r18
    2342:	e1 55       	subi	r30, 0x51	; 81
    2344:	f8 4f       	sbci	r31, 0xF8	; 248
    2346:	87 85       	ldd	r24, Z+15	; 0x0f
    2348:	88 23       	and	r24, r24
    234a:	89 f0       	breq	.+34     	; 0x236e <ProcessMusic+0x5e>
    234c:	46 85       	ldd	r20, Z+14	; 0x0e
    234e:	08 2e       	mov	r0, r24
    2350:	00 0c       	add	r0, r0
    2352:	99 0b       	sbc	r25, r25
    2354:	84 0f       	add	r24, r20
    2356:	91 1d       	adc	r25, r1
    2358:	8f 3f       	cpi	r24, 0xFF	; 255
    235a:	91 05       	cpc	r25, r1
    235c:	19 f0       	breq	.+6      	; 0x2364 <ProcessMusic+0x54>
    235e:	14 f0       	brlt	.+4      	; 0x2364 <ProcessMusic+0x54>
    2360:	8f ef       	ldi	r24, 0xFF	; 255
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	97 ff       	sbrs	r25, 7
    2366:	02 c0       	rjmp	.+4      	; 0x236c <ProcessMusic+0x5c>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	86 87       	std	Z+14, r24	; 0x0e
    236e:	68 81       	ld	r22, Y
    2370:	63 ff       	sbrs	r22, 3
    2372:	26 c0       	rjmp	.+76     	; 0x23c0 <ProcessMusic+0xb0>
    2374:	4d 81       	ldd	r20, Y+5	; 0x05
    2376:	5e 81       	ldd	r21, Y+6	; 0x06
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	12 97       	sbiw	r26, 0x02	; 2
    2380:	84 0f       	add	r24, r20
    2382:	95 1f       	adc	r25, r21
    2384:	12 96       	adiw	r26, 0x02	; 2
    2386:	9c 93       	st	X, r25
    2388:	8e 93       	st	-X, r24
    238a:	11 97       	sbiw	r26, 0x01	; 1
    238c:	e7 81       	ldd	r30, Z+7	; 0x07
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	e8 5f       	subi	r30, 0xF8	; 248
    2396:	f5 4d       	sbci	r31, 0xD5	; 213
    2398:	c5 90       	lpm	r12, Z+
    239a:	d4 90       	lpm	r13, Z
    239c:	14 16       	cp	r1, r20
    239e:	15 06       	cpc	r1, r21
    23a0:	24 f4       	brge	.+8      	; 0x23aa <ProcessMusic+0x9a>
    23a2:	8c 15       	cp	r24, r12
    23a4:	9d 05       	cpc	r25, r13
    23a6:	30 f4       	brcc	.+12     	; 0x23b4 <ProcessMusic+0xa4>
    23a8:	0b c0       	rjmp	.+22     	; 0x23c0 <ProcessMusic+0xb0>
    23aa:	45 2b       	or	r20, r21
    23ac:	49 f0       	breq	.+18     	; 0x23c0 <ProcessMusic+0xb0>
    23ae:	c8 16       	cp	r12, r24
    23b0:	d9 06       	cpc	r13, r25
    23b2:	30 f0       	brcs	.+12     	; 0x23c0 <ProcessMusic+0xb0>
    23b4:	12 96       	adiw	r26, 0x02	; 2
    23b6:	dc 92       	st	X, r13
    23b8:	ce 92       	st	-X, r12
    23ba:	11 97       	sbiw	r26, 0x01	; 1
    23bc:	67 7f       	andi	r22, 0xF7	; 247
    23be:	68 83       	st	Y, r22
    23c0:	29 5e       	subi	r18, 0xE9	; 233
    23c2:	3f 4f       	sbci	r19, 0xFF	; 255
    23c4:	67 96       	adiw	r28, 0x17	; 23
    23c6:	16 96       	adiw	r26, 0x06	; 6
    23c8:	2c 35       	cpi	r18, 0x5C	; 92
    23ca:	31 05       	cpc	r19, r1
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <ProcessMusic+0xc0>
    23ce:	b8 cf       	rjmp	.-144    	; 0x2340 <ProcessMusic+0x30>
    23d0:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <playSong>
    23d4:	88 23       	and	r24, r24
    23d6:	c9 f1       	breq	.+114    	; 0x244a <ProcessMusic+0x13a>
    23d8:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <nextDeltaTime>
    23dc:	88 23       	and	r24, r24
    23de:	19 f0       	breq	.+6      	; 0x23e6 <ProcessMusic+0xd6>
    23e0:	81 50       	subi	r24, 0x01	; 1
    23e2:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <nextDeltaTime>
    23e6:	d7 e1       	ldi	r29, 0x17	; 23
    23e8:	25 c0       	rjmp	.+74     	; 0x2434 <ProcessMusic+0x124>
    23ea:	0e 94 92 13 	call	0x2724	; 0x2724 <SongBufRead>
    23ee:	c8 2f       	mov	r28, r24
    23f0:	8f 3f       	cpi	r24, 0xFF	; 255
    23f2:	d9 f1       	breq	.+118    	; 0x246a <ProcessMusic+0x15a>
    23f4:	80 7e       	andi	r24, 0xE0	; 224
    23f6:	80 3a       	cpi	r24, 0xA0	; 160
    23f8:	d8 f5       	brcc	.+118    	; 0x2470 <ProcessMusic+0x160>
    23fa:	dc 2e       	mov	r13, r28
    23fc:	d2 94       	swap	r13
    23fe:	d6 94       	lsr	r13
    2400:	97 e0       	ldi	r25, 0x07	; 7
    2402:	d9 22       	and	r13, r25
    2404:	0e 94 92 13 	call	0x2724	; 0x2724 <SongBufRead>
    2408:	28 2f       	mov	r18, r24
    240a:	20 78       	andi	r18, 0x80	; 128
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	35 95       	asr	r19
    2410:	27 95       	ror	r18
    2412:	35 95       	asr	r19
    2414:	27 95       	ror	r18
    2416:	cf 71       	andi	r28, 0x1F	; 31
    2418:	c2 2b       	or	r28, r18
    241a:	2c 2f       	mov	r18, r28
    241c:	22 0f       	add	r18, r18
    241e:	48 2f       	mov	r20, r24
    2420:	4f 77       	andi	r20, 0x7F	; 127
    2422:	dd 9d       	mul	r29, r13
    2424:	f0 01       	movw	r30, r0
    2426:	11 24       	eor	r1, r1
    2428:	e1 55       	subi	r30, 0x51	; 81
    242a:	f8 4f       	sbci	r31, 0xF8	; 248
    242c:	60 89       	ldd	r22, Z+16	; 0x10
    242e:	8d 2d       	mov	r24, r13
    2430:	0e 94 2c 14 	call	0x2858	; 0x2858 <TriggerNote>
    2434:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <nextDeltaTime>
    2438:	81 11       	cpse	r24, r1
    243a:	07 c0       	rjmp	.+14     	; 0x244a <ProcessMusic+0x13a>
    243c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <SongBufBytes>
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	98 f6       	brcc	.-90     	; 0x23ea <ProcessMusic+0xda>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <nextDeltaTime>
    244a:	c8 eb       	ldi	r28, 0xB8	; 184
    244c:	ac 2e       	mov	r10, r28
    244e:	c7 e0       	ldi	r28, 0x07	; 7
    2450:	bc 2e       	mov	r11, r28
    2452:	d2 ec       	ldi	r29, 0xC2	; 194
    2454:	cd 2e       	mov	r12, r29
    2456:	d7 e0       	ldi	r29, 0x07	; 7
    2458:	dd 2e       	mov	r13, r29
    245a:	c3 ec       	ldi	r28, 0xC3	; 195
    245c:	d7 e0       	ldi	r29, 0x07	; 7
    245e:	88 24       	eor	r8, r8
    2460:	8a 94       	dec	r8
    2462:	91 2c       	mov	r9, r1
    2464:	5e c0       	rjmp	.+188    	; 0x2522 <ProcessMusic+0x212>
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	81 f5       	brne	.+96     	; 0x24ca <ProcessMusic+0x1ba>
    246a:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <playSong>
    246e:	ed cf       	rjmp	.-38     	; 0x244a <ProcessMusic+0x13a>
    2470:	80 3a       	cpi	r24, 0xA0	; 160
    2472:	51 f4       	brne	.+20     	; 0x2488 <ProcessMusic+0x178>
    2474:	0e 94 92 13 	call	0x2724	; 0x2724 <SongBufRead>
    2478:	c7 70       	andi	r28, 0x07	; 7
    247a:	dc 9f       	mul	r29, r28
    247c:	f0 01       	movw	r30, r0
    247e:	11 24       	eor	r1, r1
    2480:	e1 55       	subi	r30, 0x51	; 81
    2482:	f8 4f       	sbci	r31, 0xF8	; 248
    2484:	80 8b       	std	Z+16, r24	; 0x10
    2486:	d6 cf       	rjmp	.-84     	; 0x2434 <ProcessMusic+0x124>
    2488:	80 3c       	cpi	r24, 0xC0	; 192
    248a:	69 f5       	brne	.+90     	; 0x24e6 <ProcessMusic+0x1d6>
    248c:	8c 2f       	mov	r24, r28
    248e:	83 70       	andi	r24, 0x03	; 3
    2490:	89 f4       	brne	.+34     	; 0x24b4 <ProcessMusic+0x1a4>
    2492:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <songPos>
    2496:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <songPos+0x1>
    249a:	90 93 10 08 	sts	0x0810, r25	; 0x800810 <loopEnd+0x1>
    249e:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <loopEnd>
    24a2:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <loopStart>
    24a6:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <loopStart+0x1>
    24aa:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <songPos+0x1>
    24ae:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <songPos>
    24b2:	c0 cf       	rjmp	.-128    	; 0x2434 <ProcessMusic+0x124>
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	b9 f6       	brne	.-82     	; 0x2466 <ProcessMusic+0x156>
    24b8:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <songPos>
    24bc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <songPos+0x1>
    24c0:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <loopStart+0x1>
    24c4:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <loopStart>
    24c8:	b5 cf       	rjmp	.-150    	; 0x2434 <ProcessMusic+0x124>
    24ca:	cc 71       	andi	r28, 0x1C	; 28
    24cc:	c6 95       	lsr	r28
    24ce:	c6 95       	lsr	r28
    24d0:	cf 5f       	subi	r28, 0xFF	; 255
    24d2:	c0 93 12 08 	sts	0x0812, r28	; 0x800812 <nextDeltaTime>
    24d6:	c8 30       	cpi	r28, 0x08	; 8
    24d8:	09 f0       	breq	.+2      	; 0x24dc <ProcessMusic+0x1cc>
    24da:	ac cf       	rjmp	.-168    	; 0x2434 <ProcessMusic+0x124>
    24dc:	0e 94 92 13 	call	0x2724	; 0x2724 <SongBufRead>
    24e0:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <nextDeltaTime>
    24e4:	a7 cf       	rjmp	.-178    	; 0x2434 <ProcessMusic+0x124>
    24e6:	8c 2f       	mov	r24, r28
    24e8:	87 70       	andi	r24, 0x07	; 7
    24ea:	d8 2e       	mov	r13, r24
    24ec:	c8 71       	andi	r28, 0x18	; 24
    24ee:	0e 94 92 13 	call	0x2724	; 0x2724 <SongBufRead>
    24f2:	2d 2d       	mov	r18, r13
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	88 0f       	add	r24, r24
    24f8:	d2 9f       	mul	r29, r18
    24fa:	f0 01       	movw	r30, r0
    24fc:	d3 9f       	mul	r29, r19
    24fe:	f0 0d       	add	r31, r0
    2500:	11 24       	eor	r1, r1
    2502:	e1 55       	subi	r30, 0x51	; 81
    2504:	f8 4f       	sbci	r31, 0xF8	; 248
    2506:	c1 11       	cpse	r28, r1
    2508:	02 c0       	rjmp	.+4      	; 0x250e <ProcessMusic+0x1fe>
    250a:	84 87       	std	Z+12, r24	; 0x0c
    250c:	93 cf       	rjmp	.-218    	; 0x2434 <ProcessMusic+0x124>
    250e:	c8 30       	cpi	r28, 0x08	; 8
    2510:	11 f4       	brne	.+4      	; 0x2516 <ProcessMusic+0x206>
    2512:	83 83       	std	Z+3, r24	; 0x03
    2514:	8f cf       	rjmp	.-226    	; 0x2434 <ProcessMusic+0x124>
    2516:	c0 31       	cpi	r28, 0x10	; 16
    2518:	11 f4       	brne	.+4      	; 0x251e <ProcessMusic+0x20e>
    251a:	82 87       	std	Z+10, r24	; 0x0a
    251c:	8b cf       	rjmp	.-234    	; 0x2434 <ProcessMusic+0x124>
    251e:	83 87       	std	Z+11, r24	; 0x0b
    2520:	89 cf       	rjmp	.-238    	; 0x2434 <ProcessMusic+0x124>
    2522:	d8 01       	movw	r26, r16
    2524:	8c 91       	ld	r24, X
    2526:	85 ff       	sbrs	r24, 5
    2528:	52 c0       	rjmp	.+164    	; 0x25ce <ProcessMusic+0x2be>
    252a:	55 96       	adiw	r26, 0x15	; 21
    252c:	2d 91       	ld	r18, X+
    252e:	3c 91       	ld	r19, X
    2530:	56 97       	sbiw	r26, 0x16	; 22
    2532:	23 2b       	or	r18, r19
    2534:	09 f4       	brne	.+2      	; 0x2538 <ProcessMusic+0x228>
    2536:	4b c0       	rjmp	.+150    	; 0x25ce <ProcessMusic+0x2be>
    2538:	86 fd       	sbrc	r24, 6
    253a:	49 c0       	rjmp	.+146    	; 0x25ce <ProcessMusic+0x2be>
    253c:	3e 01       	movw	r6, r28
    253e:	b2 e0       	ldi	r27, 0x02	; 2
    2540:	6b 1a       	sub	r6, r27
    2542:	71 08       	sbc	r7, r1
    2544:	d6 01       	movw	r26, r12
    2546:	9c 91       	ld	r25, X
    2548:	f3 01       	movw	r30, r6
    254a:	80 81       	ld	r24, Z
    254c:	98 13       	cpse	r25, r24
    254e:	3c c0       	rjmp	.+120    	; 0x25c8 <ProcessMusic+0x2b8>
    2550:	d8 01       	movw	r26, r16
    2552:	55 96       	adiw	r26, 0x15	; 21
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	56 97       	sbiw	r26, 0x16	; 22
    255a:	bf 01       	movw	r22, r30
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	56 96       	adiw	r26, 0x16	; 22
    2562:	7c 93       	st	X, r23
    2564:	6e 93       	st	-X, r22
    2566:	55 97       	sbiw	r26, 0x15	; 21
    2568:	84 91       	lpm	r24, Z
    256a:	8f 3f       	cpi	r24, 0xFF	; 255
    256c:	39 f4       	brne	.+14     	; 0x257c <ProcessMusic+0x26c>
    256e:	f8 01       	movw	r30, r16
    2570:	80 81       	ld	r24, Z
    2572:	8f 77       	andi	r24, 0x7F	; 127
    2574:	80 83       	st	Z, r24
    2576:	16 8a       	std	Z+22, r1	; 0x16
    2578:	15 8a       	std	Z+21, r1	; 0x15
    257a:	26 c0       	rjmp	.+76     	; 0x25c8 <ProcessMusic+0x2b8>
    257c:	9f 01       	movw	r18, r30
    257e:	2e 5f       	subi	r18, 0xFE	; 254
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	d8 01       	movw	r26, r16
    2584:	56 96       	adiw	r26, 0x16	; 22
    2586:	3c 93       	st	X, r19
    2588:	2e 93       	st	-X, r18
    258a:	55 97       	sbiw	r26, 0x15	; 21
    258c:	fb 01       	movw	r30, r22
    258e:	64 91       	lpm	r22, Z
    2590:	e8 2f       	mov	r30, r24
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	e2 54       	subi	r30, 0x42	; 66
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	25 91       	lpm	r18, Z+
    259e:	34 91       	lpm	r19, Z
    25a0:	c8 01       	movw	r24, r16
    25a2:	f9 01       	movw	r30, r18
    25a4:	09 95       	icall
    25a6:	d8 01       	movw	r26, r16
    25a8:	55 96       	adiw	r26, 0x15	; 21
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	56 97       	sbiw	r26, 0x16	; 22
    25b0:	cf 01       	movw	r24, r30
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	56 96       	adiw	r26, 0x16	; 22
    25b6:	9c 93       	st	X, r25
    25b8:	8e 93       	st	-X, r24
    25ba:	55 97       	sbiw	r26, 0x15	; 21
    25bc:	e4 91       	lpm	r30, Z
    25be:	d3 01       	movw	r26, r6
    25c0:	ec 93       	st	X, r30
    25c2:	f6 01       	movw	r30, r12
    25c4:	10 82       	st	Z, r1
    25c6:	be cf       	rjmp	.-132    	; 0x2544 <ProcessMusic+0x234>
    25c8:	9f 5f       	subi	r25, 0xFF	; 255
    25ca:	d6 01       	movw	r26, r12
    25cc:	9c 93       	st	X, r25
    25ce:	f8 01       	movw	r30, r16
    25d0:	90 81       	ld	r25, Z
    25d2:	95 ff       	sbrs	r25, 5
    25d4:	5e c0       	rjmp	.+188    	; 0x2692 <ProcessMusic+0x382>
    25d6:	88 81       	ld	r24, Y
    25d8:	8f 3f       	cpi	r24, 0xFF	; 255
    25da:	11 f0       	breq	.+4      	; 0x25e0 <ProcessMusic+0x2d0>
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	88 83       	st	Y, r24
    25e0:	97 fd       	sbrc	r25, 7
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <ProcessMusic+0x2dc>
    25e4:	fe 01       	movw	r30, r28
    25e6:	38 97       	sbiw	r30, 0x08	; 8
    25e8:	90 81       	ld	r25, Z
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <ProcessMusic+0x2de>
    25ec:	9f ef       	ldi	r25, 0xFF	; 255
    25ee:	fe 01       	movw	r30, r28
    25f0:	37 97       	sbiw	r30, 0x07	; 7
    25f2:	80 81       	ld	r24, Z
    25f4:	88 23       	and	r24, r24
    25f6:	09 f4       	brne	.+2      	; 0x25fa <ProcessMusic+0x2ea>
    25f8:	41 c0       	rjmp	.+130    	; 0x267c <ProcessMusic+0x36c>
    25fa:	31 96       	adiw	r30, 0x01	; 1
    25fc:	50 81       	ld	r21, Z
    25fe:	55 23       	and	r21, r21
    2600:	09 f4       	brne	.+2      	; 0x2604 <ProcessMusic+0x2f4>
    2602:	3c c0       	rjmp	.+120    	; 0x267c <ProcessMusic+0x36c>
    2604:	99 23       	and	r25, r25
    2606:	d1 f1       	breq	.+116    	; 0x267c <ProcessMusic+0x36c>
    2608:	40 91 11 08 	lds	r20, 0x0811	; 0x800811 <masterVolume>
    260c:	44 23       	and	r20, r20
    260e:	b1 f1       	breq	.+108    	; 0x267c <ProcessMusic+0x36c>
    2610:	89 9f       	mul	r24, r25
    2612:	c0 01       	movw	r24, r0
    2614:	11 24       	eor	r1, r1
    2616:	93 95       	inc	r25
    2618:	89 2f       	mov	r24, r25
    261a:	99 27       	eor	r25, r25
    261c:	58 9f       	mul	r21, r24
    261e:	90 01       	movw	r18, r0
    2620:	59 9f       	mul	r21, r25
    2622:	30 0d       	add	r19, r0
    2624:	11 24       	eor	r1, r1
    2626:	33 95       	inc	r19
    2628:	23 2f       	mov	r18, r19
    262a:	33 27       	eor	r19, r19
    262c:	42 9f       	mul	r20, r18
    262e:	c0 01       	movw	r24, r0
    2630:	43 9f       	mul	r20, r19
    2632:	90 0d       	add	r25, r0
    2634:	11 24       	eor	r1, r1
    2636:	93 95       	inc	r25
    2638:	89 2f       	mov	r24, r25
    263a:	99 27       	eor	r25, r25
    263c:	34 97       	sbiw	r30, 0x04	; 4
    263e:	20 81       	ld	r18, Z
    2640:	22 23       	and	r18, r18
    2642:	f1 f0       	breq	.+60     	; 0x2680 <ProcessMusic+0x370>
    2644:	d5 01       	movw	r26, r10
    2646:	ec 91       	ld	r30, X
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	e0 50       	subi	r30, 0x00	; 0
    264c:	f4 4d       	sbci	r31, 0xD4	; 212
    264e:	e4 91       	lpm	r30, Z
    2650:	e0 58       	subi	r30, 0x80	; 128
    2652:	2e 9f       	mul	r18, r30
    2654:	f0 01       	movw	r30, r0
    2656:	11 24       	eor	r1, r1
    2658:	f3 95       	inc	r31
    265a:	ef 2f       	mov	r30, r31
    265c:	ff 27       	eor	r31, r31
    265e:	a4 01       	movw	r20, r8
    2660:	4e 1b       	sub	r20, r30
    2662:	5f 0b       	sbc	r21, r31
    2664:	48 9f       	mul	r20, r24
    2666:	90 01       	movw	r18, r0
    2668:	49 9f       	mul	r20, r25
    266a:	30 0d       	add	r19, r0
    266c:	58 9f       	mul	r21, r24
    266e:	30 0d       	add	r19, r0
    2670:	11 24       	eor	r1, r1
    2672:	c9 01       	movw	r24, r18
    2674:	93 95       	inc	r25
    2676:	89 2f       	mov	r24, r25
    2678:	99 27       	eor	r25, r25
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <ProcessMusic+0x370>
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	f5 01       	movw	r30, r10
    2682:	30 81       	ld	r19, Z
    2684:	fe 01       	movw	r30, r28
    2686:	39 97       	sbiw	r30, 0x09	; 9
    2688:	20 81       	ld	r18, Z
    268a:	23 0f       	add	r18, r19
    268c:	d5 01       	movw	r26, r10
    268e:	2c 93       	st	X, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <ProcessMusic+0x386>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	f7 01       	movw	r30, r14
    2698:	80 83       	st	Z, r24
    269a:	09 5e       	subi	r16, 0xE9	; 233
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	f6 e0       	ldi	r31, 0x06	; 6
    26a0:	ef 0e       	add	r14, r31
    26a2:	f1 1c       	adc	r15, r1
    26a4:	87 e1       	ldi	r24, 0x17	; 23
    26a6:	a8 0e       	add	r10, r24
    26a8:	b1 1c       	adc	r11, r1
    26aa:	a7 e1       	ldi	r26, 0x17	; 23
    26ac:	ca 0e       	add	r12, r26
    26ae:	d1 1c       	adc	r13, r1
    26b0:	67 96       	adiw	r28, 0x17	; 23
    26b2:	b8 e0       	ldi	r27, 0x08	; 8
    26b4:	0b 30       	cpi	r16, 0x0B	; 11
    26b6:	1b 07       	cpc	r17, r27
    26b8:	09 f0       	breq	.+2      	; 0x26bc <ProcessMusic+0x3ac>
    26ba:	33 cf       	rjmp	.-410    	; 0x2522 <ProcessMusic+0x212>
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	9f 90       	pop	r9
    26d2:	8f 90       	pop	r8
    26d4:	7f 90       	pop	r7
    26d6:	6f 90       	pop	r6
    26d8:	08 95       	ret

000026da <SongBufFull>:
    26da:	40 91 39 08 	lds	r20, 0x0839	; 0x800839 <songBufOut>
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	20 91 0d 08 	lds	r18, 0x080D	; 0x80080d <songBufIn>
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	2f 5f       	subi	r18, 0xFF	; 255
    26e8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ea:	2f 71       	andi	r18, 0x1F	; 31
    26ec:	33 27       	eor	r19, r19
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	42 17       	cp	r20, r18
    26f2:	53 07       	cpc	r21, r19
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <SongBufFull+0x1e>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	08 95       	ret

000026fa <SongBufBytes>:
    26fa:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <songBufIn>
    26fe:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <songBufOut>
    2702:	98 17       	cp	r25, r24
    2704:	08 f0       	brcs	.+2      	; 0x2708 <SongBufBytes+0xe>
    2706:	80 5e       	subi	r24, 0xE0	; 224
    2708:	89 1b       	sub	r24, r25
    270a:	08 95       	ret

0000270c <SongBufWrite>:
    270c:	90 91 0d 08 	lds	r25, 0x080D	; 0x80080d <songBufIn>
    2710:	e9 2f       	mov	r30, r25
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	ea 5e       	subi	r30, 0xEA	; 234
    2716:	f7 4f       	sbci	r31, 0xF7	; 247
    2718:	80 83       	st	Z, r24
    271a:	9f 5f       	subi	r25, 0xFF	; 255
    271c:	9f 71       	andi	r25, 0x1F	; 31
    271e:	90 93 0d 08 	sts	0x080D, r25	; 0x80080d <songBufIn>
    2722:	08 95       	ret

00002724 <SongBufRead>:
    2724:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <songBufOut>
    2728:	e9 2f       	mov	r30, r25
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	ea 5e       	subi	r30, 0xEA	; 234
    272e:	f7 4f       	sbci	r31, 0xF7	; 247
    2730:	80 81       	ld	r24, Z
    2732:	9f 5f       	subi	r25, 0xFF	; 255
    2734:	9f 71       	andi	r25, 0x1F	; 31
    2736:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <songBufOut>
    273a:	20 91 14 08 	lds	r18, 0x0814	; 0x800814 <songPos>
    273e:	30 91 15 08 	lds	r19, 0x0815	; 0x800815 <songPos+0x1>
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	30 93 15 08 	sts	0x0815, r19	; 0x800815 <songPos+0x1>
    274a:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <songPos>
    274e:	08 95       	ret

00002750 <TriggerCommon>:
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	1f 92       	push	r1
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	5c 01       	movw	r10, r24
    276c:	e6 2e       	mov	r14, r22
    276e:	fc 01       	movw	r30, r24
    2770:	80 81       	ld	r24, Z
    2772:	f8 2f       	mov	r31, r24
    2774:	f0 78       	andi	r31, 0x80	; 128
    2776:	ff 2e       	mov	r15, r31
    2778:	f5 01       	movw	r30, r10
    277a:	17 86       	std	Z+15, r1	; 0x0f
    277c:	9f ef       	ldi	r25, 0xFF	; 255
    277e:	96 87       	std	Z+14, r25	; 0x0e
    2780:	45 87       	std	Z+13, r20	; 0x0d
    2782:	14 8a       	std	Z+20, r1	; 0x14
    2784:	87 7b       	andi	r24, 0xB7	; 183
    2786:	80 83       	st	Z, r24
    2788:	12 86       	std	Z+10, r1	; 0x0a
    278a:	11 86       	std	Z+9, r1	; 0x09
    278c:	21 83       	std	Z+1, r18	; 0x01
    278e:	14 82       	std	Z+4, r1	; 0x04
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	f9 e0       	ldi	r31, 0x09	; 9
    2794:	6f 9f       	mul	r22, r31
    2796:	80 01       	movw	r16, r0
    2798:	11 24       	eor	r1, r1
    279a:	83 30       	cpi	r24, 0x03	; 3
    279c:	51 f5       	brne	.+84     	; 0x27f2 <TriggerCommon+0xa2>
    279e:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <tr4_pos_frac>
    27a2:	80 91 0b 08 	lds	r24, 0x080B	; 0x80080b <patchPointers>
    27a6:	90 91 0c 08 	lds	r25, 0x080C	; 0x80080c <patchPointers+0x1>
    27aa:	80 0f       	add	r24, r16
    27ac:	91 1f       	adc	r25, r17
    27ae:	fc 01       	movw	r30, r24
    27b0:	31 96       	adiw	r30, 0x01	; 1
    27b2:	a5 91       	lpm	r26, Z+
    27b4:	b4 91       	lpm	r27, Z
    27b6:	b0 93 a1 07 	sts	0x07A1, r27	; 0x8007a1 <tr4_pos_hi>
    27ba:	a0 93 a0 07 	sts	0x07A0, r26	; 0x8007a0 <tr4_pos_lo>
    27be:	ac 01       	movw	r20, r24
    27c0:	49 5f       	subi	r20, 0xF9	; 249
    27c2:	5f 4f       	sbci	r21, 0xFF	; 255
    27c4:	fa 01       	movw	r30, r20
    27c6:	c5 90       	lpm	r12, Z+
    27c8:	d4 90       	lpm	r13, Z
    27ca:	05 96       	adiw	r24, 0x05	; 5
    27cc:	fc 01       	movw	r30, r24
    27ce:	65 91       	lpm	r22, Z+
    27d0:	74 91       	lpm	r23, Z
    27d2:	c6 1a       	sub	r12, r22
    27d4:	d7 0a       	sbc	r13, r23
    27d6:	d0 92 a3 07 	sts	0x07A3, r13	; 0x8007a3 <tr4_loop_len_hi>
    27da:	c0 92 a2 07 	sts	0x07A2, r12	; 0x8007a2 <tr4_loop_len_lo>
    27de:	fa 01       	movw	r30, r20
    27e0:	85 91       	lpm	r24, Z+
    27e2:	94 91       	lpm	r25, Z
    27e4:	a8 0f       	add	r26, r24
    27e6:	b9 1f       	adc	r27, r25
    27e8:	b0 93 a5 07 	sts	0x07A5, r27	; 0x8007a5 <tr4_loop_end_hi>
    27ec:	a0 93 a4 07 	sts	0x07A4, r26	; 0x8007a4 <tr4_loop_end_lo>
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <TriggerCommon+0xac>
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	29 83       	std	Y+1, r18	; 0x01
    27f6:	0e 94 80 14 	call	0x2900	; 0x2900 <SetMixerWave>
    27fa:	29 81       	ldd	r18, Y+1	; 0x01
    27fc:	62 2f       	mov	r22, r18
    27fe:	f5 01       	movw	r30, r10
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <SetMixerNote>
    2806:	f5 01       	movw	r30, r10
    2808:	ff 20       	and	r15, r15
    280a:	11 f0       	breq	.+4      	; 0x2810 <TriggerCommon+0xc0>
    280c:	e1 8a       	std	Z+17, r14	; 0x11
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <TriggerCommon+0xc2>
    2810:	e0 8a       	std	Z+16, r14	; 0x10
    2812:	e0 91 0b 08 	lds	r30, 0x080B	; 0x80080b <patchPointers>
    2816:	f0 91 0c 08 	lds	r31, 0x080C	; 0x80080c <patchPointers+0x1>
    281a:	e0 0f       	add	r30, r16
    281c:	f1 1f       	adc	r31, r17
    281e:	33 96       	adiw	r30, 0x03	; 3
    2820:	85 91       	lpm	r24, Z+
    2822:	94 91       	lpm	r25, Z
    2824:	f5 01       	movw	r30, r10
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	19 f4       	brne	.+6      	; 0x2830 <TriggerCommon+0xe0>
    282a:	16 8a       	std	Z+22, r1	; 0x16
    282c:	15 8a       	std	Z+21, r1	; 0x15
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <TriggerCommon+0xf0>
    2830:	13 8a       	std	Z+19, r1	; 0x13
    2832:	fc 01       	movw	r30, r24
    2834:	24 91       	lpm	r18, Z
    2836:	f5 01       	movw	r30, r10
    2838:	22 8b       	std	Z+18, r18	; 0x12
    283a:	01 96       	adiw	r24, 0x01	; 1
    283c:	96 8b       	std	Z+22, r25	; 0x16
    283e:	85 8b       	std	Z+21, r24	; 0x15
    2840:	0f 90       	pop	r0
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	08 95       	ret

00002858 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    285c:	a8 2f       	mov	r26, r24
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	97 e1       	ldi	r25, 0x17	; 23
    2862:	89 9f       	mul	r24, r25
    2864:	f0 01       	movw	r30, r0
    2866:	11 24       	eor	r1, r1
    2868:	e1 55       	subi	r30, 0x51	; 81
    286a:	f8 4f       	sbci	r31, 0xF8	; 248
    286c:	80 81       	ld	r24, Z
    286e:	85 ff       	sbrs	r24, 5
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <TriggerNote+0x1e>
    2872:	87 fd       	sbrc	r24, 7
    2874:	2e c0       	rjmp	.+92     	; 0x28d2 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    2876:	21 11       	cpse	r18, r1
    2878:	18 c0       	rjmp	.+48     	; 0x28aa <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    287a:	97 e1       	ldi	r25, 0x17	; 23
    287c:	9a 9f       	mul	r25, r26
    287e:	f0 01       	movw	r30, r0
    2880:	9b 9f       	mul	r25, r27
    2882:	f0 0d       	add	r31, r0
    2884:	11 24       	eor	r1, r1
    2886:	e1 55       	subi	r30, 0x51	; 81
    2888:	f8 4f       	sbci	r31, 0xF8	; 248
    288a:	97 85       	ldd	r25, Z+15	; 0x0f
    288c:	91 11       	cpse	r25, r1
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <TriggerNote+0x3c>
    2890:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    2892:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    2894:	97 e1       	ldi	r25, 0x17	; 23
    2896:	9a 9f       	mul	r25, r26
    2898:	f0 01       	movw	r30, r0
    289a:	9b 9f       	mul	r25, r27
    289c:	f0 0d       	add	r31, r0
    289e:	11 24       	eor	r1, r1
    28a0:	e1 55       	subi	r30, 0x51	; 81
    28a2:	f8 4f       	sbci	r31, 0xF8	; 248
    28a4:	8f 7b       	andi	r24, 0xBF	; 191
    28a6:	80 83       	st	Z, r24
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <TriggerNote+0x7a>
    28aa:	82 2f       	mov	r24, r18
    28ac:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    28ae:	97 e1       	ldi	r25, 0x17	; 23
    28b0:	9a 9f       	mul	r25, r26
    28b2:	e0 01       	movw	r28, r0
    28b4:	9b 9f       	mul	r25, r27
    28b6:	d0 0d       	add	r29, r0
    28b8:	11 24       	eor	r1, r1
    28ba:	c1 55       	subi	r28, 0x51	; 81
    28bc:	d8 4f       	sbci	r29, 0xF8	; 248
    28be:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    28c0:	1e 8a       	std	Y+22, r1	; 0x16
    28c2:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    28c4:	48 2f       	mov	r20, r24
    28c6:	ce 01       	movw	r24, r28
    28c8:	0e 94 a8 13 	call	0x2750	; 0x2750 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    28cc:	88 81       	ld	r24, Y
    28ce:	80 62       	ori	r24, 0x20	; 32
    28d0:	88 83       	st	Y, r24
		}

	}
}
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <SetMixerNote>:
    28d8:	99 27       	eor	r25, r25
    28da:	77 27       	eor	r23, r23

000028dc <set_note_waves>:
    28dc:	e8 e0       	ldi	r30, 0x08	; 8
    28de:	fa e2       	ldi	r31, 0x2A	; 42
    28e0:	66 0f       	add	r22, r22
    28e2:	77 1f       	adc	r23, r23
    28e4:	e6 0f       	add	r30, r22
    28e6:	f7 1f       	adc	r31, r23
    28e8:	a5 91       	lpm	r26, Z+
    28ea:	b4 91       	lpm	r27, Z
    28ec:	ea e8       	ldi	r30, 0x8A	; 138
    28ee:	f7 e0       	ldi	r31, 0x07	; 7
    28f0:	26 e0       	ldi	r18, 0x06	; 6
    28f2:	28 9f       	mul	r18, r24
    28f4:	e0 0d       	add	r30, r0
    28f6:	f1 1d       	adc	r31, r1
    28f8:	a1 83       	std	Z+1, r26	; 0x01
    28fa:	b2 83       	std	Z+2, r27	; 0x02
    28fc:	11 24       	eor	r1, r1
    28fe:	08 95       	ret

00002900 <SetMixerWave>:
    2900:	99 27       	eor	r25, r25
    2902:	77 27       	eor	r23, r23
    2904:	ea e8       	ldi	r30, 0x8A	; 138
    2906:	f7 e0       	ldi	r31, 0x07	; 7
    2908:	26 e0       	ldi	r18, 0x06	; 6
    290a:	28 9f       	mul	r18, r24
    290c:	e0 0d       	add	r30, r0
    290e:	f1 1d       	adc	r31, r1
    2910:	7c e2       	ldi	r23, 0x2C	; 44
    2912:	76 0f       	add	r23, r22
    2914:	75 83       	std	Z+5, r23	; 0x05

00002916 <esmw>:
    2916:	11 24       	eor	r1, r1
    2918:	08 95       	ret
	...

00002a00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    2a02:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <sound_enabled>
	ret
    2a06:	08 95       	ret

00002a08 <steptable>:
    2a08:	22 00       	.word	0x0022	; ????
    2a0a:	24 00       	.word	0x0024	; ????
    2a0c:	26 00       	.word	0x0026	; ????
    2a0e:	28 00       	.word	0x0028	; ????
    2a10:	2b 00       	.word	0x002b	; ????
    2a12:	2d 00       	.word	0x002d	; ????
    2a14:	30 00       	.word	0x0030	; ????
    2a16:	33 00       	.word	0x0033	; ????
    2a18:	36 00       	.word	0x0036	; ????
    2a1a:	39 00       	.word	0x0039	; ????
    2a1c:	3d 00       	.word	0x003d	; ????
    2a1e:	40 00       	.word	0x0040	; ????
    2a20:	44 00       	.word	0x0044	; ????
    2a22:	48 00       	.word	0x0048	; ????
    2a24:	4c 00       	.word	0x004c	; ????
    2a26:	51 00       	.word	0x0051	; ????
    2a28:	56 00       	.word	0x0056	; ????
    2a2a:	5b 00       	.word	0x005b	; ????
    2a2c:	60 00       	.word	0x0060	; ????
    2a2e:	66 00       	.word	0x0066	; ????
    2a30:	6c 00       	.word	0x006c	; ????
    2a32:	73 00       	.word	0x0073	; ????
    2a34:	79 00       	.word	0x0079	; ????
    2a36:	81 00       	.word	0x0081	; ????
    2a38:	88 00       	.word	0x0088	; ????
    2a3a:	90 00       	.word	0x0090	; ????
    2a3c:	99 00       	.word	0x0099	; ????
    2a3e:	a2 00       	.word	0x00a2	; ????
    2a40:	ac 00       	.word	0x00ac	; ????
    2a42:	b6 00       	.word	0x00b6	; ????
    2a44:	c1 00       	.word	0x00c1	; ????
    2a46:	cc 00       	.word	0x00cc	; ????
    2a48:	d8 00       	.word	0x00d8	; ????
    2a4a:	e5 00       	.word	0x00e5	; ????
    2a4c:	f3 00       	.word	0x00f3	; ????
    2a4e:	01 01       	movw	r0, r2
    2a50:	10 01       	movw	r2, r0
    2a52:	21 01       	movw	r4, r2
    2a54:	32 01       	movw	r6, r4
    2a56:	44 01       	movw	r8, r8
    2a58:	57 01       	movw	r10, r14
    2a5a:	6c 01       	movw	r12, r24
    2a5c:	81 01       	movw	r16, r2
    2a5e:	98 01       	movw	r18, r16
    2a60:	b0 01       	movw	r22, r0
    2a62:	ca 01       	movw	r24, r20
    2a64:	e5 01       	movw	r28, r10
    2a66:	02 02       	muls	r16, r18
    2a68:	21 02       	muls	r18, r17
    2a6a:	41 02       	muls	r20, r17
    2a6c:	64 02       	muls	r22, r20
    2a6e:	88 02       	muls	r24, r24
    2a70:	ae 02       	muls	r26, r30
    2a72:	d7 02       	muls	r29, r23
    2a74:	03 03       	mulsu	r16, r19
    2a76:	30 03       	mulsu	r19, r16
    2a78:	61 03       	mulsu	r22, r17
    2a7a:	94 03       	fmuls	r17, r20
    2a7c:	cb 03       	fmulsu	r20, r19
    2a7e:	05 04       	cpc	r0, r5
    2a80:	42 04       	cpc	r4, r2
    2a82:	83 04       	cpc	r8, r3
    2a84:	c7 04       	cpc	r12, r7
    2a86:	10 05       	cpc	r17, r0
    2a88:	5d 05       	cpc	r21, r13
    2a8a:	af 05       	cpc	r26, r15
    2a8c:	05 06       	cpc	r0, r21
    2a8e:	61 06       	cpc	r6, r17
    2a90:	c2 06       	cpc	r12, r18
    2a92:	29 07       	cpc	r18, r25
    2a94:	96 07       	cpc	r25, r22
    2a96:	09 08       	sbc	r0, r9
    2a98:	83 08       	sbc	r8, r3
    2a9a:	05 09       	sbc	r16, r5
    2a9c:	8e 09       	sbc	r24, r14
    2a9e:	20 0a       	sbc	r2, r16
    2aa0:	ba 0a       	sbc	r11, r26
    2aa2:	5d 0b       	sbc	r21, r29
    2aa4:	0a 0c       	add	r0, r10
    2aa6:	c1 0c       	add	r12, r1
    2aa8:	84 0d       	add	r24, r4
    2aaa:	51 0e       	add	r5, r17
    2aac:	2b 0f       	add	r18, r27
    2aae:	12 10       	cpse	r1, r2
    2ab0:	07 11       	cpse	r16, r7
    2ab2:	0a 12       	cpse	r0, r26
    2ab4:	1d 13       	cpse	r17, r29
    2ab6:	40 14       	cp	r4, r0
    2ab8:	74 15       	cp	r23, r4
    2aba:	ba 16       	cp	r11, r26
    2abc:	14 18       	sub	r1, r4
    2abe:	83 19       	sub	r24, r3
    2ac0:	07 1b       	sub	r16, r23
    2ac2:	a3 1c       	adc	r10, r3
    2ac4:	57 1e       	adc	r5, r23
    2ac6:	24 20       	and	r2, r4
    2ac8:	0e 22       	and	r0, r30
    2aca:	14 24       	eor	r1, r4
    2acc:	39 26       	eor	r3, r25
    2ace:	7f 28       	or	r7, r15
    2ad0:	e8 2a       	or	r14, r24
    2ad2:	75 2d       	mov	r23, r5
    2ad4:	29 30       	cpi	r18, 0x09	; 9
    2ad6:	06 33       	cpi	r16, 0x36	; 54
    2ad8:	0f 36       	cpi	r16, 0x6F	; 111
    2ada:	45 39       	cpi	r20, 0x95	; 149
    2adc:	ad 3c       	cpi	r26, 0xCD	; 205
    2ade:	49 40       	sbci	r20, 0x09	; 9
    2ae0:	1b 44       	sbci	r17, 0x4B	; 75
    2ae2:	28 48       	sbci	r18, 0x88	; 136
    2ae4:	73 4c       	sbci	r23, 0xC3	; 195
    2ae6:	fe 50       	subi	r31, 0x0E	; 14
    2ae8:	cf 55       	subi	r28, 0x5F	; 95
    2aea:	ea 5a       	subi	r30, 0xAA	; 170
    2aec:	51 60       	ori	r21, 0x01	; 1
    2aee:	0c 66       	ori	r16, 0x6C	; 108
    2af0:	1d 6c       	ori	r17, 0xCD	; 205
    2af2:	8b 72       	andi	r24, 0x2B	; 43
    2af4:	5a 79       	andi	r21, 0x9A	; 154
    2af6:	92 80       	ldd	r9, Z+2	; 0x02
    2af8:	37 88       	ldd	r3, Z+23	; 0x17
    2afa:	50 90 e5 98 	lds	r5, 0x98E5	; 0x8098e5 <__bss_end+0x90a4>
    2afe:	fd a1       	ldd	r31, Y+37	; 0x25
    2b00:	9f ab       	std	Y+55, r25	; 0x37
    2b02:	d3 b5       	in	r29, 0x23	; 35
    2b04:	a3 c0       	rjmp	.+326    	; 0x2c4c <waves+0x4c>
	...

00002c00 <waves>:
    2c00:	00 03       	mulsu	r16, r16
    2c02:	06 09       	sbc	r16, r6
    2c04:	0c 10       	cpse	r0, r12
    2c06:	13 16       	cp	r1, r19
    2c08:	19 1c       	adc	r1, r9
    2c0a:	1f 22       	and	r1, r31
    2c0c:	25 28       	or	r2, r5
    2c0e:	2b 2e       	mov	r2, r27
    2c10:	31 33       	cpi	r19, 0x31	; 49
    2c12:	36 39       	cpi	r19, 0x96	; 150
    2c14:	3c 3f       	cpi	r19, 0xFC	; 252
    2c16:	41 44       	sbci	r20, 0x41	; 65
    2c18:	47 49       	sbci	r20, 0x97	; 151
    2c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    2c1c:	51 53       	subi	r21, 0x31	; 49
    2c1e:	55 58       	subi	r21, 0x85	; 133
    2c20:	5a 5c       	subi	r21, 0xCA	; 202
    2c22:	5e 60       	ori	r21, 0x0E	; 14
    2c24:	62 64       	ori	r22, 0x42	; 66
    2c26:	66 68       	ori	r22, 0x86	; 134
    2c28:	6a 6b       	ori	r22, 0xBA	; 186
    2c2a:	6d 6f       	ori	r22, 0xFD	; 253
    2c2c:	70 71       	andi	r23, 0x10	; 16
    2c2e:	73 74       	andi	r23, 0x43	; 67
    2c30:	75 76       	andi	r23, 0x65	; 101
    2c32:	78 79       	andi	r23, 0x98	; 152
    2c34:	7a 7a       	andi	r23, 0xAA	; 170
    2c36:	7b 7c       	andi	r23, 0xCB	; 203
    2c38:	7d 7d       	andi	r23, 0xDD	; 221
    2c3a:	7e 7e       	andi	r23, 0xEE	; 238
    2c3c:	7e 7f       	andi	r23, 0xFE	; 254
    2c3e:	7f 7f       	andi	r23, 0xFF	; 255
    2c40:	7f 7f       	andi	r23, 0xFF	; 255
    2c42:	7f 7f       	andi	r23, 0xFF	; 255
    2c44:	7e 7e       	andi	r23, 0xEE	; 238
    2c46:	7e 7d       	andi	r23, 0xDE	; 222
    2c48:	7d 7c       	andi	r23, 0xCD	; 205
    2c4a:	7b 7a       	andi	r23, 0xAB	; 171
    2c4c:	7a 79       	andi	r23, 0x9A	; 154
    2c4e:	78 76       	andi	r23, 0x68	; 104
    2c50:	75 74       	andi	r23, 0x45	; 69
    2c52:	73 71       	andi	r23, 0x13	; 19
    2c54:	70 6f       	ori	r23, 0xF0	; 240
    2c56:	6d 6b       	ori	r22, 0xBD	; 189
    2c58:	6a 68       	ori	r22, 0x8A	; 138
    2c5a:	66 64       	ori	r22, 0x46	; 70
    2c5c:	62 60       	ori	r22, 0x02	; 2
    2c5e:	5e 5c       	subi	r21, 0xCE	; 206
    2c60:	5a 58       	subi	r21, 0x8A	; 138
    2c62:	55 53       	subi	r21, 0x35	; 53
    2c64:	51 4e       	sbci	r21, 0xE1	; 225
    2c66:	4c 49       	sbci	r20, 0x9C	; 156
    2c68:	47 44       	sbci	r20, 0x47	; 71
    2c6a:	41 3f       	cpi	r20, 0xF1	; 241
    2c6c:	3c 39       	cpi	r19, 0x9C	; 156
    2c6e:	36 33       	cpi	r19, 0x36	; 54
    2c70:	31 2e       	mov	r3, r17
    2c72:	2b 28       	or	r2, r11
    2c74:	25 22       	and	r2, r21
    2c76:	1f 1c       	adc	r1, r15
    2c78:	19 16       	cp	r1, r25
    2c7a:	13 10       	cpse	r1, r3
    2c7c:	0c 09       	sbc	r16, r12
    2c7e:	06 03       	mulsu	r16, r22
    2c80:	00 fd       	sbrc	r16, 0
    2c82:	fa f7       	brpl	.-2      	; 0x2c82 <waves+0x82>
    2c84:	f4 f0       	brlt	.+60     	; 0x2cc2 <waves+0xc2>
    2c86:	ed ea       	ldi	r30, 0xAD	; 173
    2c88:	e7 e4       	ldi	r30, 0x47	; 71
    2c8a:	e1 de       	rcall	.-574    	; 0x2a4e <steptable+0x46>
    2c8c:	db d8       	rcall	.-3658   	; 0x1e44 <ch4_loop+0x3e>
    2c8e:	d5 d2       	rcall	.+1450   	; 0x323a <waves+0x63a>
    2c90:	cf cd       	rjmp	.-1122   	; 0x2830 <TriggerCommon+0xe0>
    2c92:	ca c7       	rjmp	.+3988   	; 0x3c28 <_etext+0xdc>
    2c94:	c4 c1       	rjmp	.+904    	; 0x301e <waves+0x41e>
    2c96:	bf bc       	out	0x2f, r11	; 47
    2c98:	b9 b7       	in	r27, 0x39	; 57
    2c9a:	b4 b2       	in	r11, 0x14	; 20
    2c9c:	af ad       	ldd	r26, Y+63	; 0x3f
    2c9e:	ab a8       	ldd	r10, Y+51	; 0x33
    2ca0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2ca2:	a2 a0       	ldd	r10, Z+34	; 0x22
    2ca4:	9e 9c       	mul	r9, r14
    2ca6:	9a 98       	cbi	0x13, 2	; 19
    2ca8:	96 95       	lsr	r25
    2caa:	93 91       	.word	0x9193	; ????
    2cac:	90 8f       	std	Z+24, r25	; 0x18
    2cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    2cb0:	8b 8a       	std	Y+19, r8	; 0x13
    2cb2:	88 87       	std	Y+8, r24	; 0x08
    2cb4:	86 86       	std	Z+14, r8	; 0x0e
    2cb6:	85 84       	ldd	r8, Z+13	; 0x0d
    2cb8:	83 83       	std	Z+3, r24	; 0x03
    2cba:	82 82       	std	Z+2, r8	; 0x02
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	81 81       	ldd	r24, Z+1	; 0x01
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	81 81       	ldd	r24, Z+1	; 0x01
    2cc4:	82 82       	std	Z+2, r8	; 0x02
    2cc6:	82 83       	std	Z+2, r24	; 0x02
    2cc8:	83 84       	ldd	r8, Z+11	; 0x0b
    2cca:	85 86       	std	Z+13, r8	; 0x0d
    2ccc:	86 87       	std	Z+14, r24	; 0x0e
    2cce:	88 8a       	std	Y+16, r8	; 0x10
    2cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd4:	90 91 93 95 	lds	r25, 0x9593	; 0x809593 <__bss_end+0x8d52>
    2cd8:	96 98       	cbi	0x12, 6	; 18
    2cda:	9a 9c       	mul	r9, r10
    2cdc:	9e a0       	ldd	r9, Y+38	; 0x26
    2cde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    2ce0:	a6 a8       	ldd	r10, Z+54	; 0x36
    2ce2:	ab ad       	ldd	r26, Y+59	; 0x3b
    2ce4:	af b2       	in	r10, 0x1f	; 31
    2ce6:	b4 b7       	in	r27, 0x34	; 52
    2ce8:	b9 bc       	out	0x29, r11	; 41
    2cea:	bf c1       	rjmp	.+894    	; 0x306a <waves+0x46a>
    2cec:	c4 c7       	rjmp	.+3976   	; 0x3c76 <_etext+0x12a>
    2cee:	ca cd       	rjmp	.-1132   	; 0x2884 <TriggerNote+0x2c>
    2cf0:	cf d2       	rcall	.+1438   	; 0x3290 <waves+0x690>
    2cf2:	d5 d8       	rcall	.-3670   	; 0x1e9e <mix_loop+0x10>
    2cf4:	db de       	rcall	.-586    	; 0x2aac <steptable+0xa4>
    2cf6:	e1 e4       	ldi	r30, 0x41	; 65
    2cf8:	e7 ea       	ldi	r30, 0xA7	; 167
    2cfa:	ed f0       	brhs	.+58     	; 0x2d36 <waves+0x136>
    2cfc:	f4 f7       	brge	.-4      	; 0x2cfa <waves+0xfa>
    2cfe:	fa fd       	.word	0xfdfa	; ????
    2d00:	80 81       	ld	r24, Z
    2d02:	82 83       	std	Z+2, r24	; 0x02
    2d04:	84 85       	ldd	r24, Z+12	; 0x0c
    2d06:	86 87       	std	Z+14, r24	; 0x0e
    2d08:	88 89       	ldd	r24, Y+16	; 0x10
    2d0a:	8a 8b       	std	Y+18, r24	; 0x12
    2d0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d10:	90 91 92 93 	lds	r25, 0x9392	; 0x809392 <__bss_end+0x8b51>
    2d14:	94 95       	.word	0x9594	; ????
    2d16:	96 97       	sbiw	r26, 0x26	; 38
    2d18:	98 99       	sbic	0x13, 0	; 19
    2d1a:	9a 9b       	sbis	0x13, 2	; 19
    2d1c:	9c 9d       	mul	r25, r12
    2d1e:	9e 9f       	mul	r25, r30
    2d20:	a0 a1       	ldd	r26, Z+32	; 0x20
    2d22:	a2 a3       	std	Z+34, r26	; 0x22
    2d24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2d26:	a6 a7       	std	Z+46, r26	; 0x2e
    2d28:	a8 a9       	ldd	r26, Y+48	; 0x30
    2d2a:	aa ab       	std	Y+50, r26	; 0x32
    2d2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    2d2e:	ae af       	std	Y+62, r26	; 0x3e
    2d30:	b0 b1       	in	r27, 0x00	; 0
    2d32:	b2 b3       	in	r27, 0x12	; 18
    2d34:	b4 b5       	in	r27, 0x24	; 36
    2d36:	b6 b7       	in	r27, 0x36	; 54
    2d38:	b8 b9       	out	0x08, r27	; 8
    2d3a:	ba bb       	out	0x1a, r27	; 26
    2d3c:	bc bd       	out	0x2c, r27	; 44
    2d3e:	be bf       	out	0x3e, r27	; 62
    2d40:	c0 c1       	rjmp	.+896    	; 0x30c2 <waves+0x4c2>
    2d42:	c2 c3       	rjmp	.+1924   	; 0x34c8 <waves+0x8c8>
    2d44:	c4 c5       	rjmp	.+2952   	; 0x38ce <main+0xe>
    2d46:	c6 c7       	rjmp	.+3980   	; 0x3cd4 <_etext+0x188>
    2d48:	c8 c9       	rjmp	.-3184   	; 0x20da <FormatEeprom+0xe>
    2d4a:	ca cb       	rjmp	.-2156   	; 0x24e0 <ProcessMusic+0x1d0>
    2d4c:	cc cd       	rjmp	.-1128   	; 0x28e6 <set_note_waves+0xa>
    2d4e:	ce cf       	rjmp	.-100    	; 0x2cec <waves+0xec>
    2d50:	d0 d1       	rcall	.+928    	; 0x30f2 <waves+0x4f2>
    2d52:	d2 d3       	rcall	.+1956   	; 0x34f8 <waves+0x8f8>
    2d54:	d4 d5       	rcall	.+2984   	; 0x38fe <main+0x3e>
    2d56:	d6 d7       	rcall	.+4012   	; 0x3d04 <_etext+0x1b8>
    2d58:	d8 d9       	rcall	.-3152   	; 0x210a <FormatEeprom+0x3e>
    2d5a:	da db       	rcall	.-2124   	; 0x2510 <ProcessMusic+0x200>
    2d5c:	dc dd       	rcall	.-1096   	; 0x2916 <esmw>
    2d5e:	de df       	rcall	.-68     	; 0x2d1c <waves+0x11c>
    2d60:	e0 e1       	ldi	r30, 0x10	; 16
    2d62:	e2 e3       	ldi	r30, 0x32	; 50
    2d64:	e4 e5       	ldi	r30, 0x54	; 84
    2d66:	e6 e7       	ldi	r30, 0x76	; 118
    2d68:	e8 e9       	ldi	r30, 0x98	; 152
    2d6a:	ea eb       	ldi	r30, 0xBA	; 186
    2d6c:	ec ed       	ldi	r30, 0xDC	; 220
    2d6e:	ee ef       	ldi	r30, 0xFE	; 254
    2d70:	f0 f1       	brcs	.+124    	; 0x2dee <waves+0x1ee>
    2d72:	f2 f3       	brmi	.-4      	; 0x2d70 <waves+0x170>
    2d74:	f4 f5       	brge	.+124    	; 0x2df2 <waves+0x1f2>
    2d76:	f6 f7       	brtc	.-4      	; 0x2d74 <waves+0x174>
    2d78:	f8 f9       	.word	0xf9f8	; ????
    2d7a:	fa fb       	.word	0xfbfa	; ????
    2d7c:	fc fd       	.word	0xfdfc	; ????
    2d7e:	fe ff       	.word	0xfffe	; ????
    2d80:	00 01       	movw	r0, r0
    2d82:	02 03       	mulsu	r16, r18
    2d84:	04 05       	cpc	r16, r4
    2d86:	06 07       	cpc	r16, r22
    2d88:	08 09       	sbc	r16, r8
    2d8a:	0a 0b       	sbc	r16, r26
    2d8c:	0c 0d       	add	r16, r12
    2d8e:	0e 0f       	add	r16, r30
    2d90:	10 11       	cpse	r17, r0
    2d92:	12 13       	cpse	r17, r18
    2d94:	14 15       	cp	r17, r4
    2d96:	16 17       	cp	r17, r22
    2d98:	18 19       	sub	r17, r8
    2d9a:	1a 1b       	sub	r17, r26
    2d9c:	1c 1d       	adc	r17, r12
    2d9e:	1e 1f       	adc	r17, r30
    2da0:	20 21       	and	r18, r0
    2da2:	22 23       	and	r18, r18
    2da4:	24 25       	eor	r18, r4
    2da6:	26 27       	eor	r18, r22
    2da8:	28 29       	or	r18, r8
    2daa:	2a 2b       	or	r18, r26
    2dac:	2c 2d       	mov	r18, r12
    2dae:	2e 2f       	mov	r18, r30
    2db0:	30 31       	cpi	r19, 0x10	; 16
    2db2:	32 33       	cpi	r19, 0x32	; 50
    2db4:	34 35       	cpi	r19, 0x54	; 84
    2db6:	36 37       	cpi	r19, 0x76	; 118
    2db8:	38 39       	cpi	r19, 0x98	; 152
    2dba:	3a 3b       	cpi	r19, 0xBA	; 186
    2dbc:	3c 3d       	cpi	r19, 0xDC	; 220
    2dbe:	3e 3f       	cpi	r19, 0xFE	; 254
    2dc0:	40 41       	sbci	r20, 0x10	; 16
    2dc2:	42 43       	sbci	r20, 0x32	; 50
    2dc4:	44 45       	sbci	r20, 0x54	; 84
    2dc6:	46 47       	sbci	r20, 0x76	; 118
    2dc8:	48 49       	sbci	r20, 0x98	; 152
    2dca:	4a 4b       	sbci	r20, 0xBA	; 186
    2dcc:	4c 4d       	sbci	r20, 0xDC	; 220
    2dce:	4e 4f       	sbci	r20, 0xFE	; 254
    2dd0:	50 51       	subi	r21, 0x10	; 16
    2dd2:	52 53       	subi	r21, 0x32	; 50
    2dd4:	54 55       	subi	r21, 0x54	; 84
    2dd6:	56 57       	subi	r21, 0x76	; 118
    2dd8:	58 59       	subi	r21, 0x98	; 152
    2dda:	5a 5b       	subi	r21, 0xBA	; 186
    2ddc:	5c 5d       	subi	r21, 0xDC	; 220
    2dde:	5e 5f       	subi	r21, 0xFE	; 254
    2de0:	60 61       	ori	r22, 0x10	; 16
    2de2:	62 63       	ori	r22, 0x32	; 50
    2de4:	64 65       	ori	r22, 0x54	; 84
    2de6:	66 67       	ori	r22, 0x76	; 118
    2de8:	68 69       	ori	r22, 0x98	; 152
    2dea:	6a 6b       	ori	r22, 0xBA	; 186
    2dec:	6c 6d       	ori	r22, 0xDC	; 220
    2dee:	6e 6f       	ori	r22, 0xFE	; 254
    2df0:	70 71       	andi	r23, 0x10	; 16
    2df2:	72 73       	andi	r23, 0x32	; 50
    2df4:	74 75       	andi	r23, 0x54	; 84
    2df6:	76 77       	andi	r23, 0x76	; 118
    2df8:	78 79       	andi	r23, 0x98	; 152
    2dfa:	7a 7b       	andi	r23, 0xBA	; 186
    2dfc:	7c 7d       	andi	r23, 0xDC	; 220
    2dfe:	7e 7f       	andi	r23, 0xFE	; 254
    2e00:	00 02       	muls	r16, r16
    2e02:	04 06       	cpc	r0, r20
    2e04:	08 0a       	sbc	r0, r24
    2e06:	0c 0e       	add	r0, r28
    2e08:	10 12       	cpse	r1, r16
    2e0a:	14 16       	cp	r1, r20
    2e0c:	18 1a       	sub	r1, r24
    2e0e:	1c 1e       	adc	r1, r28
    2e10:	20 22       	and	r2, r16
    2e12:	24 26       	eor	r2, r20
    2e14:	28 2a       	or	r2, r24
    2e16:	2c 2e       	mov	r2, r28
    2e18:	30 32       	cpi	r19, 0x20	; 32
    2e1a:	34 36       	cpi	r19, 0x64	; 100
    2e1c:	38 3a       	cpi	r19, 0xA8	; 168
    2e1e:	3c 3e       	cpi	r19, 0xEC	; 236
    2e20:	40 42       	sbci	r20, 0x20	; 32
    2e22:	44 46       	sbci	r20, 0x64	; 100
    2e24:	48 4a       	sbci	r20, 0xA8	; 168
    2e26:	4c 4e       	sbci	r20, 0xEC	; 236
    2e28:	50 52       	subi	r21, 0x20	; 32
    2e2a:	54 56       	subi	r21, 0x64	; 100
    2e2c:	58 5a       	subi	r21, 0xA8	; 168
    2e2e:	5c 5e       	subi	r21, 0xEC	; 236
    2e30:	60 62       	ori	r22, 0x20	; 32
    2e32:	64 66       	ori	r22, 0x64	; 100
    2e34:	68 6a       	ori	r22, 0xA8	; 168
    2e36:	6c 6e       	ori	r22, 0xEC	; 236
    2e38:	70 72       	andi	r23, 0x20	; 32
    2e3a:	74 76       	andi	r23, 0x64	; 100
    2e3c:	78 7a       	andi	r23, 0xA8	; 168
    2e3e:	7c 7e       	andi	r23, 0xEC	; 236
    2e40:	7f 7d       	andi	r23, 0xDF	; 223
    2e42:	7b 79       	andi	r23, 0x9B	; 155
    2e44:	77 75       	andi	r23, 0x57	; 87
    2e46:	73 71       	andi	r23, 0x13	; 19
    2e48:	6f 6d       	ori	r22, 0xDF	; 223
    2e4a:	6b 69       	ori	r22, 0x9B	; 155
    2e4c:	67 65       	ori	r22, 0x57	; 87
    2e4e:	63 61       	ori	r22, 0x13	; 19
    2e50:	5f 5d       	subi	r21, 0xDF	; 223
    2e52:	5b 59       	subi	r21, 0x9B	; 155
    2e54:	57 55       	subi	r21, 0x57	; 87
    2e56:	53 51       	subi	r21, 0x13	; 19
    2e58:	4f 4d       	sbci	r20, 0xDF	; 223
    2e5a:	4b 49       	sbci	r20, 0x9B	; 155
    2e5c:	47 45       	sbci	r20, 0x57	; 87
    2e5e:	43 41       	sbci	r20, 0x13	; 19
    2e60:	3f 3d       	cpi	r19, 0xDF	; 223
    2e62:	3b 39       	cpi	r19, 0x9B	; 155
    2e64:	37 35       	cpi	r19, 0x57	; 87
    2e66:	33 31       	cpi	r19, 0x13	; 19
    2e68:	2f 2d       	mov	r18, r15
    2e6a:	2b 29       	or	r18, r11
    2e6c:	27 25       	eor	r18, r7
    2e6e:	23 21       	and	r18, r3
    2e70:	1f 1d       	adc	r17, r15
    2e72:	1b 19       	sub	r17, r11
    2e74:	17 15       	cp	r17, r7
    2e76:	13 11       	cpse	r17, r3
    2e78:	0f 0d       	add	r16, r15
    2e7a:	0b 09       	sbc	r16, r11
    2e7c:	07 05       	cpc	r16, r7
    2e7e:	03 01       	movw	r0, r6
    2e80:	ff fd       	.word	0xfdff	; ????
    2e82:	fb f9       	.word	0xf9fb	; ????
    2e84:	f7 f5       	brid	.+124    	; 0x2f02 <waves+0x302>
    2e86:	f3 f1       	brvs	.+124    	; 0x2f04 <waves+0x304>
    2e88:	ef ed       	ldi	r30, 0xDF	; 223
    2e8a:	eb e9       	ldi	r30, 0x9B	; 155
    2e8c:	e7 e5       	ldi	r30, 0x57	; 87
    2e8e:	e3 e1       	ldi	r30, 0x13	; 19
    2e90:	df dd       	rcall	.-1090   	; 0x2a50 <steptable+0x48>
    2e92:	db d9       	rcall	.-3146   	; 0x224a <PatchCommand14+0x16>
    2e94:	d7 d5       	rcall	.+2990   	; 0x3a44 <CustomWaitVsync+0x1a>
    2e96:	d3 d1       	rcall	.+934    	; 0x323e <waves+0x63e>
    2e98:	cf cd       	rjmp	.-1122   	; 0x2a38 <steptable+0x30>
    2e9a:	cb c9       	rjmp	.-3178   	; 0x2232 <PatchCommand13+0x4>
    2e9c:	c7 c5       	rjmp	.+2958   	; 0x3a2c <CustomWaitVsync+0x2>
    2e9e:	c3 c1       	rjmp	.+902    	; 0x3226 <waves+0x626>
    2ea0:	bf bd       	out	0x2f, r27	; 47
    2ea2:	bb b9       	out	0x0b, r27	; 11
    2ea4:	b7 b5       	in	r27, 0x27	; 39
    2ea6:	b3 b1       	in	r27, 0x03	; 3
    2ea8:	af ad       	ldd	r26, Y+63	; 0x3f
    2eaa:	ab a9       	ldd	r26, Y+51	; 0x33
    2eac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    2eae:	a3 a1       	ldd	r26, Z+35	; 0x23
    2eb0:	9f 9d       	mul	r25, r15
    2eb2:	9b 99       	sbic	0x13, 3	; 19
    2eb4:	97 95       	ror	r25
    2eb6:	93 91       	.word	0x9193	; ????
    2eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eba:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebc:	87 85       	ldd	r24, Z+15	; 0x0f
    2ebe:	83 81       	ldd	r24, Z+3	; 0x03
    2ec0:	80 82       	st	Z, r8
    2ec2:	84 86       	std	Z+12, r8	; 0x0c
    2ec4:	88 8a       	std	Y+16, r8	; 0x10
    2ec6:	8c 8e       	std	Y+28, r8	; 0x1c
    2ec8:	90 92 94 96 	sts	0x9694, r9	; 0x809694 <__bss_end+0x8e53>
    2ecc:	98 9a       	sbi	0x13, 0	; 19
    2ece:	9c 9e       	mul	r9, r28
    2ed0:	a0 a2       	std	Z+32, r10	; 0x20
    2ed2:	a4 a6       	std	Z+44, r10	; 0x2c
    2ed4:	a8 aa       	std	Y+48, r10	; 0x30
    2ed6:	ac ae       	std	Y+60, r10	; 0x3c
    2ed8:	b0 b2       	in	r11, 0x10	; 16
    2eda:	b4 b6       	in	r11, 0x34	; 52
    2edc:	b8 ba       	out	0x18, r11	; 24
    2ede:	bc be       	out	0x3c, r11	; 60
    2ee0:	c0 c2       	rjmp	.+1408   	; 0x3462 <waves+0x862>
    2ee2:	c4 c6       	rjmp	.+3464   	; 0x3c6c <_etext+0x120>
    2ee4:	c8 ca       	rjmp	.-2672   	; 0x2476 <ProcessMusic+0x166>
    2ee6:	cc ce       	rjmp	.-616    	; 0x2c80 <waves+0x80>
    2ee8:	d0 d2       	rcall	.+1440   	; 0x348a <waves+0x88a>
    2eea:	d4 d6       	rcall	.+3496   	; 0x3c94 <_etext+0x148>
    2eec:	d8 da       	rcall	.-2640   	; 0x249e <ProcessMusic+0x18e>
    2eee:	dc de       	rcall	.-584    	; 0x2ca8 <waves+0xa8>
    2ef0:	e0 e2       	ldi	r30, 0x20	; 32
    2ef2:	e4 e6       	ldi	r30, 0x64	; 100
    2ef4:	e8 ea       	ldi	r30, 0xA8	; 168
    2ef6:	ec ee       	ldi	r30, 0xEC	; 236
    2ef8:	f0 f2       	brcs	.-68     	; 0x2eb6 <waves+0x2b6>
    2efa:	f4 f6       	brge	.-68     	; 0x2eb8 <waves+0x2b8>
    2efc:	f8 fa       	.word	0xfaf8	; ????
    2efe:	fc fe       	.word	0xfefc	; ????
    2f00:	7f 7f       	andi	r23, 0xFF	; 255
    2f02:	7f 7f       	andi	r23, 0xFF	; 255
    2f04:	7f 7f       	andi	r23, 0xFF	; 255
    2f06:	7f 7f       	andi	r23, 0xFF	; 255
    2f08:	7f 7f       	andi	r23, 0xFF	; 255
    2f0a:	7f 7f       	andi	r23, 0xFF	; 255
    2f0c:	7f 7f       	andi	r23, 0xFF	; 255
    2f0e:	7f 7f       	andi	r23, 0xFF	; 255
    2f10:	7f 7f       	andi	r23, 0xFF	; 255
    2f12:	7f 7f       	andi	r23, 0xFF	; 255
    2f14:	7f 7f       	andi	r23, 0xFF	; 255
    2f16:	7f 7f       	andi	r23, 0xFF	; 255
    2f18:	7f 7f       	andi	r23, 0xFF	; 255
    2f1a:	7f 7f       	andi	r23, 0xFF	; 255
    2f1c:	7f 7f       	andi	r23, 0xFF	; 255
    2f1e:	7f 7f       	andi	r23, 0xFF	; 255
    2f20:	7f 7f       	andi	r23, 0xFF	; 255
    2f22:	7f 7f       	andi	r23, 0xFF	; 255
    2f24:	7f 7f       	andi	r23, 0xFF	; 255
    2f26:	7f 7f       	andi	r23, 0xFF	; 255
    2f28:	7f 7f       	andi	r23, 0xFF	; 255
    2f2a:	7f 7f       	andi	r23, 0xFF	; 255
    2f2c:	7f 7f       	andi	r23, 0xFF	; 255
    2f2e:	7f 7f       	andi	r23, 0xFF	; 255
    2f30:	7f 7f       	andi	r23, 0xFF	; 255
    2f32:	7f 7f       	andi	r23, 0xFF	; 255
    2f34:	7f 7f       	andi	r23, 0xFF	; 255
    2f36:	7f 7f       	andi	r23, 0xFF	; 255
    2f38:	7f 7f       	andi	r23, 0xFF	; 255
    2f3a:	7f 7f       	andi	r23, 0xFF	; 255
    2f3c:	7f 7f       	andi	r23, 0xFF	; 255
    2f3e:	7f 7f       	andi	r23, 0xFF	; 255
    2f40:	80 80       	ld	r8, Z
    2f42:	80 80       	ld	r8, Z
    2f44:	80 80       	ld	r8, Z
    2f46:	80 80       	ld	r8, Z
    2f48:	80 80       	ld	r8, Z
    2f4a:	80 80       	ld	r8, Z
    2f4c:	80 80       	ld	r8, Z
    2f4e:	80 80       	ld	r8, Z
    2f50:	80 80       	ld	r8, Z
    2f52:	80 80       	ld	r8, Z
    2f54:	80 80       	ld	r8, Z
    2f56:	80 80       	ld	r8, Z
    2f58:	80 80       	ld	r8, Z
    2f5a:	80 80       	ld	r8, Z
    2f5c:	80 80       	ld	r8, Z
    2f5e:	80 80       	ld	r8, Z
    2f60:	80 80       	ld	r8, Z
    2f62:	80 80       	ld	r8, Z
    2f64:	80 80       	ld	r8, Z
    2f66:	80 80       	ld	r8, Z
    2f68:	80 80       	ld	r8, Z
    2f6a:	80 80       	ld	r8, Z
    2f6c:	80 80       	ld	r8, Z
    2f6e:	80 80       	ld	r8, Z
    2f70:	80 80       	ld	r8, Z
    2f72:	80 80       	ld	r8, Z
    2f74:	80 80       	ld	r8, Z
    2f76:	80 80       	ld	r8, Z
    2f78:	80 80       	ld	r8, Z
    2f7a:	80 80       	ld	r8, Z
    2f7c:	80 80       	ld	r8, Z
    2f7e:	80 80       	ld	r8, Z
    2f80:	80 80       	ld	r8, Z
    2f82:	80 80       	ld	r8, Z
    2f84:	80 80       	ld	r8, Z
    2f86:	80 80       	ld	r8, Z
    2f88:	80 80       	ld	r8, Z
    2f8a:	80 80       	ld	r8, Z
    2f8c:	80 80       	ld	r8, Z
    2f8e:	80 80       	ld	r8, Z
    2f90:	80 80       	ld	r8, Z
    2f92:	80 80       	ld	r8, Z
    2f94:	80 80       	ld	r8, Z
    2f96:	80 80       	ld	r8, Z
    2f98:	80 80       	ld	r8, Z
    2f9a:	80 80       	ld	r8, Z
    2f9c:	80 80       	ld	r8, Z
    2f9e:	80 80       	ld	r8, Z
    2fa0:	80 80       	ld	r8, Z
    2fa2:	80 80       	ld	r8, Z
    2fa4:	80 80       	ld	r8, Z
    2fa6:	80 80       	ld	r8, Z
    2fa8:	80 80       	ld	r8, Z
    2faa:	80 80       	ld	r8, Z
    2fac:	80 80       	ld	r8, Z
    2fae:	80 80       	ld	r8, Z
    2fb0:	80 80       	ld	r8, Z
    2fb2:	80 80       	ld	r8, Z
    2fb4:	80 80       	ld	r8, Z
    2fb6:	80 80       	ld	r8, Z
    2fb8:	80 80       	ld	r8, Z
    2fba:	80 80       	ld	r8, Z
    2fbc:	80 80       	ld	r8, Z
    2fbe:	80 80       	ld	r8, Z
    2fc0:	80 80       	ld	r8, Z
    2fc2:	80 80       	ld	r8, Z
    2fc4:	80 80       	ld	r8, Z
    2fc6:	80 80       	ld	r8, Z
    2fc8:	80 80       	ld	r8, Z
    2fca:	80 80       	ld	r8, Z
    2fcc:	80 80       	ld	r8, Z
    2fce:	80 80       	ld	r8, Z
    2fd0:	80 80       	ld	r8, Z
    2fd2:	80 80       	ld	r8, Z
    2fd4:	80 80       	ld	r8, Z
    2fd6:	80 80       	ld	r8, Z
    2fd8:	80 80       	ld	r8, Z
    2fda:	80 80       	ld	r8, Z
    2fdc:	80 80       	ld	r8, Z
    2fde:	80 80       	ld	r8, Z
    2fe0:	80 80       	ld	r8, Z
    2fe2:	80 80       	ld	r8, Z
    2fe4:	80 80       	ld	r8, Z
    2fe6:	80 80       	ld	r8, Z
    2fe8:	80 80       	ld	r8, Z
    2fea:	80 80       	ld	r8, Z
    2fec:	80 80       	ld	r8, Z
    2fee:	80 80       	ld	r8, Z
    2ff0:	80 80       	ld	r8, Z
    2ff2:	80 80       	ld	r8, Z
    2ff4:	80 80       	ld	r8, Z
    2ff6:	80 80       	ld	r8, Z
    2ff8:	80 80       	ld	r8, Z
    2ffa:	80 80       	ld	r8, Z
    2ffc:	80 80       	ld	r8, Z
    2ffe:	80 80       	ld	r8, Z
    3000:	7f 7f       	andi	r23, 0xFF	; 255
    3002:	7f 7f       	andi	r23, 0xFF	; 255
    3004:	7f 7f       	andi	r23, 0xFF	; 255
    3006:	7f 7f       	andi	r23, 0xFF	; 255
    3008:	7f 7f       	andi	r23, 0xFF	; 255
    300a:	7f 7f       	andi	r23, 0xFF	; 255
    300c:	7f 7f       	andi	r23, 0xFF	; 255
    300e:	7f 7f       	andi	r23, 0xFF	; 255
    3010:	7f 7f       	andi	r23, 0xFF	; 255
    3012:	7f 7f       	andi	r23, 0xFF	; 255
    3014:	7f 7f       	andi	r23, 0xFF	; 255
    3016:	7f 7f       	andi	r23, 0xFF	; 255
    3018:	7f 7f       	andi	r23, 0xFF	; 255
    301a:	7f 7f       	andi	r23, 0xFF	; 255
    301c:	7f 7f       	andi	r23, 0xFF	; 255
    301e:	7f 7f       	andi	r23, 0xFF	; 255
    3020:	7f 7f       	andi	r23, 0xFF	; 255
    3022:	7f 7f       	andi	r23, 0xFF	; 255
    3024:	7f 7f       	andi	r23, 0xFF	; 255
    3026:	7f 7f       	andi	r23, 0xFF	; 255
    3028:	7f 7f       	andi	r23, 0xFF	; 255
    302a:	7f 7f       	andi	r23, 0xFF	; 255
    302c:	7f 7f       	andi	r23, 0xFF	; 255
    302e:	7f 7f       	andi	r23, 0xFF	; 255
    3030:	7f 7f       	andi	r23, 0xFF	; 255
    3032:	7f 7f       	andi	r23, 0xFF	; 255
    3034:	7f 7f       	andi	r23, 0xFF	; 255
    3036:	7f 7f       	andi	r23, 0xFF	; 255
    3038:	7f 7f       	andi	r23, 0xFF	; 255
    303a:	7f 7f       	andi	r23, 0xFF	; 255
    303c:	7f 7f       	andi	r23, 0xFF	; 255
    303e:	7f 7f       	andi	r23, 0xFF	; 255
    3040:	7f 7f       	andi	r23, 0xFF	; 255
    3042:	7f 7f       	andi	r23, 0xFF	; 255
    3044:	7f 7f       	andi	r23, 0xFF	; 255
    3046:	7f 7f       	andi	r23, 0xFF	; 255
    3048:	7f 7f       	andi	r23, 0xFF	; 255
    304a:	7f 7f       	andi	r23, 0xFF	; 255
    304c:	7f 7f       	andi	r23, 0xFF	; 255
    304e:	7f 7f       	andi	r23, 0xFF	; 255
    3050:	7f 7f       	andi	r23, 0xFF	; 255
    3052:	7f 7f       	andi	r23, 0xFF	; 255
    3054:	7f 7f       	andi	r23, 0xFF	; 255
    3056:	7f 7f       	andi	r23, 0xFF	; 255
    3058:	7f 7f       	andi	r23, 0xFF	; 255
    305a:	7f 7f       	andi	r23, 0xFF	; 255
    305c:	7f 7f       	andi	r23, 0xFF	; 255
    305e:	7f 7f       	andi	r23, 0xFF	; 255
    3060:	7f 7f       	andi	r23, 0xFF	; 255
    3062:	7f 7f       	andi	r23, 0xFF	; 255
    3064:	7f 7f       	andi	r23, 0xFF	; 255
    3066:	7f 7f       	andi	r23, 0xFF	; 255
    3068:	7f 7f       	andi	r23, 0xFF	; 255
    306a:	7f 7f       	andi	r23, 0xFF	; 255
    306c:	7f 7f       	andi	r23, 0xFF	; 255
    306e:	7f 7f       	andi	r23, 0xFF	; 255
    3070:	7f 7f       	andi	r23, 0xFF	; 255
    3072:	7f 7f       	andi	r23, 0xFF	; 255
    3074:	7f 7f       	andi	r23, 0xFF	; 255
    3076:	7f 7f       	andi	r23, 0xFF	; 255
    3078:	7f 7f       	andi	r23, 0xFF	; 255
    307a:	7f 7f       	andi	r23, 0xFF	; 255
    307c:	7f 7f       	andi	r23, 0xFF	; 255
    307e:	7f 7f       	andi	r23, 0xFF	; 255
    3080:	80 80       	ld	r8, Z
    3082:	80 80       	ld	r8, Z
    3084:	80 80       	ld	r8, Z
    3086:	80 80       	ld	r8, Z
    3088:	80 80       	ld	r8, Z
    308a:	80 80       	ld	r8, Z
    308c:	80 80       	ld	r8, Z
    308e:	80 80       	ld	r8, Z
    3090:	80 80       	ld	r8, Z
    3092:	80 80       	ld	r8, Z
    3094:	80 80       	ld	r8, Z
    3096:	80 80       	ld	r8, Z
    3098:	80 80       	ld	r8, Z
    309a:	80 80       	ld	r8, Z
    309c:	80 80       	ld	r8, Z
    309e:	80 80       	ld	r8, Z
    30a0:	80 80       	ld	r8, Z
    30a2:	80 80       	ld	r8, Z
    30a4:	80 80       	ld	r8, Z
    30a6:	80 80       	ld	r8, Z
    30a8:	80 80       	ld	r8, Z
    30aa:	80 80       	ld	r8, Z
    30ac:	80 80       	ld	r8, Z
    30ae:	80 80       	ld	r8, Z
    30b0:	80 80       	ld	r8, Z
    30b2:	80 80       	ld	r8, Z
    30b4:	80 80       	ld	r8, Z
    30b6:	80 80       	ld	r8, Z
    30b8:	80 80       	ld	r8, Z
    30ba:	80 80       	ld	r8, Z
    30bc:	80 80       	ld	r8, Z
    30be:	80 80       	ld	r8, Z
    30c0:	80 80       	ld	r8, Z
    30c2:	80 80       	ld	r8, Z
    30c4:	80 80       	ld	r8, Z
    30c6:	80 80       	ld	r8, Z
    30c8:	80 80       	ld	r8, Z
    30ca:	80 80       	ld	r8, Z
    30cc:	80 80       	ld	r8, Z
    30ce:	80 80       	ld	r8, Z
    30d0:	80 80       	ld	r8, Z
    30d2:	80 80       	ld	r8, Z
    30d4:	80 80       	ld	r8, Z
    30d6:	80 80       	ld	r8, Z
    30d8:	80 80       	ld	r8, Z
    30da:	80 80       	ld	r8, Z
    30dc:	80 80       	ld	r8, Z
    30de:	80 80       	ld	r8, Z
    30e0:	80 80       	ld	r8, Z
    30e2:	80 80       	ld	r8, Z
    30e4:	80 80       	ld	r8, Z
    30e6:	80 80       	ld	r8, Z
    30e8:	80 80       	ld	r8, Z
    30ea:	80 80       	ld	r8, Z
    30ec:	80 80       	ld	r8, Z
    30ee:	80 80       	ld	r8, Z
    30f0:	80 80       	ld	r8, Z
    30f2:	80 80       	ld	r8, Z
    30f4:	80 80       	ld	r8, Z
    30f6:	80 80       	ld	r8, Z
    30f8:	80 80       	ld	r8, Z
    30fa:	80 80       	ld	r8, Z
    30fc:	80 80       	ld	r8, Z
    30fe:	80 80       	ld	r8, Z
    3100:	7f 7f       	andi	r23, 0xFF	; 255
    3102:	7f 7f       	andi	r23, 0xFF	; 255
    3104:	7f 7f       	andi	r23, 0xFF	; 255
    3106:	7f 7f       	andi	r23, 0xFF	; 255
    3108:	7f 7f       	andi	r23, 0xFF	; 255
    310a:	7f 7f       	andi	r23, 0xFF	; 255
    310c:	7f 7f       	andi	r23, 0xFF	; 255
    310e:	7f 7f       	andi	r23, 0xFF	; 255
    3110:	7f 7f       	andi	r23, 0xFF	; 255
    3112:	7f 7f       	andi	r23, 0xFF	; 255
    3114:	7f 7f       	andi	r23, 0xFF	; 255
    3116:	7f 7f       	andi	r23, 0xFF	; 255
    3118:	7f 7f       	andi	r23, 0xFF	; 255
    311a:	7f 7f       	andi	r23, 0xFF	; 255
    311c:	7f 7f       	andi	r23, 0xFF	; 255
    311e:	7f 7f       	andi	r23, 0xFF	; 255
    3120:	7f 7f       	andi	r23, 0xFF	; 255
    3122:	7f 7f       	andi	r23, 0xFF	; 255
    3124:	7f 7f       	andi	r23, 0xFF	; 255
    3126:	7f 7f       	andi	r23, 0xFF	; 255
    3128:	7f 7f       	andi	r23, 0xFF	; 255
    312a:	7f 7f       	andi	r23, 0xFF	; 255
    312c:	7f 7f       	andi	r23, 0xFF	; 255
    312e:	7f 7f       	andi	r23, 0xFF	; 255
    3130:	7f 7f       	andi	r23, 0xFF	; 255
    3132:	7f 7f       	andi	r23, 0xFF	; 255
    3134:	7f 7f       	andi	r23, 0xFF	; 255
    3136:	7f 7f       	andi	r23, 0xFF	; 255
    3138:	7f 7f       	andi	r23, 0xFF	; 255
    313a:	7f 7f       	andi	r23, 0xFF	; 255
    313c:	7f 7f       	andi	r23, 0xFF	; 255
    313e:	7f 7f       	andi	r23, 0xFF	; 255
    3140:	7f 7f       	andi	r23, 0xFF	; 255
    3142:	7f 7f       	andi	r23, 0xFF	; 255
    3144:	7f 7f       	andi	r23, 0xFF	; 255
    3146:	7f 7f       	andi	r23, 0xFF	; 255
    3148:	7f 7f       	andi	r23, 0xFF	; 255
    314a:	7f 7f       	andi	r23, 0xFF	; 255
    314c:	7f 7f       	andi	r23, 0xFF	; 255
    314e:	7f 7f       	andi	r23, 0xFF	; 255
    3150:	7f 7f       	andi	r23, 0xFF	; 255
    3152:	7f 7f       	andi	r23, 0xFF	; 255
    3154:	7f 7f       	andi	r23, 0xFF	; 255
    3156:	7f 7f       	andi	r23, 0xFF	; 255
    3158:	7f 7f       	andi	r23, 0xFF	; 255
    315a:	7f 7f       	andi	r23, 0xFF	; 255
    315c:	7f 7f       	andi	r23, 0xFF	; 255
    315e:	7f 7f       	andi	r23, 0xFF	; 255
    3160:	7f 7f       	andi	r23, 0xFF	; 255
    3162:	7f 7f       	andi	r23, 0xFF	; 255
    3164:	7f 7f       	andi	r23, 0xFF	; 255
    3166:	7f 7f       	andi	r23, 0xFF	; 255
    3168:	7f 7f       	andi	r23, 0xFF	; 255
    316a:	7f 7f       	andi	r23, 0xFF	; 255
    316c:	7f 7f       	andi	r23, 0xFF	; 255
    316e:	7f 7f       	andi	r23, 0xFF	; 255
    3170:	7f 7f       	andi	r23, 0xFF	; 255
    3172:	7f 7f       	andi	r23, 0xFF	; 255
    3174:	7f 7f       	andi	r23, 0xFF	; 255
    3176:	7f 7f       	andi	r23, 0xFF	; 255
    3178:	7f 7f       	andi	r23, 0xFF	; 255
    317a:	7f 7f       	andi	r23, 0xFF	; 255
    317c:	7f 7f       	andi	r23, 0xFF	; 255
    317e:	7f 7f       	andi	r23, 0xFF	; 255
    3180:	7f 7f       	andi	r23, 0xFF	; 255
    3182:	7f 7f       	andi	r23, 0xFF	; 255
    3184:	7f 7f       	andi	r23, 0xFF	; 255
    3186:	7f 7f       	andi	r23, 0xFF	; 255
    3188:	7f 7f       	andi	r23, 0xFF	; 255
    318a:	7f 7f       	andi	r23, 0xFF	; 255
    318c:	7f 7f       	andi	r23, 0xFF	; 255
    318e:	7f 7f       	andi	r23, 0xFF	; 255
    3190:	7f 7f       	andi	r23, 0xFF	; 255
    3192:	7f 7f       	andi	r23, 0xFF	; 255
    3194:	7f 7f       	andi	r23, 0xFF	; 255
    3196:	7f 7f       	andi	r23, 0xFF	; 255
    3198:	7f 7f       	andi	r23, 0xFF	; 255
    319a:	7f 7f       	andi	r23, 0xFF	; 255
    319c:	7f 7f       	andi	r23, 0xFF	; 255
    319e:	7f 7f       	andi	r23, 0xFF	; 255
    31a0:	7f 7f       	andi	r23, 0xFF	; 255
    31a2:	7f 7f       	andi	r23, 0xFF	; 255
    31a4:	7f 7f       	andi	r23, 0xFF	; 255
    31a6:	7f 7f       	andi	r23, 0xFF	; 255
    31a8:	7f 7f       	andi	r23, 0xFF	; 255
    31aa:	7f 7f       	andi	r23, 0xFF	; 255
    31ac:	7f 7f       	andi	r23, 0xFF	; 255
    31ae:	7f 7f       	andi	r23, 0xFF	; 255
    31b0:	7f 7f       	andi	r23, 0xFF	; 255
    31b2:	7f 7f       	andi	r23, 0xFF	; 255
    31b4:	7f 7f       	andi	r23, 0xFF	; 255
    31b6:	7f 7f       	andi	r23, 0xFF	; 255
    31b8:	7f 7f       	andi	r23, 0xFF	; 255
    31ba:	7f 7f       	andi	r23, 0xFF	; 255
    31bc:	7f 7f       	andi	r23, 0xFF	; 255
    31be:	7f 7f       	andi	r23, 0xFF	; 255
    31c0:	80 80       	ld	r8, Z
    31c2:	80 80       	ld	r8, Z
    31c4:	80 80       	ld	r8, Z
    31c6:	80 80       	ld	r8, Z
    31c8:	80 80       	ld	r8, Z
    31ca:	80 80       	ld	r8, Z
    31cc:	80 80       	ld	r8, Z
    31ce:	80 80       	ld	r8, Z
    31d0:	80 80       	ld	r8, Z
    31d2:	80 80       	ld	r8, Z
    31d4:	80 80       	ld	r8, Z
    31d6:	80 80       	ld	r8, Z
    31d8:	80 80       	ld	r8, Z
    31da:	80 80       	ld	r8, Z
    31dc:	80 80       	ld	r8, Z
    31de:	80 80       	ld	r8, Z
    31e0:	80 80       	ld	r8, Z
    31e2:	80 80       	ld	r8, Z
    31e4:	80 80       	ld	r8, Z
    31e6:	80 80       	ld	r8, Z
    31e8:	80 80       	ld	r8, Z
    31ea:	80 80       	ld	r8, Z
    31ec:	80 80       	ld	r8, Z
    31ee:	80 80       	ld	r8, Z
    31f0:	80 80       	ld	r8, Z
    31f2:	80 80       	ld	r8, Z
    31f4:	80 80       	ld	r8, Z
    31f6:	80 80       	ld	r8, Z
    31f8:	80 80       	ld	r8, Z
    31fa:	80 80       	ld	r8, Z
    31fc:	80 80       	ld	r8, Z
    31fe:	80 80       	ld	r8, Z
    3200:	03 09       	sbc	r16, r3
    3202:	13 1e       	adc	r1, r19
    3204:	28 31       	cpi	r18, 0x18	; 24
    3206:	3a 40       	sbci	r19, 0x0A	; 10
    3208:	46 4c       	sbci	r20, 0xC6	; 198
    320a:	50 54       	subi	r21, 0x40	; 64
    320c:	58 5b       	subi	r21, 0xB8	; 184
    320e:	5e 61       	ori	r21, 0x1E	; 30
    3210:	63 65       	ori	r22, 0x53	; 83
    3212:	67 69       	ori	r22, 0x97	; 151
    3214:	6b 6c       	ori	r22, 0xCB	; 203
    3216:	6e 6f       	ori	r22, 0xFE	; 254
    3218:	70 71       	andi	r23, 0x10	; 16
    321a:	72 73       	andi	r23, 0x32	; 50
    321c:	74 75       	andi	r23, 0x54	; 84
    321e:	76 77       	andi	r23, 0x76	; 118
    3220:	77 78       	andi	r23, 0x87	; 135
    3222:	79 79       	andi	r23, 0x99	; 153
    3224:	7a 7a       	andi	r23, 0xAA	; 170
    3226:	7b 7b       	andi	r23, 0xBB	; 187
    3228:	7c 7c       	andi	r23, 0xCC	; 204
    322a:	7c 7d       	andi	r23, 0xDC	; 220
    322c:	7d 7d       	andi	r23, 0xDD	; 221
    322e:	7e 7e       	andi	r23, 0xEE	; 238
    3230:	7e 7e       	andi	r23, 0xEE	; 238
    3232:	7f 7f       	andi	r23, 0xFF	; 255
    3234:	7f 7f       	andi	r23, 0xFF	; 255
    3236:	7f 7f       	andi	r23, 0xFF	; 255
    3238:	7f 7f       	andi	r23, 0xFF	; 255
    323a:	7f 7f       	andi	r23, 0xFF	; 255
    323c:	7f 7f       	andi	r23, 0xFF	; 255
    323e:	7f 7f       	andi	r23, 0xFF	; 255
    3240:	7f 7f       	andi	r23, 0xFF	; 255
    3242:	7f 7f       	andi	r23, 0xFF	; 255
    3244:	7f 7f       	andi	r23, 0xFF	; 255
    3246:	7f 7f       	andi	r23, 0xFF	; 255
    3248:	7f 7f       	andi	r23, 0xFF	; 255
    324a:	7f 7f       	andi	r23, 0xFF	; 255
    324c:	7f 7e       	andi	r23, 0xEF	; 239
    324e:	7e 7e       	andi	r23, 0xEE	; 238
    3250:	7e 7d       	andi	r23, 0xDE	; 222
    3252:	7d 7d       	andi	r23, 0xDD	; 221
    3254:	7c 7c       	andi	r23, 0xCC	; 204
    3256:	7c 7b       	andi	r23, 0xBC	; 188
    3258:	7b 7a       	andi	r23, 0xAB	; 171
    325a:	7a 79       	andi	r23, 0x9A	; 154
    325c:	79 78       	andi	r23, 0x89	; 137
    325e:	77 77       	andi	r23, 0x77	; 119
    3260:	76 75       	andi	r23, 0x56	; 86
    3262:	74 73       	andi	r23, 0x34	; 52
    3264:	72 71       	andi	r23, 0x12	; 18
    3266:	70 6f       	ori	r23, 0xF0	; 240
    3268:	6e 6c       	ori	r22, 0xCE	; 206
    326a:	6b 69       	ori	r22, 0x9B	; 155
    326c:	67 65       	ori	r22, 0x57	; 87
    326e:	63 61       	ori	r22, 0x13	; 19
    3270:	5e 5b       	subi	r21, 0xBE	; 190
    3272:	58 54       	subi	r21, 0x48	; 72
    3274:	50 4c       	sbci	r21, 0xC0	; 192
    3276:	46 40       	sbci	r20, 0x06	; 6
    3278:	3a 31       	cpi	r19, 0x1A	; 26
    327a:	28 1e       	adc	r2, r24
    327c:	13 09       	sbc	r17, r3
    327e:	03 00       	.word	0x0003	; ????
    3280:	c6 cc       	rjmp	.-1652   	; 0x2c0e <waves+0xe>
    3282:	d5 db       	rcall	.-2134   	; 0x2a2e <steptable+0x26>
    3284:	df e3       	ldi	r29, 0x3F	; 63
    3286:	e5 e7       	ldi	r30, 0x75	; 117
    3288:	e9 ea       	ldi	r30, 0xA9	; 169
    328a:	eb ec       	ldi	r30, 0xCB	; 203
    328c:	ed ee       	ldi	r30, 0xED	; 237
    328e:	ef ef       	ldi	r30, 0xFF	; 255
    3290:	f0 f0       	brcs	.+60     	; 0x32ce <waves+0x6ce>
    3292:	f0 f1       	brcs	.+124    	; 0x3310 <waves+0x710>
    3294:	f1 f1       	breq	.+124    	; 0x3312 <waves+0x712>
    3296:	f1 f2       	breq	.-68     	; 0x3254 <waves+0x654>
    3298:	f2 f2       	brmi	.-68     	; 0x3256 <waves+0x656>
    329a:	f2 f2       	brmi	.-68     	; 0x3258 <waves+0x658>
    329c:	f2 f2       	brmi	.-68     	; 0x325a <waves+0x65a>
    329e:	f2 f3       	brmi	.-4      	; 0x329c <waves+0x69c>
    32a0:	f3 f3       	brvs	.-4      	; 0x329e <waves+0x69e>
    32a2:	f3 f3       	brvs	.-4      	; 0x32a0 <waves+0x6a0>
    32a4:	f3 f3       	brvs	.-4      	; 0x32a2 <waves+0x6a2>
    32a6:	f3 f3       	brvs	.-4      	; 0x32a4 <waves+0x6a4>
    32a8:	f3 f3       	brvs	.-4      	; 0x32a6 <waves+0x6a6>
    32aa:	f3 f3       	brvs	.-4      	; 0x32a8 <waves+0x6a8>
    32ac:	f3 f3       	brvs	.-4      	; 0x32aa <waves+0x6aa>
    32ae:	f3 f3       	brvs	.-4      	; 0x32ac <waves+0x6ac>
    32b0:	f3 f3       	brvs	.-4      	; 0x32ae <waves+0x6ae>
    32b2:	f3 f3       	brvs	.-4      	; 0x32b0 <waves+0x6b0>
    32b4:	f3 f3       	brvs	.-4      	; 0x32b2 <waves+0x6b2>
    32b6:	f3 f3       	brvs	.-4      	; 0x32b4 <waves+0x6b4>
    32b8:	f3 f3       	brvs	.-4      	; 0x32b6 <waves+0x6b6>
    32ba:	f3 f3       	brvs	.-4      	; 0x32b8 <waves+0x6b8>
    32bc:	f3 f3       	brvs	.-4      	; 0x32ba <waves+0x6ba>
    32be:	f3 f3       	brvs	.-4      	; 0x32bc <waves+0x6bc>
    32c0:	f3 f3       	brvs	.-4      	; 0x32be <waves+0x6be>
    32c2:	f3 f3       	brvs	.-4      	; 0x32c0 <waves+0x6c0>
    32c4:	f3 f3       	brvs	.-4      	; 0x32c2 <waves+0x6c2>
    32c6:	f3 f3       	brvs	.-4      	; 0x32c4 <waves+0x6c4>
    32c8:	f3 f3       	brvs	.-4      	; 0x32c6 <waves+0x6c6>
    32ca:	f3 f3       	brvs	.-4      	; 0x32c8 <waves+0x6c8>
    32cc:	f3 f3       	brvs	.-4      	; 0x32ca <waves+0x6ca>
    32ce:	f3 f3       	brvs	.-4      	; 0x32cc <waves+0x6cc>
    32d0:	f3 f3       	brvs	.-4      	; 0x32ce <waves+0x6ce>
    32d2:	f3 f3       	brvs	.-4      	; 0x32d0 <waves+0x6d0>
    32d4:	f3 f3       	brvs	.-4      	; 0x32d2 <waves+0x6d2>
    32d6:	f3 f3       	brvs	.-4      	; 0x32d4 <waves+0x6d4>
    32d8:	f3 f3       	brvs	.-4      	; 0x32d6 <waves+0x6d6>
    32da:	f3 f3       	brvs	.-4      	; 0x32d8 <waves+0x6d8>
    32dc:	f3 f3       	brvs	.-4      	; 0x32da <waves+0x6da>
    32de:	f3 f3       	brvs	.-4      	; 0x32dc <waves+0x6dc>
    32e0:	f2 f2       	brmi	.-68     	; 0x329e <waves+0x69e>
    32e2:	f2 f2       	brmi	.-68     	; 0x32a0 <waves+0x6a0>
    32e4:	f2 f2       	brmi	.-68     	; 0x32a2 <waves+0x6a2>
    32e6:	f2 f2       	brmi	.-68     	; 0x32a4 <waves+0x6a4>
    32e8:	f1 f1       	breq	.+124    	; 0x3366 <waves+0x766>
    32ea:	f1 f1       	breq	.+124    	; 0x3368 <waves+0x768>
    32ec:	f0 f0       	brcs	.+60     	; 0x332a <waves+0x72a>
    32ee:	f0 ef       	ldi	r31, 0xF0	; 240
    32f0:	ef ee       	ldi	r30, 0xEF	; 239
    32f2:	ed ec       	ldi	r30, 0xCD	; 205
    32f4:	eb ea       	ldi	r30, 0xAB	; 171
    32f6:	e9 e7       	ldi	r30, 0x79	; 121
    32f8:	e5 e3       	ldi	r30, 0x35	; 53
    32fa:	df db       	rcall	.-2114   	; 0x2aba <steptable+0xb2>
    32fc:	d5 cc       	rjmp	.-1622   	; 0x2ca8 <waves+0xa8>
    32fe:	c6 00       	.word	0x00c6	; ????
    3300:	00 28       	or	r0, r0
    3302:	3d 42       	sbci	r19, 0x2D	; 45
    3304:	30 2d       	mov	r19, r0
    3306:	2c 2b       	or	r18, r28
    3308:	2c 2d       	mov	r18, r12
    330a:	2e 2f       	mov	r18, r30
    330c:	30 32       	cpi	r19, 0x20	; 32
    330e:	33 35       	cpi	r19, 0x53	; 83
    3310:	37 39       	cpi	r19, 0x97	; 151
    3312:	3b 3d       	cpi	r19, 0xDB	; 219
    3314:	3f 41       	sbci	r19, 0x1F	; 31
    3316:	43 45       	sbci	r20, 0x53	; 83
    3318:	48 4a       	sbci	r20, 0xA8	; 168
    331a:	4c 4e       	sbci	r20, 0xEC	; 236
    331c:	50 53       	subi	r21, 0x30	; 48
    331e:	55 57       	subi	r21, 0x75	; 117
    3320:	59 5b       	subi	r21, 0xB9	; 185
    3322:	5d 5f       	subi	r21, 0xFD	; 253
    3324:	61 63       	ori	r22, 0x31	; 49
    3326:	65 67       	ori	r22, 0x75	; 117
    3328:	69 6b       	ori	r22, 0xB9	; 185
    332a:	6c 6e       	ori	r22, 0xEC	; 236
    332c:	70 71       	andi	r23, 0x10	; 16
    332e:	73 74       	andi	r23, 0x43	; 67
    3330:	75 77       	andi	r23, 0x75	; 117
    3332:	78 79       	andi	r23, 0x98	; 152
    3334:	7a 7b       	andi	r23, 0xBA	; 186
    3336:	7c 7d       	andi	r23, 0xDC	; 220
    3338:	7d 7e       	andi	r23, 0xED	; 237
    333a:	7e 7f       	andi	r23, 0xFE	; 254
    333c:	7f 7f       	andi	r23, 0xFF	; 255
    333e:	7f 7f       	andi	r23, 0xFF	; 255
    3340:	7f 7f       	andi	r23, 0xFF	; 255
    3342:	7f 7f       	andi	r23, 0xFF	; 255
    3344:	7f 7f       	andi	r23, 0xFF	; 255
    3346:	7e 7e       	andi	r23, 0xEE	; 238
    3348:	7d 7d       	andi	r23, 0xDD	; 221
    334a:	7c 7b       	andi	r23, 0xBC	; 188
    334c:	7a 79       	andi	r23, 0x9A	; 154
    334e:	78 77       	andi	r23, 0x78	; 120
    3350:	75 74       	andi	r23, 0x45	; 69
    3352:	73 71       	andi	r23, 0x13	; 19
    3354:	70 6e       	ori	r23, 0xE0	; 224
    3356:	6c 6b       	ori	r22, 0xBC	; 188
    3358:	69 67       	ori	r22, 0x79	; 121
    335a:	65 63       	ori	r22, 0x35	; 53
    335c:	61 5f       	subi	r22, 0xF1	; 241
    335e:	5d 5b       	subi	r21, 0xBD	; 189
    3360:	59 57       	subi	r21, 0x79	; 121
    3362:	55 53       	subi	r21, 0x35	; 53
    3364:	50 4e       	sbci	r21, 0xE0	; 224
    3366:	4c 4a       	sbci	r20, 0xAC	; 172
    3368:	48 45       	sbci	r20, 0x58	; 88
    336a:	43 41       	sbci	r20, 0x13	; 19
    336c:	3f 3d       	cpi	r19, 0xDF	; 223
    336e:	3b 39       	cpi	r19, 0x9B	; 155
    3370:	37 35       	cpi	r19, 0x57	; 87
    3372:	33 32       	cpi	r19, 0x23	; 35
    3374:	30 2f       	mov	r19, r16
    3376:	2e 2d       	mov	r18, r14
    3378:	2c 2b       	or	r18, r28
    337a:	2c 2d       	mov	r18, r12
    337c:	30 42       	sbci	r19, 0x20	; 32
    337e:	3d 28       	or	r3, r13
    3380:	00 e9       	ldi	r16, 0x90	; 144
    3382:	e5 fe       	sbrs	r14, 5
    3384:	d4 d7       	rcall	.+4008   	; 0x432e <_etext+0x7e2>
    3386:	d7 d7       	rcall	.+4014   	; 0x4336 <_etext+0x7ea>
    3388:	d6 d4       	rcall	.+2476   	; 0x3d36 <_etext+0x1ea>
    338a:	d2 d0       	rcall	.+420    	; 0x3530 <waves+0x930>
    338c:	ce cc       	rjmp	.-1636   	; 0x2d2a <waves+0x12a>
    338e:	ca c8       	rjmp	.-3692   	; 0x2524 <ProcessMusic+0x214>
    3390:	c6 c3       	rjmp	.+1932   	; 0x3b1e <__udivmodhi4_ep+0x10>
    3392:	c1 bf       	out	0x31, r28	; 49
    3394:	bd ba       	out	0x1d, r11	; 29
    3396:	b8 b6       	in	r11, 0x38	; 56
    3398:	b4 b1       	in	r27, 0x04	; 4
    339a:	af ad       	ldd	r26, Y+63	; 0x3f
    339c:	ab a9       	ldd	r26, Y+51	; 0x33
    339e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    33a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    33a2:	9f 9e       	mul	r9, r31
    33a4:	9c 9a       	sbi	0x13, 4	; 19
    33a6:	99 97       	sbiw	r26, 0x29	; 41
    33a8:	95 94       	asr	r9
    33aa:	93 91       	.word	0x9193	; ????
    33ac:	90 8f       	std	Z+24, r25	; 0x18
    33ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    33b0:	8b 8a       	std	Y+19, r8	; 0x13
    33b2:	89 88       	ldd	r8, Y+17	; 0x11
    33b4:	88 87       	std	Y+8, r24	; 0x08
    33b6:	86 85       	ldd	r24, Z+14	; 0x0e
    33b8:	85 84       	ldd	r8, Z+13	; 0x0d
    33ba:	84 84       	ldd	r8, Z+12	; 0x0c
    33bc:	83 83       	std	Z+3, r24	; 0x03
    33be:	83 83       	std	Z+3, r24	; 0x03
    33c0:	83 83       	std	Z+3, r24	; 0x03
    33c2:	83 83       	std	Z+3, r24	; 0x03
    33c4:	83 84       	ldd	r8, Z+11	; 0x0b
    33c6:	84 84       	ldd	r8, Z+12	; 0x0c
    33c8:	85 85       	ldd	r24, Z+13	; 0x0d
    33ca:	86 87       	std	Z+14, r24	; 0x0e
    33cc:	88 88       	ldd	r8, Y+16	; 0x10
    33ce:	89 8a       	std	Y+17, r8	; 0x11
    33d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    33d2:	8d 8f       	std	Y+29, r24	; 0x1d
    33d4:	90 91 93 94 	lds	r25, 0x9493	; 0x809493 <__bss_end+0x8c52>
    33d8:	95 97       	sbiw	r26, 0x25	; 37
    33da:	99 9a       	sbi	0x13, 1	; 19
    33dc:	9c 9e       	mul	r9, r28
    33de:	9f a1       	ldd	r25, Y+39	; 0x27
    33e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    33e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    33e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    33e6:	af b1       	in	r26, 0x0f	; 15
    33e8:	b4 b6       	in	r11, 0x34	; 52
    33ea:	b8 ba       	out	0x18, r11	; 24
    33ec:	bd bf       	out	0x3d, r27	; 61
    33ee:	c1 c3       	rjmp	.+1922   	; 0x3b72 <_etext+0x26>
    33f0:	c6 c8       	rjmp	.-3700   	; 0x257e <ProcessMusic+0x26e>
    33f2:	ca cc       	rjmp	.-1644   	; 0x2d88 <waves+0x188>
    33f4:	ce d0       	rcall	.+412    	; 0x3592 <waves+0x992>
    33f6:	d2 d4       	rcall	.+2468   	; 0x3d9c <_etext+0x250>
    33f8:	d6 d7       	rcall	.+4012   	; 0x43a6 <_etext+0x85a>
    33fa:	d7 d7       	rcall	.+4014   	; 0x43aa <_etext+0x85e>
    33fc:	d4 fe       	sbrs	r13, 4
    33fe:	e5 e9       	ldi	r30, 0x95	; 149
    3400:	f9 f8       	.word	0xf8f9	; ????
    3402:	f9 f5       	brne	.+126    	; 0x3482 <waves+0x882>
    3404:	eb e1       	ldi	r30, 0x1B	; 27
    3406:	dd de       	rcall	.-582    	; 0x31c2 <waves+0x5c2>
    3408:	e0 e2       	ldi	r30, 0x20	; 32
    340a:	e4 e5       	ldi	r30, 0x54	; 84
    340c:	e6 e5       	ldi	r30, 0x56	; 86
    340e:	e4 e2       	ldi	r30, 0x24	; 36
    3410:	de d9       	rcall	.-3140   	; 0x27ce <TriggerCommon+0x7e>
    3412:	d2 ca       	rjmp	.-2652   	; 0x29b8 <esmw+0xa2>
    3414:	c1 b7       	in	r28, 0x31	; 49
    3416:	ac a2       	std	Y+36, r10	; 0x24
    3418:	99 91       	ld	r25, Y+
    341a:	8a 86       	std	Y+10, r8	; 0x0a
    341c:	83 81       	ldd	r24, Z+3	; 0x03
    341e:	80 80       	ld	r8, Z
    3420:	81 82       	std	Z+1, r8	; 0x01
    3422:	83 85       	ldd	r24, Z+11	; 0x0b
    3424:	86 88       	ldd	r8, Z+22	; 0x16
    3426:	8a 8c       	ldd	r8, Y+26	; 0x1a
    3428:	8d 8f       	std	Y+29, r24	; 0x1d
    342a:	90 92 93 95 	sts	0x9593, r9	; 0x809593 <__bss_end+0x8d52>
    342e:	96 97       	sbiw	r26, 0x26	; 38
    3430:	98 99       	sbic	0x13, 0	; 19
    3432:	9a 9b       	sbis	0x13, 2	; 19
    3434:	9b 9c       	mul	r9, r11
    3436:	9d 9d       	mul	r25, r13
    3438:	9d 9e       	mul	r9, r29
    343a:	9e 9e       	mul	r9, r30
    343c:	9f 9f       	mul	r25, r31
    343e:	9f 9f       	mul	r25, r31
    3440:	9f 9f       	mul	r25, r31
    3442:	9f 9e       	mul	r9, r31
    3444:	9e 9e       	mul	r9, r30
    3446:	9d 9d       	mul	r25, r13
    3448:	9d 9c       	mul	r9, r13
    344a:	9b 9b       	sbis	0x13, 3	; 19
    344c:	9a 99       	sbic	0x13, 2	; 19
    344e:	98 97       	sbiw	r26, 0x28	; 40
    3450:	96 95       	lsr	r25
    3452:	93 92       	.word	0x9293	; ????
    3454:	90 8f       	std	Z+24, r25	; 0x18
    3456:	8d 8c       	ldd	r8, Y+29	; 0x1d
    3458:	8a 88       	ldd	r8, Y+18	; 0x12
    345a:	86 85       	ldd	r24, Z+14	; 0x0e
    345c:	83 82       	std	Z+3, r8	; 0x03
    345e:	81 80       	ldd	r8, Z+1	; 0x01
    3460:	80 81       	ld	r24, Z
    3462:	83 86       	std	Z+11, r8	; 0x0b
    3464:	8a 91       	ld	r24, -Y
    3466:	99 a2       	std	Y+33, r9	; 0x21
    3468:	ac b7       	in	r26, 0x3c	; 60
    346a:	c1 ca       	rjmp	.-2686   	; 0x29ee <esmw+0xd8>
    346c:	d2 d9       	rcall	.-3164   	; 0x2812 <TriggerCommon+0xc2>
    346e:	de e2       	ldi	r29, 0x2E	; 46
    3470:	e4 e5       	ldi	r30, 0x54	; 84
    3472:	e6 e5       	ldi	r30, 0x56	; 86
    3474:	e4 e2       	ldi	r30, 0x24	; 36
    3476:	e0 de       	rcall	.-576    	; 0x3238 <waves+0x638>
    3478:	dd e1       	ldi	r29, 0x1D	; 29
    347a:	eb f5       	brvc	.+122    	; 0x34f6 <waves+0x8f6>
    347c:	f9 f8       	.word	0xf8f9	; ????
    347e:	f9 00       	.word	0x00f9	; ????
    3480:	07 08       	sbc	r0, r7
    3482:	07 0b       	sbc	r16, r23
    3484:	15 1f       	adc	r17, r21
    3486:	23 22       	and	r2, r19
    3488:	20 1e       	adc	r2, r16
    348a:	1c 1b       	sub	r17, r28
    348c:	1a 1b       	sub	r17, r26
    348e:	1c 1e       	adc	r1, r28
    3490:	22 27       	eor	r18, r18
    3492:	2e 36       	cpi	r18, 0x6E	; 110
    3494:	3f 49       	sbci	r19, 0x9F	; 159
    3496:	54 5e       	subi	r21, 0xE4	; 228
    3498:	67 6f       	ori	r22, 0xF7	; 247
    349a:	76 7a       	andi	r23, 0xA6	; 166
    349c:	7e 7f       	andi	r23, 0xFE	; 254
    349e:	7f 7f       	andi	r23, 0xFF	; 255
    34a0:	7f 7e       	andi	r23, 0xEF	; 239
    34a2:	7d 7b       	andi	r23, 0xBD	; 189
    34a4:	7a 78       	andi	r23, 0x8A	; 138
    34a6:	76 74       	andi	r23, 0x46	; 70
    34a8:	73 71       	andi	r23, 0x13	; 19
    34aa:	70 6e       	ori	r23, 0xE0	; 224
    34ac:	6d 6b       	ori	r22, 0xBD	; 189
    34ae:	6a 69       	ori	r22, 0x9A	; 154
    34b0:	68 67       	ori	r22, 0x78	; 120
    34b2:	66 65       	ori	r22, 0x56	; 86
    34b4:	65 64       	ori	r22, 0x45	; 69
    34b6:	64 63       	ori	r22, 0x34	; 52
    34b8:	63 62       	ori	r22, 0x23	; 35
    34ba:	62 62       	ori	r22, 0x22	; 34
    34bc:	61 61       	ori	r22, 0x11	; 17
    34be:	61 61       	ori	r22, 0x11	; 17
    34c0:	61 61       	ori	r22, 0x11	; 17
    34c2:	61 62       	ori	r22, 0x21	; 33
    34c4:	62 62       	ori	r22, 0x22	; 34
    34c6:	63 63       	ori	r22, 0x33	; 51
    34c8:	63 64       	ori	r22, 0x43	; 67
    34ca:	65 65       	ori	r22, 0x55	; 85
    34cc:	66 67       	ori	r22, 0x76	; 118
    34ce:	68 69       	ori	r22, 0x98	; 152
    34d0:	6a 6b       	ori	r22, 0xBA	; 186
    34d2:	6d 6e       	ori	r22, 0xED	; 237
    34d4:	70 71       	andi	r23, 0x10	; 16
    34d6:	73 74       	andi	r23, 0x43	; 67
    34d8:	76 78       	andi	r23, 0x86	; 134
    34da:	7a 7b       	andi	r23, 0xBA	; 186
    34dc:	7d 7e       	andi	r23, 0xED	; 237
    34de:	7f 7f       	andi	r23, 0xFF	; 255
    34e0:	7f 7f       	andi	r23, 0xFF	; 255
    34e2:	7e 7a       	andi	r23, 0xAE	; 174
    34e4:	76 6f       	ori	r23, 0xF6	; 246
    34e6:	67 5e       	subi	r22, 0xE7	; 231
    34e8:	54 49       	sbci	r21, 0x94	; 148
    34ea:	3f 36       	cpi	r19, 0x6F	; 111
    34ec:	2e 27       	eor	r18, r30
    34ee:	22 1e       	adc	r2, r18
    34f0:	1c 1b       	sub	r17, r28
    34f2:	1a 1b       	sub	r17, r26
    34f4:	1c 1e       	adc	r1, r28
    34f6:	20 22       	and	r2, r16
    34f8:	23 1f       	adc	r18, r19
    34fa:	15 0b       	sbc	r17, r21
    34fc:	07 08       	sbc	r0, r7
    34fe:	07 00       	.word	0x0007	; ????
    3500:	1f 31       	cpi	r17, 0x1F	; 31
    3502:	3d 44       	sbci	r19, 0x4D	; 77
    3504:	4e 53       	subi	r20, 0x3E	; 62
    3506:	54 56       	subi	r21, 0x64	; 100
    3508:	5a 5f       	subi	r21, 0xFA	; 250
    350a:	64 69       	ori	r22, 0x94	; 148
    350c:	6e 74       	andi	r22, 0x4E	; 78
    350e:	76 79       	andi	r23, 0x96	; 150
    3510:	7c 7f       	andi	r23, 0xFC	; 252
    3512:	7f 7f       	andi	r23, 0xFF	; 255
    3514:	7f 7f       	andi	r23, 0xFF	; 255
    3516:	7f 7f       	andi	r23, 0xFF	; 255
    3518:	7f 7f       	andi	r23, 0xFF	; 255
    351a:	7f 7f       	andi	r23, 0xFF	; 255
    351c:	7f 7f       	andi	r23, 0xFF	; 255
    351e:	7f 7f       	andi	r23, 0xFF	; 255
    3520:	7f 7f       	andi	r23, 0xFF	; 255
    3522:	7f 7f       	andi	r23, 0xFF	; 255
    3524:	7f 7f       	andi	r23, 0xFF	; 255
    3526:	7f 7f       	andi	r23, 0xFF	; 255
    3528:	7f 7f       	andi	r23, 0xFF	; 255
    352a:	7f 7f       	andi	r23, 0xFF	; 255
    352c:	7f 7f       	andi	r23, 0xFF	; 255
    352e:	7f 7f       	andi	r23, 0xFF	; 255
    3530:	7f 7f       	andi	r23, 0xFF	; 255
    3532:	7f 7f       	andi	r23, 0xFF	; 255
    3534:	7f 7f       	andi	r23, 0xFF	; 255
    3536:	7f 7f       	andi	r23, 0xFF	; 255
    3538:	7f 7f       	andi	r23, 0xFF	; 255
    353a:	7f 7f       	andi	r23, 0xFF	; 255
    353c:	7f 7f       	andi	r23, 0xFF	; 255
    353e:	7f 7f       	andi	r23, 0xFF	; 255
    3540:	7f 7f       	andi	r23, 0xFF	; 255
    3542:	7f 7f       	andi	r23, 0xFF	; 255
    3544:	7f 7f       	andi	r23, 0xFF	; 255
    3546:	7f 7f       	andi	r23, 0xFF	; 255
    3548:	7f 7f       	andi	r23, 0xFF	; 255
    354a:	7f 7f       	andi	r23, 0xFF	; 255
    354c:	7f 7f       	andi	r23, 0xFF	; 255
    354e:	7f 7f       	andi	r23, 0xFF	; 255
    3550:	7f 7f       	andi	r23, 0xFF	; 255
    3552:	7f 7f       	andi	r23, 0xFF	; 255
    3554:	7f 7f       	andi	r23, 0xFF	; 255
    3556:	7f 7f       	andi	r23, 0xFF	; 255
    3558:	7f 7f       	andi	r23, 0xFF	; 255
    355a:	7f 7f       	andi	r23, 0xFF	; 255
    355c:	7f 7f       	andi	r23, 0xFF	; 255
    355e:	7f 7f       	andi	r23, 0xFF	; 255
    3560:	7f 7f       	andi	r23, 0xFF	; 255
    3562:	7f 7f       	andi	r23, 0xFF	; 255
    3564:	7f 7f       	andi	r23, 0xFF	; 255
    3566:	7f 7f       	andi	r23, 0xFF	; 255
    3568:	7f 7f       	andi	r23, 0xFF	; 255
    356a:	7f 7f       	andi	r23, 0xFF	; 255
    356c:	7f 7f       	andi	r23, 0xFF	; 255
    356e:	7f 7f       	andi	r23, 0xFF	; 255
    3570:	7f 7f       	andi	r23, 0xFF	; 255
    3572:	7f 7f       	andi	r23, 0xFF	; 255
    3574:	7f 7f       	andi	r23, 0xFF	; 255
    3576:	7f 7f       	andi	r23, 0xFF	; 255
    3578:	7f 7f       	andi	r23, 0xFF	; 255
    357a:	7f 7c       	andi	r23, 0xCF	; 207
    357c:	78 71       	andi	r23, 0x18	; 24
    357e:	68 4c       	sbci	r22, 0xC8	; 200
    3580:	2c 1c       	adc	r2, r12
    3582:	12 0c       	add	r1, r2
    3584:	0a 0b       	sbc	r16, r26
    3586:	0a 05       	cpc	r16, r10
    3588:	fd f3       	brhs	.-2      	; 0x3588 <waves+0x988>
    358a:	e9 df       	rcall	.-46     	; 0x355e <waves+0x95e>
    358c:	d4 ca       	rjmp	.-2648   	; 0x2b36 <steptable+0x12e>
    358e:	c0 b7       	in	r28, 0x30	; 48
    3590:	ae a6       	std	Y+46, r10	; 0x2e
    3592:	9e 97       	sbiw	r26, 0x2e	; 46
    3594:	91 8b       	std	Z+17, r25	; 0x11
    3596:	86 85       	ldd	r24, Z+14	; 0x0e
    3598:	82 80       	ldd	r8, Z+2	; 0x02
    359a:	80 80       	ld	r8, Z
    359c:	80 80       	ld	r8, Z
    359e:	80 80       	ld	r8, Z
    35a0:	80 80       	ld	r8, Z
    35a2:	80 80       	ld	r8, Z
    35a4:	80 80       	ld	r8, Z
    35a6:	80 80       	ld	r8, Z
    35a8:	80 80       	ld	r8, Z
    35aa:	80 80       	ld	r8, Z
    35ac:	80 80       	ld	r8, Z
    35ae:	80 80       	ld	r8, Z
    35b0:	80 80       	ld	r8, Z
    35b2:	80 80       	ld	r8, Z
    35b4:	80 80       	ld	r8, Z
    35b6:	80 80       	ld	r8, Z
    35b8:	80 80       	ld	r8, Z
    35ba:	80 80       	ld	r8, Z
    35bc:	80 80       	ld	r8, Z
    35be:	80 80       	ld	r8, Z
    35c0:	80 80       	ld	r8, Z
    35c2:	80 80       	ld	r8, Z
    35c4:	80 80       	ld	r8, Z
    35c6:	80 80       	ld	r8, Z
    35c8:	80 80       	ld	r8, Z
    35ca:	80 80       	ld	r8, Z
    35cc:	80 80       	ld	r8, Z
    35ce:	80 80       	ld	r8, Z
    35d0:	80 80       	ld	r8, Z
    35d2:	80 80       	ld	r8, Z
    35d4:	80 80       	ld	r8, Z
    35d6:	80 80       	ld	r8, Z
    35d8:	80 80       	ld	r8, Z
    35da:	80 80       	ld	r8, Z
    35dc:	80 80       	ld	r8, Z
    35de:	80 80       	ld	r8, Z
    35e0:	80 80       	ld	r8, Z
    35e2:	80 80       	ld	r8, Z
    35e4:	80 80       	ld	r8, Z
    35e6:	80 80       	ld	r8, Z
    35e8:	80 80       	ld	r8, Z
    35ea:	80 80       	ld	r8, Z
    35ec:	80 80       	ld	r8, Z
    35ee:	80 80       	ld	r8, Z
    35f0:	80 80       	ld	r8, Z
    35f2:	80 80       	ld	r8, Z
    35f4:	80 87       	std	Z+8, r24	; 0x08
    35f6:	91 9d       	mul	r25, r1
    35f8:	ac c4       	rjmp	.+2392   	; 0x3f52 <_etext+0x406>
    35fa:	cb d4       	rcall	.+2454   	; 0x3f92 <_etext+0x446>
    35fc:	dd f2       	brhs	.-74     	; 0x35b4 <waves+0x9b4>
    35fe:	fa fa       	.word	0xfafa	; ????

00003600 <DisplayLogo>:
//Print a hexdecimal integer
void PrintHexLong(char x,char y,uint32_t value){
	PrintHexByte(x,y, value>>24);	
	PrintHexByte(x+2,y, value>>16);
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
    3600:	08 95       	ret

00003602 <InitializeVideoMode>:
    3602:	08 95       	ret

00003604 <VideoModeVsync>:
    3604:	08 95       	ret

00003606 <PrintInt>:
    3606:	cf 92       	push	r12
    3608:	df 92       	push	r13
    360a:	ef 92       	push	r14
    360c:	ff 92       	push	r15
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	c8 2e       	mov	r12, r24
    3618:	d6 2f       	mov	r29, r22
    361a:	8a 01       	movw	r16, r20
    361c:	d2 2e       	mov	r13, r18
    361e:	c0 e0       	ldi	r28, 0x00	; 0
    3620:	8a e0       	ldi	r24, 0x0A	; 10
    3622:	e8 2e       	mov	r14, r24
    3624:	f1 2c       	mov	r15, r1
    3626:	3c 2d       	mov	r19, r12
    3628:	3c 1b       	sub	r19, r28
    362a:	01 15       	cp	r16, r1
    362c:	11 05       	cpc	r17, r1
    362e:	11 f4       	brne	.+4      	; 0x3634 <PrintInt+0x2e>
    3630:	c1 11       	cpse	r28, r1
    3632:	07 c0       	rjmp	.+14     	; 0x3642 <PrintInt+0x3c>
    3634:	c8 01       	movw	r24, r16
    3636:	b7 01       	movw	r22, r14
    3638:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__udivmodhi4>
    363c:	40 e1       	ldi	r20, 0x10	; 16
    363e:	48 0f       	add	r20, r24
    3640:	05 c0       	rjmp	.+10     	; 0x364c <PrintInt+0x46>
    3642:	dd 20       	and	r13, r13
    3644:	11 f0       	breq	.+4      	; 0x364a <PrintInt+0x44>
    3646:	40 e1       	ldi	r20, 0x10	; 16
    3648:	01 c0       	rjmp	.+2      	; 0x364c <PrintInt+0x46>
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	6d 2f       	mov	r22, r29
    364e:	83 2f       	mov	r24, r19
    3650:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <SetFont>
    3654:	c8 01       	movw	r24, r16
    3656:	b7 01       	movw	r22, r14
    3658:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__udivmodhi4>
    365c:	8b 01       	movw	r16, r22
    365e:	cf 5f       	subi	r28, 0xFF	; 255
    3660:	c5 30       	cpi	r28, 0x05	; 5
    3662:	09 f7       	brne	.-62     	; 0x3626 <PrintInt+0x20>
    3664:	df 91       	pop	r29
    3666:	cf 91       	pop	r28
    3668:	1f 91       	pop	r17
    366a:	0f 91       	pop	r16
    366c:	ff 90       	pop	r15
    366e:	ef 90       	pop	r14
    3670:	df 90       	pop	r13
    3672:	cf 90       	pop	r12
    3674:	08 95       	ret

00003676 <Print>:
}

//Print a string from flash
void Print(int x,int y,const char *string){
    3676:	0f 93       	push	r16
    3678:	1f 93       	push	r17
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	06 2f       	mov	r16, r22
    3680:	c4 2f       	mov	r28, r20
    3682:	d5 2f       	mov	r29, r21
    3684:	18 2f       	mov	r17, r24
    3686:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    3688:	fe 01       	movw	r30, r28
    368a:	44 91       	lpm	r20, Z
		if(c!=0){
    368c:	44 23       	and	r20, r20
    368e:	49 f0       	breq	.+18     	; 0x36a2 <Print+0x2c>
			c=((c&127)-32);			
    3690:	4f 77       	andi	r20, 0x7F	; 127
    3692:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    3694:	60 2f       	mov	r22, r16
    3696:	8c 2f       	mov	r24, r28
    3698:	81 0f       	add	r24, r17
    369a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <SetFont>
    369e:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    36a0:	f3 cf       	rjmp	.-26     	; 0x3688 <Print+0x12>
	
}
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	08 95       	ret

000036ac <sdCardFindFileFirstSectorFlash>:

.section .text.sd_find_file_section

sdCardFindFileFirstSectorFlash:
sd_find_file_first_sector_flash:
	bset	6					; set the T flag in SREG to indicate we are looking at string in FLASH
    36ac:	68 94       	set
	rjmp	sd_find_file_first_sector_common
    36ae:	01 c0       	rjmp	.+2      	; 0x36b2 <sd_find_file_first_sector_common>

000036b0 <sdCardFindFileFirstSector>:

sdCardFindFileFirstSector:
sd_find_file_first_sector:
	bclr	6					; clear the T flag in SREG to indicate we are looking at string in RAM
    36b0:	e8 94       	clt

000036b2 <sd_find_file_first_sector_common>:
sd_find_file_first_sector_common:
	push	r2					; Save R2 as it will be overwritten by SPC
    36b2:	2f 92       	push	r2
	push	r16					; Save R16:17 as it will be overwritten by MaxFilesToSearchFor
    36b4:	0f 93       	push	r16
	push	r17
    36b6:	1f 93       	push	r17
	push	r28					; Save R28:29 as it will be overwritten by the String Index Pointer
    36b8:	cf 93       	push	r28
	push	r29
    36ba:	df 93       	push	r29
	push	r24					; Save the address pointing to the String (could be flash or RAM)
    36bc:	8f 93       	push	r24
	push	r25
    36be:	9f 93       	push	r25


// sd_cuesector(0x000);
	rcall 	sd_find_clear_r22_23_24_25
    36c0:	52 d0       	rcall	.+164    	; 0x3766 <sd_find_clear_r22_23_24_25>
	rcall	sd_card_cue_sector_address
    36c2:	e6 d0       	rcall	.+460    	; 0x3890 <sdCardCueSectorAddress>
// sdCardSkipBytes(offsetof(MBR, partition1)+ offsetof(PartitionEntry, startSector));
	ldi		r24, 0xC6
    36c4:	86 ec       	ldi	r24, 0xC6	; 198
	ldi		r25, 0x01
    36c6:	91 e0       	ldi	r25, 0x01	; 1
	rcall	sd_card_skip_bytes
    36c8:	5e d0       	rcall	.+188    	; 0x3786 <sdCardSkipBytes>
//long bootRecordSector = sdCardGetLong();
	rcall	sd_card_get_long
    36ca:	63 d0       	rcall	.+198    	; 0x3792 <sdCardGetLong>
    sts    SD_DEBUG_bootRecordSector+2, r24
    sts    SD_DEBUG_bootRecordSector+1, r23
    sts    SD_DEBUG_bootRecordSector+0, r22
#endif

	movw	r26, r24			; Save the high word of the boot sector to r26:27 (which is untouched by StopTransmission)
    36cc:	dc 01       	movw	r26, r24
	movw	r18, r22			; Save the low word to r18:19
    36ce:	9b 01       	movw	r18, r22
//sd_stoptransmission();
	rcall	sd_card_stop_transmission
    36d0:	f4 d0       	rcall	.+488    	; 0x38ba <sdCardStopTransmission>
//sd_cuesector(bootRecordSector);
	movw	r24, r26
    36d2:	cd 01       	movw	r24, r26
	movw	r22, r18
    36d4:	b9 01       	movw	r22, r18
	rcall	sd_card_cue_sector_address
    36d6:	dc d0       	rcall	.+440    	; 0x3890 <sdCardCueSectorAddress>
//sdCardSkipBytes(offsetof(BootRecord, bytesPerSector));
	ldi		r24, 0x0B
    36d8:	8b e0       	ldi	r24, 0x0B	; 11
	rcall	sd_card_skip_bytes_max_256
    36da:	54 d0       	rcall	.+168    	; 0x3784 <sd_card_skip_bytes_max_256>
//int  bytesPerSector    = sdCardGetInt();
	rcall	sd_card_get_int							; We divide BytesPerSector by 32 for a re-arrange of the later maths
    36dc:	5c d0       	rcall	.+184    	; 0x3796 <sdCardGetInt>
    sts    SD_DEBUG_bytesPerSector+1, r25
    sts    SD_DEBUG_bytesPerSector+0, r24
#endif


	ldi		r23, 0x20								; ((maxRootDirectoryEntries * 32)/bytesPerSector)
    36de:	70 e2       	ldi	r23, 0x20	; 32
	rcall	sd_find_div_r2425_by_r23_result_r0		; The result of this is at most 8 bits (BPS is 128..4096)
    36e0:	46 d0       	rcall	.+140    	; 0x376e <sd_find_div_r2425_by_r23_result_r0>
//char sectorsPerCluster = sdCardGetChar();
	rcall	sd_card_get_char
    36e2:	5f d0       	rcall	.+190    	; 0x37a2 <sdCardGetByte>

#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_sectorsPerCluster+0, r24
#endif

	mov		r2, r24
    36e4:	28 2e       	mov	r2, r24
//int  reservedSectors   = sdCardGetInt();
	rcall	sd_card_get_int							; Get reserved sectors and add it straight to R12:19:26:26
    36e6:	57 d0       	rcall	.+174    	; 0x3796 <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_reservedSectors+1, r25
    sts    SD_DEBUG_reservedSectors+0, r24
#endif

	rcall	sd_find_add_r2425_to_r1819_r2627			; which now contains (bootRecordSector + reservedSectors)
    36e8:	48 d0       	rcall	.+144    	; 0x377a <sd_find_add_r2425_to_r1819_r2627>
//sdCardSkipBytes(1);
	ldi		r24, 0x01
    36ea:	81 e0       	ldi	r24, 0x01	; 1
	rcall	sd_card_skip_bytes_max_256
    36ec:	4b d0       	rcall	.+150    	; 0x3784 <sd_card_skip_bytes_max_256>
//	int  maxRootDirectoryEntries = sdCardGetInt();
	rcall	sd_card_get_int
    36ee:	53 d0       	rcall	.+166    	; 0x3796 <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_maxRootDirectoryEntries+1, r25
    sts    SD_DEBUG_maxRootDirectoryEntries+0, r24
#endif

	movw	r16, r24								; Make a copy of Max Root Dir Entries for NumFilesToCheck
    36f0:	8c 01       	movw	r16, r24

	mov		r23, r0									; Do the second part of the maths for
    36f2:	70 2d       	mov	r23, r0
	rcall	sd_find_div_r2425_by_r23_result_r0		; ((maxRootDirectoryEntries * 32)/bytesPerSector)
    36f4:	3c d0       	rcall	.+120    	; 0x376e <sd_find_div_r2425_by_r23_result_r0>
													; leaving the result in R0 (If you try to custom format a disk
													; with 4096 RDE and only 256 BPS this will fail.  All sensible
													; "round" binary values will work
//sdCardSkipBytes(3);
	ldi		r24, 0x03
    36f6:	83 e0       	ldi	r24, 0x03	; 3
	rcall	sd_card_skip_bytes_max_256
    36f8:	45 d0       	rcall	.+138    	; 0x3784 <sd_card_skip_bytes_max_256>
//int sectorsPerFat = sdCardGetInt();
	rcall	sd_card_get_int							; Sectors per fat then divide by two
    36fa:	4d d0       	rcall	.+154    	; 0x3796 <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_sectorsPerFat+1, r25
    sts    SD_DEBUG_sectorsPerFat+0, r24
#endif

	lsl		r24										; and then add to (bootRecordSector + reservedSectors)
    36fc:	88 0f       	add	r24, r24
	rol		r25
    36fe:	99 1f       	adc	r25, r25
	rcall	sd_find_add_r2425_to_r1819_r2627
    3700:	3c d0       	rcall	.+120    	; 0x377a <sd_find_add_r2425_to_r1819_r2627>
//long dirTableSector = bootRecordSector + reservedSectors + (sectorsPerFat * 2);
//sd_stoptransmission();
	rcall	sd_card_stop_transmission
    3702:	db d0       	rcall	.+438    	; 0x38ba <sdCardStopTransmission>


//sd_cuesector(dirTableSector);
	movw	r24, r26
    3704:	cd 01       	movw	r24, r26
	movw	r22, r18
    3706:	b9 01       	movw	r22, r18
    sts    SD_DEBUG_dirTableSector+2, r24
    sts    SD_DEBUG_dirTableSector+1, r23
    sts    SD_DEBUG_dirTableSector+0, r22
#endif

	rcall	sd_card_cue_sector_address
    3708:	c3 d0       	rcall	.+390    	; 0x3890 <sdCardCueSectorAddress>

	movw	r24, r0									; Now that we have finished "cueing" the DirTable we can continue the maths
    370a:	c0 01       	movw	r24, r0
	rcall	sd_find_add_r2425_to_r1819_r2627			; dirTableSector + ((maxRootDirectoryEntries * 32)/bytesPerSector)
    370c:	36 d0       	rcall	.+108    	; 0x377a <sd_find_add_r2425_to_r1819_r2627>

	pop		r21								; pop the base address of the 8.3 filename string
    370e:	5f 91       	pop	r21
	pop		r20
    3710:	4f 91       	pop	r20

00003712 <sd_find_file_for_each_dir_entry_loop>:

sd_find_file_for_each_dir_entry_loop:
	movw	r28, r20						; Get the base address of the filename into the index_backup
    3712:	ea 01       	movw	r28, r20
	ldi		r22, 11							; number of chars to check (11 = 8+3)
    3714:	6b e0       	ldi	r22, 0x0B	; 11
	cbr		r23, (1<<0)						; clear the search for file flag
    3716:	7e 7f       	andi	r23, 0xFE	; 254

00003718 <sd_find_file_text_search_loop>:
sd_find_file_text_search_loop:
	rcall	sd_card_get_char				; Get the first byte from the SD card to compare
    3718:	44 d0       	rcall	.+136    	; 0x37a2 <sdCardGetByte>

	movw	r30, r28
    371a:	fe 01       	movw	r30, r28
	brts	sd_find_file_text_search_loop_not_ram
    371c:	0e f0       	brts	.+2      	; 0x3720 <sd_find_file_text_search_loop_not_ram>
	ld		r25, Z+							; get the first byte of the search string to compare
    371e:	91 91       	ld	r25, Z+

00003720 <sd_find_file_text_search_loop_not_ram>:
sd_find_file_text_search_loop_not_ram:
	brtc	sd_find_file_text_search_loop_not_flash
    3720:	0e f4       	brtc	.+2      	; 0x3724 <sd_find_file_text_search_loop_not_flash>
	lpm		r25, Z+
    3722:	95 91       	lpm	r25, Z+

00003724 <sd_find_file_text_search_loop_not_flash>:
sd_find_file_text_search_loop_not_flash:

	movw	r28, r30
    3724:	ef 01       	movw	r28, r30

	cp		r24, r25						; compare the two bytes
    3726:	89 17       	cp	r24, r25

	breq	sd_find_file_text_not_equal	; and if not matched then set dirty flag
    3728:	09 f0       	breq	.+2      	; 0x372c <sd_find_file_text_not_equal>
	sbr		r23, (1<<0)
    372a:	71 60       	ori	r23, 0x01	; 1

0000372c <sd_find_file_text_not_equal>:
sd_find_file_text_not_equal:
	dec		r22
    372c:	6a 95       	dec	r22
	brne	sd_find_file_text_search_loop	; continue for all 11 bytes
    372e:	a1 f7       	brne	.-24     	; 0x3718 <sd_find_file_text_search_loop>

	sbrs	r23, 0							; if the dirty flag was not set (ie: all 11 chars matched)
    3730:	70 ff       	sbrs	r23, 0
	rjmp	sd_find_file_text_found		; then we have found the file
    3732:	08 c0       	rjmp	.+16     	; 0x3744 <sd_find_file_text_found>

	subi	r16, 1							; subtract ONE from NumFilesToCheck
    3734:	01 50       	subi	r16, 0x01	; 1
	sbc		r17, r1
    3736:	11 09       	sbc	r17, r1

	brne	sd_find_file_keep_searching
    3738:	11 f4       	brne	.+4      	; 0x373e <sd_find_file_keep_searching>
	rcall	sd_find_clear_r22_23_24_25
    373a:	15 d0       	rcall	.+42     	; 0x3766 <sd_find_clear_r22_23_24_25>
	rjmp	sd_find_file_file_not_found
    373c:	0e c0       	rjmp	.+28     	; 0x375a <sd_find_file_file_not_found>

0000373e <sd_find_file_keep_searching>:

sd_find_file_keep_searching:
	ldi		r24, 21							; other wise skip fwd 21 bytes to the next directory entry (11 + 21 = 32)
    373e:	85 e1       	ldi	r24, 0x15	; 21
	rcall	sd_card_skip_bytes_max_256
    3740:	21 d0       	rcall	.+66     	; 0x3784 <sd_card_skip_bytes_max_256>

	rjmp	sd_find_file_for_each_dir_entry_loop	; and continue
    3742:	e7 cf       	rjmp	.-50     	; 0x3712 <sd_find_file_for_each_dir_entry_loop>

00003744 <sd_find_file_text_found>:

sd_find_file_text_found:

//sdCardSkipBytes(15);
	ldi		r24, 15							; Skip FWD to read the address of the first cluster of this file
    3744:	8f e0       	ldi	r24, 0x0F	; 15
	rcall	sd_card_skip_bytes_max_256
    3746:	1e d0       	rcall	.+60     	; 0x3784 <sd_card_skip_bytes_max_256>

//int firstCluster = sdCardGetInt();
	rcall	sd_card_get_int
    3748:	26 d0       	rcall	.+76     	; 0x3796 <sdCardGetInt>
#ifdef SD_CARD_DEBUG
    sts    SD_DEBUG_firstCluster+1, r25
    sts    SD_DEBUG_firstCluster+0, r24
#endif

	subi	r24, 2							; (firstCluster-2)
    374a:	82 50       	subi	r24, 0x02	; 2
	sbc		r25, r1
    374c:	91 09       	sbc	r25, r1

0000374e <sd_find_file_mul_by_BPS_loop>:

sd_find_file_mul_by_BPS_loop:					; Do a really dumb multiply by successive adds.
	rcall	sd_find_add_r2425_to_r1819_r2627	; This smaller code because we already have a function for the add
    374e:	15 d0       	rcall	.+42     	; 0x377a <sd_find_add_r2425_to_r1819_r2627>
	dec		r2									; so looping back x many SectorsPerCluster (in r2) manages a 8x16->24
    3750:	2a 94       	dec	r2
	brne	sd_find_file_mul_by_BPS_loop		; in only 3 words (even though it could take 4000 cycles)
    3752:	e9 f7       	brne	.-6      	; 0x374e <sd_find_file_mul_by_BPS_loop>
												; Note: This IS a 24 bit result for any file past the 40 megabyte mark

;sd_stoptransmission();
	rcall	sd_card_stop_transmission
    3754:	b2 d0       	rcall	.+356    	; 0x38ba <sdCardStopTransmission>


;return(dirTableSector+((maxRootDirectoryEntries * 32)/bytesPerSector)+((firstCluster-2)*sectorsPerCluster));
	movw	r22, r18
    3756:	b9 01       	movw	r22, r18
	movw	r24, r26
    3758:	cd 01       	movw	r24, r26

0000375a <sd_find_file_file_not_found>:
    sts    SD_DEBUG_firstSector+1, r23
    sts    SD_DEBUG_firstSector+0, r22
#endif

sd_find_file_file_not_found:
	pop		r29								; restore the registers we used
    375a:	df 91       	pop	r29
	pop		r28
    375c:	cf 91       	pop	r28
	pop		r17
    375e:	1f 91       	pop	r17
	pop		r16
    3760:	0f 91       	pop	r16
	pop		r2
    3762:	2f 90       	pop	r2
	ret
    3764:	08 95       	ret

00003766 <sd_find_clear_r22_23_24_25>:

sd_find_clear_r22_23_24_25:
	ldi		r22, 0x00
    3766:	60 e0       	ldi	r22, 0x00	; 0
	ldi		r23, 0x00
    3768:	70 e0       	ldi	r23, 0x00	; 0
	movw	r24, r22
    376a:	cb 01       	movw	r24, r22
	ret
    376c:	08 95       	ret

0000376e <sd_find_div_r2425_by_r23_result_r0>:

sd_find_div_r2425_by_r23_result_r0:					; This is a dumb divide only works for values with 1 high bit
	lsr		r25										; AFAIK this is OK for the FAT maths as MaxRDE can only be 512, 1024, 2048 or 4096
    376e:	96 95       	lsr	r25
	ror		r24
    3770:	87 95       	ror	r24
	lsr		r23
    3772:	76 95       	lsr	r23
	brcc	sd_find_div_r2425_by_r23_result_r0
    3774:	e0 f7       	brcc	.-8      	; 0x376e <sd_find_div_r2425_by_r23_result_r0>
	mov		r0, r24
    3776:	08 2e       	mov	r0, r24
	ret
    3778:	08 95       	ret

0000377a <sd_find_add_r2425_to_r1819_r2627>:

sd_find_add_r2425_to_r1819_r2627:
	add		r18, r24
    377a:	28 0f       	add	r18, r24
	adc		r19, r25
    377c:	39 1f       	adc	r19, r25
	adc		r26, r1
    377e:	a1 1d       	adc	r26, r1
	adc		r27, r1
    3780:	b1 1d       	adc	r27, r1
	ret
    3782:	08 95       	ret

00003784 <sd_card_skip_bytes_max_256>:



.section .text.sd_card_common_section
sd_card_skip_bytes_max_256:
	ldi		r25, 0x00
    3784:	90 e0       	ldi	r25, 0x00	; 0

00003786 <sdCardSkipBytes>:
sdCardSkipBytes:
sd_card_skip_bytes:
	movw	r22, r24
    3786:	bc 01       	movw	r22, r24

00003788 <sd_card_skip_bytes_loop>:

sd_card_skip_bytes_loop:
	rcall	sd_card_get_byte
    3788:	0c d0       	rcall	.+24     	; 0x37a2 <sdCardGetByte>
	subi	r22, 1
    378a:	61 50       	subi	r22, 0x01	; 1
	sbci	r23, 0
    378c:	70 40       	sbci	r23, 0x00	; 0
	brne	sd_card_skip_bytes_loop
    378e:	e1 f7       	brne	.-8      	; 0x3788 <sd_card_skip_bytes_loop>
	ret
    3790:	08 95       	ret

00003792 <sdCardGetLong>:

sdCardGetLong:
sd_card_get_long:
    rcall   sd_card_get_int     ; First two bytes from SD card and move to R22:23
    3792:	01 d0       	rcall	.+2      	; 0x3796 <sdCardGetInt>
    movw    r22, r24
    3794:	bc 01       	movw	r22, r24

00003796 <sdCardGetInt>:
                                ; Fall through to GetInt to receive 3rd and 4th bytes
sdCardGetInt:
sd_card_get_int:
    rcall   sd_card_get_byte    ; First byte from SD card to temp location in R20 (3rd byte of GetLong)
    3796:	05 d0       	rcall	.+10     	; 0x37a2 <sdCardGetByte>
    mov     r20, r24
    3798:	48 2f       	mov	r20, r24
    rcall   sd_card_get_byte    ; Second byte from SD card to temp location in R21 (4th byte of GetLong)
    379a:	03 d0       	rcall	.+6      	; 0x37a2 <sdCardGetByte>
    mov     r21, r24
    379c:	58 2f       	mov	r21, r24
    movw    r24, r20            ; Move R20:21 to the R24:25 location C is expecting it
    379e:	ca 01       	movw	r24, r20
    ret
    37a0:	08 95       	ret

000037a2 <sdCardGetByte>:

sdCardGetChar:
sd_card_get_char:
sdCardGetByte:
sd_card_get_byte:
    ldi     r24, 0xFF                  ; Send an FF out the SPI port
    37a2:	8f ef       	ldi	r24, 0xFF	; 255
    out     _SFR_IO_ADDR(SPDR),r24
    37a4:	8e bd       	out	0x2e, r24	; 46

    lds     r30, sd_512_byte_count+0   ; Get the 512 Byte counter from RAM
    37a6:	e0 91 a6 07 	lds	r30, 0x07A6	; 0x8007a6 <sd_512_byte_count>
    lds     r31, sd_512_byte_count+1
    37aa:	f0 91 a7 07 	lds	r31, 0x07A7	; 0x8007a7 <sd_512_byte_count+0x1>
    adiw    r30, 1                     ; Increment the 512 Byte counter
    37ae:	31 96       	adiw	r30, 0x01	; 1
    sts     sd_512_byte_count+0, r30   ; store the low byte of the 512 counter
    37b0:	e0 93 a6 07 	sts	0x07A6, r30	; 0x8007a6 <sd_512_byte_count>
    mov     r24, r31                   ; make a copy of the high byte of the counter
    37b4:	8f 2f       	mov	r24, r31
    andi    r24, 0x01                  ; AND it with 0x01 (mask the 16 bit counter to be maximum of 0x01FF)
    37b6:	81 70       	andi	r24, 0x01	; 1
    sts     sd_512_byte_count+1, r24   ; store the masked high byte back into RAM
    37b8:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <sd_512_byte_count+0x1>

    sbrs    r31, 1                     ; if the NON ANDed version is not 0x0200 (512)
    37bc:	f1 ff       	sbrs	r31, 1
    rjmp    sd_card_send_byte_wait     ; then just read the next byte
    37be:	09 c0       	rjmp	.+18     	; 0x37d2 <sd_card_send_byte_wait>

000037c0 <sd_card_hit_512_boundary>:

sd_card_hit_512_boundary:
    rcall	sd_card_send_byte_wait     ; Other wise read the next byte
    37c0:	08 d0       	rcall	.+16     	; 0x37d2 <sd_card_send_byte_wait>

    push    r24                        ; save it on the stack
    37c2:	8f 93       	push	r24
    rcall   sd_card_send_byte_ff       ; read and discard the two CRC bytes
    37c4:	04 d0       	rcall	.+8      	; 0x37ce <sdCardSendByteFF>
    rcall   sd_card_send_byte_ff
    37c6:	03 d0       	rcall	.+6      	; 0x37ce <sdCardSendByteFF>
    rcall   sd_card_get_data_token     ; wait for the data token
    37c8:	33 d0       	rcall	.+102    	; 0x3830 <sd_card_get_data_token>
    pop     r24                        ; then restore the data byte that was saved on the stack
    37ca:	8f 91       	pop	r24
    ret
    37cc:	08 95       	ret

000037ce <sdCardSendByteFF>:

sdCardSendByteFF:
sd_card_send_byte_ff:
    ldi     r24,0xff
    37ce:	8f ef       	ldi	r24, 0xFF	; 255

000037d0 <sdCardSendByte>:
sdCardSendByte:
sd_card_send_byte:
    out     _SFR_IO_ADDR(SPDR),r24
    37d0:	8e bd       	out	0x2e, r24	; 46

000037d2 <sd_card_send_byte_wait>:
sd_card_send_byte_wait:
    in      r24,_SFR_IO_ADDR(SPSR)
    37d2:	8d b5       	in	r24, 0x2d	; 45
    sbrs    r24,SPIF
    37d4:	87 ff       	sbrs	r24, 7
    rjmp    sd_card_send_byte_wait
    37d6:	fd cf       	rjmp	.-6      	; 0x37d2 <sd_card_send_byte_wait>
    in      r24,_SFR_IO_ADDR(SPDR)
    37d8:	8e b5       	in	r24, 0x2e	; 46
    ret
    37da:	08 95       	ret

000037dc <sd_card_send_80_clocks>:

sd_card_send_80_clocks:
    ldi     r25,10
    37dc:	9a e0       	ldi	r25, 0x0A	; 10

000037de <sd_card_send_80_clocks_loop>:
sd_card_send_80_clocks_loop:
    rcall   sd_card_send_byte_ff
    37de:	f7 df       	rcall	.-18     	; 0x37ce <sdCardSendByteFF>
    dec     r25
    37e0:	9a 95       	dec	r25
    brne    sd_card_send_80_clocks_loop
    37e2:	e9 f7       	brne	.-6      	; 0x37de <sd_card_send_80_clocks_loop>
    ret
    37e4:	08 95       	ret

000037e6 <sd_card_clock_and_release_with_error>:


sd_card_clock_and_release_with_error:
    ldi     r24, 0x01
    37e6:	81 e0       	ldi	r24, 0x01	; 1

000037e8 <sd_card_clock_and_release>:
sd_card_clock_and_release:
    push    r24
    37e8:	8f 93       	push	r24

000037ea <sd_card_clock_and_release_no_push_r24>:
sd_card_clock_and_release_no_push_r24:
    sbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS         ; Deassert Chip Select
    37ea:	5e 9a       	sbi	0x0b, 6	; 11
    rcall   sd_card_send_byte_ff
    37ec:	f0 df       	rcall	.-32     	; 0x37ce <sdCardSendByteFF>
    pop     r24
    37ee:	8f 91       	pop	r24
    ret
    37f0:	08 95       	ret

000037f2 <sd_card_send_command_no_address>:
;     Nil
;
; Trashed
;     R24 - temp
sd_card_send_command_no_address:
	ldi		r20, 0
    37f2:	40 e0       	ldi	r20, 0x00	; 0
	ldi		r21, 0
    37f4:	50 e0       	ldi	r21, 0x00	; 0
	movw	r22, r20
    37f6:	ba 01       	movw	r22, r20

000037f8 <sdCardSendCommand>:
sdCardSendCommand:
sd_card_send_command:
    cbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS        ; Assert Chip Select
    37f8:	5e 98       	cbi	0x0b, 6	; 11

    rcall   sd_card_send_byte           ; send command
    37fa:	ea df       	rcall	.-44     	; 0x37d0 <sdCardSendByte>
    mov     r24,r23
    37fc:	87 2f       	mov	r24, r23
    rcall   sd_card_send_byte           ; send high x
    37fe:	e8 df       	rcall	.-48     	; 0x37d0 <sdCardSendByte>
    mov     r24,r22
    3800:	86 2f       	mov	r24, r22
    rcall   sd_card_send_byte           ; send low x
    3802:	e6 df       	rcall	.-52     	; 0x37d0 <sdCardSendByte>
    mov     r24,r21
    3804:	85 2f       	mov	r24, r21
    rcall   sd_card_send_byte           ; send high y
    3806:	e4 df       	rcall	.-56     	; 0x37d0 <sdCardSendByte>
    mov     r24,r20
    3808:	84 2f       	mov	r24, r20
    rcall   sd_card_send_byte           ; send low y
    380a:	e2 df       	rcall	.-60     	; 0x37d0 <sdCardSendByte>
    ldi     r24, 0x95                   ; correct CRC for first command in SPI
    380c:	85 e9       	ldi	r24, 0x95	; 149
    rjmp   sd_card_send_byte            ; after that CRC is ignored, so no problem with always sending 0x95
    380e:	e0 cf       	rjmp	.-64     	; 0x37d0 <sdCardSendByte>

00003810 <sd_card_get_r1b_response>:
;
; Trashed
;     R24 (via sd_card_send_byte_ff)
;     R30, R31
sd_card_get_r1b_response:
    rcall   sd_card_get_r1_response_common  ; Get the R1 response into R24
    3810:	07 d0       	rcall	.+14     	; 0x3820 <sd_card_get_r1_response_common>
    push    r24                             ; Save R1 to the stack
    3812:	8f 93       	push	r24

00003814 <sd_card_get_r1b_response_loop>:
sd_card_get_r1b_response_loop:
    rcall   sd_card_send_byte_ff            ; Send out bytes on the SPI port until we
    3814:	dc df       	rcall	.-72     	; 0x37ce <sdCardSendByteFF>
    cpi     r24, 0xFF                       ; recieve an 0xFF back which indicates no
    3816:	8f 3f       	cpi	r24, 0xFF	; 255
    brne    sd_card_get_r1b_response_loop   ; longer busy
    3818:	e9 f7       	brne	.-6      	; 0x3814 <sd_card_get_r1b_response_loop>

    ; phantom pop r24                       ; restores the R1 response to R24
    ; phantom ret                           ; and return the R1 response in R24
    rjmp    sd_card_clock_and_release_no_push_r24
    381a:	e7 cf       	rjmp	.-50     	; 0x37ea <sd_card_clock_and_release_no_push_r24>

0000381c <sd_card_get_r1_response>:
;
; Trashed
;     R24 (via sd_card_send_byte_ff)
;     R30, R31
sd_card_get_r1_response:
    rcall   sd_card_get_r1_response_common  ; get the R1 response into R24
    381c:	01 d0       	rcall	.+2      	; 0x3820 <sd_card_get_r1_response_common>
    rjmp    sd_card_clock_and_release       ; and return the response after end of command clocks
    381e:	e4 cf       	rjmp	.-56     	; 0x37e8 <sd_card_clock_and_release>

00003820 <sd_card_get_r1_response_common>:
    ; phantom ret

sd_card_get_r1_response_common:
    ser     r30                             ; use R30:31 as a timeout counter
    3820:	ef ef       	ldi	r30, 0xFF	; 255
    ser     r31
    3822:	ff ef       	ldi	r31, 0xFF	; 255

00003824 <sd_card_get_r1_response_loop>:
sd_card_get_r1_response_loop:
    sbiw    r30,1                           ; Decrement the timeout counter
    3824:	31 97       	sbiw	r30, 0x01	; 1
    breq    sd_card_get_r1_response_end     ; if we have timed out then fail with whatever data was in r24
    3826:	19 f0       	breq	.+6      	; 0x382e <sd_card_get_r1_response_end>
    rcall   sd_card_send_byte_ff            ; get the next byte from the SD card to see if it is a data token
    3828:	d2 df       	rcall	.-92     	; 0x37ce <sdCardSendByteFF>
    sbrc    r24, 7                          ; If the MSB is set then we have found the R1 response
    382a:	87 fd       	sbrc	r24, 7
    rjmp    sd_card_get_r1_response_loop    ; So can skip the loop back to the start
    382c:	fb cf       	rjmp	.-10     	; 0x3824 <sd_card_get_r1_response_loop>

0000382e <sd_card_get_r1_response_end>:
sd_card_get_r1_response_end:
    ret                                     ; and return the R1 response in R24
    382e:	08 95       	ret

00003830 <sd_card_get_data_token>:
;     R24, R25 (via sd_card_send_byte_ff)
;     R30, R31
;
; Continually RXs bytes from the SD card until it receives 0xFE the data
sd_card_get_data_token:
    ser     r30                             ; use R30:31 as a timeout counter
    3830:	ef ef       	ldi	r30, 0xFF	; 255
    ser     r31
    3832:	ff ef       	ldi	r31, 0xFF	; 255

00003834 <sd_card_data_token_loop>:
sd_card_data_token_loop:
    sbiw    r30,1                           ; Decrement the timeout counter
    3834:	31 97       	sbiw	r30, 0x01	; 1
    breq    sd_card_data_token_end          ; if we have timed out then fail with whatever data was in r24
    3836:	19 f0       	breq	.+6      	; 0x383e <sd_card_data_token_end>
    rcall   sd_card_send_byte_ff            ; get the next byte from the SD card to see if it is a data token
    3838:	ca df       	rcall	.-108    	; 0x37ce <sdCardSendByteFF>
    cpi     r24, SD_DATA_TOKEN              ; if it is a data_token (0xFE) the quit loop with data_token in r24
    383a:	8e 3f       	cpi	r24, 0xFE	; 254
    brne    sd_card_data_token_loop         ; if it was not the data_token then try again
    383c:	d9 f7       	brne	.-10     	; 0x3834 <sd_card_data_token_loop>

0000383e <sd_card_data_token_end>:
sd_card_data_token_end:
    clr     r31                             ; leave r30:31 as 0x0000 for 512_byte_counter for other ASM functions
    383e:	ff 27       	eor	r31, r31
    clr     r30
    3840:	ee 27       	eor	r30, r30
    ret
    3842:	08 95       	ret

00003844 <sdCardInitNoBuffer>:
;     Nil
;
; Initializes the SD card.
sdCardInitNoBuffer:
sd_card_init_no_buffer:                     ; Setup I/O ports
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_SCK  ; SCK is high
    3844:	2f 9a       	sbi	0x05, 7	; 5
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_MOSI ; MOSI is high
    3846:	2d 9a       	sbi	0x05, 5	; 5
    sbi     _SFR_IO_ADDR(SPI_PORT), SD_MISO ; NOTE: MISO must be weak pull up during init for some cards
    3848:	2e 9a       	sbi	0x05, 6	; 5

    sbi     _SFR_IO_ADDR(SPI_DDR), SD_SCK   ; SD_SCK is an output
    384a:	27 9a       	sbi	0x04, 7	; 4
    sbi     _SFR_IO_ADDR(SPI_DDR), SD_MOSI  ; SD_MOSI is an output
    384c:	25 9a       	sbi	0x04, 5	; 4

    sbi     _SFR_IO_ADDR(SD_CS_PORT), SD_CS ; Initial SD_CS level is high
    384e:	5e 9a       	sbi	0x0b, 6	; 11
    sbi     _SFR_IO_ADDR(SD_CS_DDR),  SD_CS ; Direction is output
    3850:	56 9a       	sbi	0x0a, 6	; 10

    ldi     r30, 0x00                       ; load a counter for a SW delay loop of
    3852:	e0 e0       	ldi	r30, 0x00	; 0
    ldi     r31, 0x20                       ; approx 1mS (8192 x4 clks / 28Mhz)
    3854:	f0 e2       	ldi	r31, 0x20	; 32

00003856 <sd_card_init_delay_loop>:
sd_card_init_delay_loop:
    sbiw    r30, 0x01                       ; wait 1mS
    3856:	31 97       	sbiw	r30, 0x01	; 1
    brne    sd_card_init_delay_loop
    3858:	f1 f7       	brne	.-4      	; 0x3856 <sd_card_init_delay_loop>

    ldi     r24, (1<<MSTR)|(1<<SPE)|(1<<SPR1)|(1<<SPR0)    ;enable SPI interface clock div by 128 = ~~200Khz
    385a:	83 e5       	ldi	r24, 0x53	; 83
    out     _SFR_IO_ADDR(SPCR), r24
    385c:	8c bd       	out	0x2c, r24	; 44

	rcall   sd_card_send_80_clocks          ; 80 clocks for power stabilization
    385e:	be df       	rcall	.-132    	; 0x37dc <sd_card_send_80_clocks>

    ; send CMD0 until we get a 0x01 back, indicating card is busy

    ldi     r19, 0x20                       ; Maximum of 32 attempts for CMD0
    3860:	30 e2       	ldi	r19, 0x20	; 32

00003862 <sd_card_init_cmd0_loop>:
sd_card_init_cmd0_loop:
    ldi     r24, SD_CMD_GO_IDLE_STATE       ; issue card reset
    3862:	80 e4       	ldi	r24, 0x40	; 64
    rcall   sd_card_send_command_no_address
    3864:	c6 df       	rcall	.-116    	; 0x37f2 <sd_card_send_command_no_address>
    rcall   sd_card_get_r1_response         ; wait for the r1 response
    3866:	da df       	rcall	.-76     	; 0x381c <sd_card_get_r1_response>
    cpi     r24, 0x01                       ; should be 0x01 which is "busy" but no other errors
    3868:	81 30       	cpi	r24, 0x01	; 1
    breq    sd_card_init_card_detected
    386a:	19 f0       	breq	.+6      	; 0x3872 <sd_card_init_card_detected>

    dec     r19								; Decrement the "attempt" counter
    386c:	3a 95       	dec	r19
	brne    sd_card_init_cmd0_loop          ; if not tried MAX times yet then jump back and try again
    386e:	c9 f7       	brne	.-14     	; 0x3862 <sd_card_init_cmd0_loop>

                                                       ; Otherwise invalid / no card detected
	rjmp    sd_card_clock_and_release_with_error       ; so we give up and return an error
    3870:	ba cf       	rjmp	.-140    	; 0x37e6 <sd_card_clock_and_release_with_error>

00003872 <sd_card_init_card_detected>:
    ; phantom ret

sd_card_init_card_detected:
    ; send CMD1 until we get a 0x00 back, indicating card is done initializing

    ldi     r19, 0xFF                       ; Maximum of 255 attempts for CMD1
    3872:	3f ef       	ldi	r19, 0xFF	; 255

00003874 <sd_card_init_cmd1_loop>:
sd_card_init_cmd1_loop:
    ldi     r24, SD_CMD_SEND_OP_COND        ; Send CMD1 "Send OP Cond" to initialise the card
    3874:	81 e4       	ldi	r24, 0x41	; 65
    rcall   sd_card_send_command_no_address
    3876:	bd df       	rcall	.-134    	; 0x37f2 <sd_card_send_command_no_address>
    rcall   sd_card_get_r1_response         ; Get the R1 response
    3878:	d1 df       	rcall	.-94     	; 0x381c <sd_card_get_r1_response>
    cpi     r24, 0x00                       ; if Response is 0x00 then card is ready
    387a:	80 30       	cpi	r24, 0x00	; 0
    breq    sd_card_init_cmd1_done
    387c:	19 f0       	breq	.+6      	; 0x3884 <sd_card_init_cmd1_done>

    dec     r19								; Decrement the "attempt" counter
    387e:	3a 95       	dec	r19
	brne    sd_card_init_cmd1_loop          ; if not tried MAX times yet then jump back and try again
    3880:	c9 f7       	brne	.-14     	; 0x3874 <sd_card_init_cmd1_loop>

                                                       ; Otherwise invalid / no card detected
	rjmp    sd_card_clock_and_release_with_error       ; so we give up and return an error
    3882:	b1 cf       	rjmp	.-158    	; 0x37e6 <sd_card_clock_and_release_with_error>

00003884 <sd_card_init_cmd1_done>:
    ; phantom ret

sd_card_init_cmd1_done:
    cbi     _SFR_IO_ADDR(SPI_PORT), SD_MISO ; remove the weak pullup on MISO now we have done card init
    3884:	2e 98       	cbi	0x05, 6	; 5

    ldi     r25, (1<<MSTR)|(1<<SPE)         ; enable SPI interface clock div cleared for fastest speed
    3886:	90 e5       	ldi	r25, 0x50	; 80
    out     _SFR_IO_ADDR(SPCR), r25
    3888:	9c bd       	out	0x2c, r25	; 44
    ldi     r25, (1<<SPI2X)                 ; set SPI double speed
    388a:	91 e0       	ldi	r25, 0x01	; 1
    out     _SFR_IO_ADDR(SPSR), r25
    388c:	9d bd       	out	0x2d, r25	; 45

    rjmp    sd_card_clock_and_release       ; Deassert CS and return 0x00 "success" (already in r24 from above)
    388e:	ac cf       	rjmp	.-168    	; 0x37e8 <sd_card_clock_and_release>

00003890 <sdCardCueSectorAddress>:
; resets the sd_512_byte_count variable for further reads to keep track of packet
; location.
.section .text.sd_card_cue_section
sdCardCueSectorAddress:
sd_card_cue_sector_address:
    mov     r25, r24                        ; Regular SD needs byte adress so shift sector value by 9 bits (*512)
    3890:	98 2f       	mov	r25, r24
    mov     r24, r23                        ; by first shifting it one byte (8 bits)
    3892:	87 2f       	mov	r24, r23
    mov     r23, r22
    3894:	76 2f       	mov	r23, r22
    clr     r22
    3896:	66 27       	eor	r22, r22
    lsl     r23                             ; and then follow up with 1 more shift for a total of 9 bits
    3898:	77 0f       	add	r23, r23
    rol     r24
    389a:	88 1f       	adc	r24, r24
    rol     r25
    389c:	99 1f       	adc	r25, r25

0000389e <sdCardCueByteAddress>:

sdCardCueByteAddress:
sd_card_cue_byte_address:
    movw    r20, r22                        ; shift the address from R22:23:24:25 where it came in
    389e:	ab 01       	movw	r20, r22
    movw    r22, r24                        ; into R20:21:22:23 where sd_card_send_command expects it
    38a0:	bc 01       	movw	r22, r24

    ldi     r24, SD_CMD_READ_MULTIPLE_BLOCK
    38a2:	82 e5       	ldi	r24, 0x52	; 82
    rcall   sd_card_send_command
    38a4:	a9 df       	rcall	.-174    	; 0x37f8 <sdCardSendCommand>

    rcall   sd_card_get_data_token          ; wait for data token
    38a6:	c4 df       	rcall	.-120    	; 0x3830 <sd_card_get_data_token>
    cpi     r24, SD_DATA_TOKEN
    38a8:	8e 3f       	cpi	r24, 0xFE	; 254
    breq    sd_card_cue_end                 ; if data token received cue_sector succeded
    38aa:	09 f0       	breq	.+2      	; 0x38ae <sd_card_cue_end>

                                            ; other wise there was an error and we need to

                                                       ; return fail and
    rjmp    sd_card_clock_and_release_with_error       ; release the SD card bus
    38ac:	9c cf       	rjmp	.-200    	; 0x37e6 <sd_card_clock_and_release_with_error>

000038ae <sd_card_cue_end>:
    ; phantom ret

sd_card_cue_end:
    sts     sd_512_byte_count+0, r1         ; Reset the 512_byte counter
    38ae:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <sd_512_byte_count>
    sts     sd_512_byte_count+1, r1
    38b2:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <sd_512_byte_count+0x1>
    clr     r24                             ; return success
    38b6:	88 27       	eor	r24, r24
    ret
    38b8:	08 95       	ret

000038ba <sdCardStopTransmission>:
;
; Sends SD CMD12 "Stop Transmission" and then waits for the R1b response to
; indicate SD card is ready and deasserts the SD chip select line.
sdCardStopTransmission:
sd_card_stop_transmission:
    ldi     r24, SD_CMD_STOPTRANSMISSION
    38ba:	8c e4       	ldi	r24, 0x4C	; 76
    rcall   sd_card_send_command_no_address
    38bc:	9a df       	rcall	.-204    	; 0x37f2 <sd_card_send_command_no_address>
    rjmp    sd_card_get_r1b_response
    38be:	a8 cf       	rjmp	.-176    	; 0x3810 <sd_card_get_r1b_response>

000038c0 <main>:
u16 loopEndFound;

long sectorStart;

int main(){
	InitMusicPlayer(patches);
    38c0:	84 e5       	ldi	r24, 0x54	; 84
    38c2:	99 e1       	ldi	r25, 0x19	; 25
    38c4:	0e 94 44 11 	call	0x2288	; 0x2288 <InitMusicPlayer>
	SetTileTable(tiles);			//Set the tileset to use (set this first)
    38c8:	8c ed       	ldi	r24, 0xDC	; 220
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <SetTileTable>
	SetFontTilesIndex(TILES_SIZE);	//Set the tile number in the tilset that contains the first font
    38d0:	80 e2       	ldi	r24, 0x20	; 32
    38d2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <SetFontTilesIndex>
	ClearVram();					//Clear the screen (fills the vram with tile zero)
    38d6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <ClearVram>

	long otherOffset = 10;

	sdCardInitNoBuffer();
    38da:	0e 94 22 1c 	call	0x3844	; 0x3844 <sdCardInitNoBuffer>
	
	if((sectorStart = sdCardFindFileFirstSectorFlash(fileName)) == 0)
    38de:	81 e8       	ldi	r24, 0x81	; 129
    38e0:	99 e1       	ldi	r25, 0x19	; 25
    38e2:	0e 94 56 1b 	call	0x36ac	; 0x36ac <sdCardFindFileFirstSectorFlash>
    38e6:	60 93 3b 08 	sts	0x083B, r22	; 0x80083b <sectorStart>
    38ea:	70 93 3c 08 	sts	0x083C, r23	; 0x80083c <sectorStart+0x1>
    38ee:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <sectorStart+0x2>
    38f2:	90 93 3e 08 	sts	0x083E, r25	; 0x80083e <sectorStart+0x3>
    38f6:	61 15       	cp	r22, r1
    38f8:	71 05       	cpc	r23, r1
    38fa:	81 05       	cpc	r24, r1
    38fc:	91 05       	cpc	r25, r1
    38fe:	19 f4       	brne	.+6      	; 0x3906 <main+0x46>
		Print(0,0,PSTR("FILE SD_MUSIC.DAT NOT FOUND ON SD CARD"));
    3900:	4d e8       	ldi	r20, 0x8D	; 141
    3902:	59 e1       	ldi	r21, 0x19	; 25
    3904:	04 c0       	rjmp	.+8      	; 0x390e <main+0x4e>
	else{
		sdCardCueSectorAddress(sectorStart);
    3906:	0e 94 48 1c 	call	0x3890	; 0x3890 <sdCardCueSectorAddress>
		Print(0,0,PSTR("FOUND SD_MUSIC.DAT"));
    390a:	44 eb       	ldi	r20, 0xB4	; 180
    390c:	59 e1       	ldi	r21, 0x19	; 25
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	70 e0       	ldi	r23, 0x00	; 0
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
	}
	sdInUse = 0;
    391a:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <sdInUse>

	while(!SongBufFull()){
    391e:	0e 94 6d 13 	call	0x26da	; 0x26da <SongBufFull>
    3922:	81 11       	cpse	r24, r1
    3924:	1d c0       	rjmp	.+58     	; 0x3960 <main+0xa0>
		//SongBufWrite(sdCardGetByte());songOff++;
		SongBufWrite(pgm_read_byte(&CompressedSong[songOff++]));
    3926:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <songOff>
    392a:	90 91 a9 07 	lds	r25, 0x07A9	; 0x8007a9 <songOff+0x1>
    392e:	a0 91 aa 07 	lds	r26, 0x07AA	; 0x8007aa <songOff+0x2>
    3932:	b0 91 ab 07 	lds	r27, 0x07AB	; 0x8007ab <songOff+0x3>
    3936:	ac 01       	movw	r20, r24
    3938:	bd 01       	movw	r22, r26
    393a:	4f 5f       	subi	r20, 0xFF	; 255
    393c:	5f 4f       	sbci	r21, 0xFF	; 255
    393e:	6f 4f       	sbci	r22, 0xFF	; 255
    3940:	7f 4f       	sbci	r23, 0xFF	; 255
    3942:	40 93 a8 07 	sts	0x07A8, r20	; 0x8007a8 <songOff>
    3946:	50 93 a9 07 	sts	0x07A9, r21	; 0x8007a9 <songOff+0x1>
    394a:	60 93 aa 07 	sts	0x07AA, r22	; 0x8007aa <songOff+0x2>
    394e:	70 93 ab 07 	sts	0x07AB, r23	; 0x8007ab <songOff+0x3>
    3952:	fc 01       	movw	r30, r24
    3954:	e4 58       	subi	r30, 0x84	; 132
    3956:	fd 4e       	sbci	r31, 0xED	; 237
    3958:	84 91       	lpm	r24, Z
    395a:	0e 94 86 13 	call	0x270c	; 0x270c <SongBufWrite>
    395e:	df cf       	rjmp	.-66     	; 0x391e <main+0x5e>
	}
//	songOff = 0;


	StartSong();
    3960:	0e 94 66 11 	call	0x22cc	; 0x22cc <StartSong>
//TriggerFx(0,255,1);
	u16 counter = 0;
	sdInUse = 0;
    3964:	10 92 3a 08 	sts	0x083A, r1	; 0x80083a <sdInUse>

	while(1){
		Print(0,2,PSTR("SONGPOS  :"));
    3968:	47 ec       	ldi	r20, 0xC7	; 199
    396a:	59 e1       	ldi	r21, 0x19	; 25
    396c:	62 e0       	ldi	r22, 0x02	; 2
    396e:	70 e0       	ldi	r23, 0x00	; 0
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
		PrintInt(14,2,songPos,1);
    3978:	40 91 14 08 	lds	r20, 0x0814	; 0x800814 <songPos>
    397c:	50 91 15 08 	lds	r21, 0x0815	; 0x800815 <songPos+0x1>
    3980:	21 e0       	ldi	r18, 0x01	; 1
    3982:	62 e0       	ldi	r22, 0x02	; 2
    3984:	70 e0       	ldi	r23, 0x00	; 0
    3986:	8e e0       	ldi	r24, 0x0E	; 14
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	0e 94 03 1b 	call	0x3606	; 0x3606 <PrintInt>

		Print(0,3,PSTR("LOOPSTART:"));
    398e:	42 ed       	ldi	r20, 0xD2	; 210
    3990:	59 e1       	ldi	r21, 0x19	; 25
    3992:	63 e0       	ldi	r22, 0x03	; 3
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
		PrintInt(14,3,loopStart,1);
    399e:	40 91 36 08 	lds	r20, 0x0836	; 0x800836 <loopStart>
    39a2:	50 91 37 08 	lds	r21, 0x0837	; 0x800837 <loopStart+0x1>
    39a6:	21 e0       	ldi	r18, 0x01	; 1
    39a8:	63 e0       	ldi	r22, 0x03	; 3
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	8e e0       	ldi	r24, 0x0E	; 14
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 03 1b 	call	0x3606	; 0x3606 <PrintInt>

		Print(0,4,PSTR("LOOPEND  :"));
    39b4:	4d ed       	ldi	r20, 0xDD	; 221
    39b6:	59 e1       	ldi	r21, 0x19	; 25
    39b8:	64 e0       	ldi	r22, 0x04	; 4
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
		PrintInt(14,4,loopEndFound,1);
    39c4:	40 91 3f 08 	lds	r20, 0x083F	; 0x80083f <loopEndFound>
    39c8:	50 91 40 08 	lds	r21, 0x0840	; 0x800840 <loopEndFound+0x1>
    39cc:	21 e0       	ldi	r18, 0x01	; 1
    39ce:	64 e0       	ldi	r22, 0x04	; 4
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	8e e0       	ldi	r24, 0x0E	; 14
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 03 1b 	call	0x3606	; 0x3606 <PrintInt>

		Print(0,6,PSTR("BUFFERED :"));
    39da:	48 ee       	ldi	r20, 0xE8	; 232
    39dc:	59 e1       	ldi	r21, 0x19	; 25
    39de:	66 e0       	ldi	r22, 0x06	; 6
    39e0:	70 e0       	ldi	r23, 0x00	; 0
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
		PrintInt(14,6,SongBufBytes(),1);
    39ea:	0e 94 7d 13 	call	0x26fa	; 0x26fa <SongBufBytes>
    39ee:	48 2f       	mov	r20, r24
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	21 e0       	ldi	r18, 0x01	; 1
    39f4:	66 e0       	ldi	r22, 0x06	; 6
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	8e e0       	ldi	r24, 0x0E	; 14
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	0e 94 03 1b 	call	0x3606	; 0x3606 <PrintInt>
		Print(0,7,PSTR("CAPACITY :"));
    3a00:	43 ef       	ldi	r20, 0xF3	; 243
    3a02:	59 e1       	ldi	r21, 0x19	; 25
    3a04:	67 e0       	ldi	r22, 0x07	; 7
    3a06:	70 e0       	ldi	r23, 0x00	; 0
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	0e 94 3b 1b 	call	0x3676	; 0x3676 <Print>
		PrintInt(14,7,SONG_BUFFER_SIZE,1);
    3a10:	21 e0       	ldi	r18, 0x01	; 1
    3a12:	40 e2       	ldi	r20, 0x20	; 32
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	67 e0       	ldi	r22, 0x07	; 7
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	8e e0       	ldi	r24, 0x0E	; 14
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 03 1b 	call	0x3606	; 0x3606 <PrintInt>

		CustomWaitVsync(1);
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <CustomWaitVsync>
			sdCardCueSectorAddress(sectorStart+otherOffset);//move to the start of the other data
			sdCardDirectReadSimple(&vram[100],16);//read "HELLO WORLD!"
			sdCardCueByteAddress((uint32_t)((sectorStart*512UL)+songOff));//restore the SD back to the song position
			sdInUse = 0;//tell the CustomWaitVsync() it can touch the SD card again
		}*/
	}
    3a28:	9f cf       	rjmp	.-194    	; 0x3968 <main+0xa8>

00003a2a <CustomWaitVsync>:
}

void CustomWaitVsync(u8 frames){//we do a best effort to keep up to the demand of the song player
    3a2a:	cf 93       	push	r28
    3a2c:	c8 2f       	mov	r28, r24
	while(frames){
    3a2e:	cc 23       	and	r28, r28
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <CustomWaitVsync+0xa>
    3a32:	60 c0       	rjmp	.+192    	; 0x3af4 <CustomWaitVsync+0xca>
		if(loopEnd){//we read past the end of the song..luckily it is padded with bytes from the loop start
    3a34:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <loopEnd>
    3a38:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <loopEnd+0x1>
    3a3c:	89 2b       	or	r24, r25
    3a3e:	89 f1       	breq	.+98     	; 0x3aa2 <CustomWaitVsync+0x78>
			//songPos = (songPos-loopEnd)+loopStart;
			loopEndFound = loopEnd;//just to display it once found(not needed for games)
    3a40:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <loopEnd>
    3a44:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <loopEnd+0x1>
    3a48:	90 93 40 08 	sts	0x0840, r25	; 0x800840 <loopEndFound+0x1>
    3a4c:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <loopEndFound>
			loopEnd = 0;//since we immediately zero it so we don't keep doing it
    3a50:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <loopEnd+0x1>
    3a54:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <loopEnd>
			songOff = (songOff-loopEnd)+loopStart;
    3a58:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <loopEnd>
    3a5c:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <loopEnd+0x1>
    3a60:	20 91 36 08 	lds	r18, 0x0836	; 0x800836 <loopStart>
    3a64:	30 91 37 08 	lds	r19, 0x0837	; 0x800837 <loopStart+0x1>
    3a68:	40 91 a8 07 	lds	r20, 0x07A8	; 0x8007a8 <songOff>
    3a6c:	50 91 a9 07 	lds	r21, 0x07A9	; 0x8007a9 <songOff+0x1>
    3a70:	60 91 aa 07 	lds	r22, 0x07AA	; 0x8007aa <songOff+0x2>
    3a74:	70 91 ab 07 	lds	r23, 0x07AB	; 0x8007ab <songOff+0x3>
    3a78:	42 0f       	add	r20, r18
    3a7a:	53 1f       	adc	r21, r19
    3a7c:	61 1d       	adc	r22, r1
    3a7e:	71 1d       	adc	r23, r1
    3a80:	48 1b       	sub	r20, r24
    3a82:	59 0b       	sbc	r21, r25
    3a84:	61 09       	sbc	r22, r1
    3a86:	71 09       	sbc	r23, r1
    3a88:	40 93 a8 07 	sts	0x07A8, r20	; 0x8007a8 <songOff>
    3a8c:	50 93 a9 07 	sts	0x07A9, r21	; 0x8007a9 <songOff+0x1>
    3a90:	60 93 aa 07 	sts	0x07AA, r22	; 0x8007aa <songOff+0x2>
    3a94:	70 93 ab 07 	sts	0x07AB, r23	; 0x8007ab <songOff+0x3>
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <CustomWaitVsync+0x78>
			
		}
 	
		while(!GetVsyncFlag()){//try to use cycles that we would normally waste
//TriggerFx(1,255,1);
			if(!sdInUse){//we are clear to use the SD card, the other section has restored our offset
    3a9a:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <sdInUse>
    3a9e:	88 23       	and	r24, r24
    3aa0:	29 f0       	breq	.+10     	; 0x3aac <CustomWaitVsync+0x82>
//sdCardStopTransmission();
//sdCardCueByteAddress((sectorStart*512UL)+songOff);
			
		}
 	
		while(!GetVsyncFlag()){//try to use cycles that we would normally waste
    3aa2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GetVsyncFlag>
    3aa6:	88 23       	and	r24, r24
    3aa8:	c1 f3       	breq	.-16     	; 0x3a9a <CustomWaitVsync+0x70>
    3aaa:	20 c0       	rjmp	.+64     	; 0x3aec <CustomWaitVsync+0xc2>
//TriggerFx(1,255,1);
			if(!sdInUse){//we are clear to use the SD card, the other section has restored our offset
				if(!SongBufFull()){
    3aac:	0e 94 6d 13 	call	0x26da	; 0x26da <SongBufFull>
    3ab0:	81 11       	cpse	r24, r1
    3ab2:	f7 cf       	rjmp	.-18     	; 0x3aa2 <CustomWaitVsync+0x78>
					//SongBufWrite(sdCardGetByte());songOff++;
					SongBufWrite(pgm_read_byte(&CompressedSong[songOff++]));
    3ab4:	40 91 a8 07 	lds	r20, 0x07A8	; 0x8007a8 <songOff>
    3ab8:	50 91 a9 07 	lds	r21, 0x07A9	; 0x8007a9 <songOff+0x1>
    3abc:	60 91 aa 07 	lds	r22, 0x07AA	; 0x8007aa <songOff+0x2>
    3ac0:	70 91 ab 07 	lds	r23, 0x07AB	; 0x8007ab <songOff+0x3>
    3ac4:	db 01       	movw	r26, r22
    3ac6:	ca 01       	movw	r24, r20
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	a1 1d       	adc	r26, r1
    3acc:	b1 1d       	adc	r27, r1
    3ace:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <songOff>
    3ad2:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <songOff+0x1>
    3ad6:	a0 93 aa 07 	sts	0x07AA, r26	; 0x8007aa <songOff+0x2>
    3ada:	b0 93 ab 07 	sts	0x07AB, r27	; 0x8007ab <songOff+0x3>
    3ade:	fa 01       	movw	r30, r20
    3ae0:	e4 58       	subi	r30, 0x84	; 132
    3ae2:	fd 4e       	sbci	r31, 0xED	; 237
    3ae4:	84 91       	lpm	r24, Z
    3ae6:	0e 94 86 13 	call	0x270c	; 0x270c <SongBufWrite>
    3aea:	db cf       	rjmp	.-74     	; 0x3aa2 <CustomWaitVsync+0x78>
				}			
			}
		}
		ClearVsyncFlag();
    3aec:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <ClearVsyncFlag>
		frames--;
    3af0:	c1 50       	subi	r28, 0x01	; 1
    3af2:	9d cf       	rjmp	.-198    	; 0x3a2e <CustomWaitVsync+0x4>
	}
}
    3af4:	cf 91       	pop	r28
    3af6:	08 95       	ret

00003af8 <__udivmodhi4>:
    3af8:	aa 1b       	sub	r26, r26
    3afa:	bb 1b       	sub	r27, r27
    3afc:	51 e1       	ldi	r21, 0x11	; 17
    3afe:	07 c0       	rjmp	.+14     	; 0x3b0e <__udivmodhi4_ep>

00003b00 <__udivmodhi4_loop>:
    3b00:	aa 1f       	adc	r26, r26
    3b02:	bb 1f       	adc	r27, r27
    3b04:	a6 17       	cp	r26, r22
    3b06:	b7 07       	cpc	r27, r23
    3b08:	10 f0       	brcs	.+4      	; 0x3b0e <__udivmodhi4_ep>
    3b0a:	a6 1b       	sub	r26, r22
    3b0c:	b7 0b       	sbc	r27, r23

00003b0e <__udivmodhi4_ep>:
    3b0e:	88 1f       	adc	r24, r24
    3b10:	99 1f       	adc	r25, r25
    3b12:	5a 95       	dec	r21
    3b14:	a9 f7       	brne	.-22     	; 0x3b00 <__udivmodhi4_loop>
    3b16:	80 95       	com	r24
    3b18:	90 95       	com	r25
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	08 95       	ret

00003b20 <__divmodhi4>:
    3b20:	97 fb       	bst	r25, 7
    3b22:	07 2e       	mov	r0, r23
    3b24:	16 f4       	brtc	.+4      	; 0x3b2a <__divmodhi4+0xa>
    3b26:	00 94       	com	r0
    3b28:	07 d0       	rcall	.+14     	; 0x3b38 <__divmodhi4_neg1>
    3b2a:	77 fd       	sbrc	r23, 7
    3b2c:	09 d0       	rcall	.+18     	; 0x3b40 <__divmodhi4_neg2>
    3b2e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__udivmodhi4>
    3b32:	07 fc       	sbrc	r0, 7
    3b34:	05 d0       	rcall	.+10     	; 0x3b40 <__divmodhi4_neg2>
    3b36:	3e f4       	brtc	.+14     	; 0x3b46 <__divmodhi4_exit>

00003b38 <__divmodhi4_neg1>:
    3b38:	90 95       	com	r25
    3b3a:	81 95       	neg	r24
    3b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3e:	08 95       	ret

00003b40 <__divmodhi4_neg2>:
    3b40:	70 95       	com	r23
    3b42:	61 95       	neg	r22
    3b44:	7f 4f       	sbci	r23, 0xFF	; 255

00003b46 <__divmodhi4_exit>:
    3b46:	08 95       	ret

00003b48 <_exit>:
    3b48:	f8 94       	cli

00003b4a <__stop_program>:
    3b4a:	ff cf       	rjmp	.-2      	; 0x3b4a <__stop_program>
