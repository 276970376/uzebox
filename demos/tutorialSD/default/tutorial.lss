
tutorial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00003ac4  00003bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ac4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000088a  0080010c  0080010c  00003bd0  2**1
                  ALLOC
  3 .comment      00000027  00000000  00000000  00003bd0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000500  00000000  00000000  00003bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003aef  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011eb  00000000  00000000  00007be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000160a  00000000  00000000  00008dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000080c  00000000  00000000  0000a3dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2f  00000000  00000000  0000abe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003218  00000000  00000000  0000ba17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000430  00000000  00000000  0000ec30  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <__ctors_end>
       4:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
       8:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
       c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      10:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      14:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      18:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      1c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      20:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      24:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      28:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      2c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      30:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      34:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__vector_13>
      38:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__vector_14>
      3c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      40:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      44:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      48:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      4c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      50:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      54:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      58:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      5c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      60:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      64:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      68:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>
      6c:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	6e 11 71 11 79 11 7d 11 85 11 8d 11 92 11 97 11     n.q.y.}.........
      ce:	9a 11 b3 11 b6 11 b9 11 f6 11 f9 11 fc 11           ..............

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <font>:
	...
     13c:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     14c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     15c:	00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     17c:	00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff     ................
     18c:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1d0:	00 00 00 ff 00 ff 00 00 ff ff ff ff ff 00 00 ff     ................
     1e0:	00 ff 00 00 00 ff 00 ff 00 00 ff ff ff ff ff 00     ................
     1f0:	00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     210:	ff 00 00 00 00 ff ff ff 00 00 ff 00 ff 00 ff 00     ................
     220:	ff 00 ff 00 00 00 00 ff ff ff 00 00 00 00 ff 00     ................
     230:	ff 00 ff 00 ff 00 ff 00 00 ff ff ff 00 00 00 00     ................
     240:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     25c:	ff ff 00 00 ff 00 ff ff 00 00 ff 00 00 00 00 ff     ................
     26c:	00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 ff 00     ................
     27c:	00 ff ff 00 ff 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
     2a4:	00 ff 00 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     2b4:	00 00 00 ff 00 00 00 00 ff 00 ff 00 ff 00 ff 00     ................
     2c4:	00 ff 00 00 00 ff ff 00 ff 00 00 00 00 00 00 00     ................
	...
     2e8:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
	...
     330:	00 ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
     340:	00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
     350:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     360:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     370:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
     380:	00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00     ................
     390:	00 ff 00 00 00 00 00 ff 00 00 00 00 ff 00 00 00     ................
     3a0:	00 00 ff 00 00 00 00 ff 00 00 00 00 00 00 00 00     ................
	...
     3c4:	00 00 ff 00 00 00 ff 00 ff 00 ff 00 00 ff ff ff     ................
     3d4:	00 00 00 00 ff 00 00 00 00 ff ff ff 00 00 ff 00     ................
     3e4:	ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     414:	ff 00 00 00 00 00 ff 00 00 00 ff ff ff ff ff 00     ................
     424:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     470:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 ff ff     ................
	...
     4ac:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
     500:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
     530:	ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00     ................
     540:	ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00     ................
     550:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     574:	00 00 ff ff 00 00 00 ff 00 00 ff 00 00 ff 00 00     ................
     584:	ff 00 00 ff 00 00 ff 00 00 ff 00 00 ff 00 00 ff     ................
     594:	00 00 ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
     5bc:	00 00 ff 00 00 00 00 ff ff 00 00 00 00 00 ff 00     ................
     5cc:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     5dc:	ff 00 00 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     604:	00 ff ff ff 00 00 ff 00 00 00 ff 00 00 00 00 00     ................
     614:	ff 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 ff     ................
     624:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
	...
     64c:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 ff     ................
     65c:	00 00 00 00 ff ff 00 00 00 00 00 00 ff 00 ff 00     ................
     66c:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     694:	00 00 00 ff 00 00 00 00 ff ff 00 00 00 ff 00 ff     ................
     6a4:	00 00 ff 00 00 ff 00 00 ff ff ff ff ff 00 00 00     ................
     6b4:	00 ff 00 00 00 00 00 ff 00 00 00 00 00 00 00 00     ................
	...
     6dc:	ff ff ff ff ff 00 ff 00 00 00 00 00 ff ff ff ff     ................
     6ec:	00 00 00 00 00 00 ff 00 00 00 00 00 ff 00 ff 00     ................
     6fc:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     724:	00 00 ff ff 00 00 00 ff 00 00 00 00 ff 00 00 00     ................
     734:	00 00 ff ff ff ff 00 00 ff 00 00 00 ff 00 ff 00     ................
     744:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     76c:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 ff     ................
     77c:	00 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 00     ................
     78c:	ff 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     7b4:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     7c4:	ff 00 00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00     ................
     7d4:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     7fc:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     80c:	ff 00 00 ff ff ff ff 00 00 00 00 00 ff 00 00 00     ................
     81c:	00 ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
     850:	00 ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     860:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
     898:	00 ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     8a8:	00 00 00 ff ff 00 00 00 00 ff ff 00 00 00 ff ff     ................
	...
     8dc:	00 ff 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00     ................
     8ec:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
	...
     928:	ff ff ff ff ff 00 00 00 00 00 00 00 ff ff ff ff     ................
     938:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     968:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
     978:	00 ff 00 00 00 00 ff 00 00 00 00 ff 00 00 00 00     ................
	...
     9ac:	00 ff ff ff 00 00 ff 00 00 00 ff 00 00 00 00 ff     ................
     9bc:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     9cc:	00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     9f4:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff     ................
     a04:	ff 00 ff 00 ff 00 ff 00 ff 00 ff ff ff 00 ff 00     ................
     a14:	00 00 00 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     a3c:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     a4c:	ff 00 ff ff ff ff ff 00 ff 00 00 00 ff 00 ff 00     ................
     a5c:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     a84:	ff ff ff ff 00 00 00 ff 00 00 ff 00 00 ff 00 00     ................
     a94:	ff 00 00 ff ff ff 00 00 00 ff 00 00 ff 00 00 ff     ................
     aa4:	00 00 ff 00 ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     acc:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     adc:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     aec:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     b14:	ff ff ff ff 00 00 00 ff 00 00 ff 00 00 ff 00 00     ................
     b24:	ff 00 00 ff 00 00 ff 00 00 ff 00 00 ff 00 00 ff     ................
     b34:	00 00 ff 00 ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     b5c:	ff ff ff ff ff 00 ff 00 00 00 00 00 ff 00 00 00     ................
     b6c:	00 00 ff ff ff ff 00 00 ff 00 00 00 00 00 ff 00     ................
     b7c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
	...
     ba4:	ff ff ff ff ff 00 ff 00 00 00 00 00 ff 00 00 00     ................
     bb4:	00 00 ff ff ff ff 00 00 ff 00 00 00 00 00 ff 00     ................
     bc4:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     bec:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     bfc:	00 00 ff 00 00 00 00 00 ff 00 00 ff ff 00 ff 00     ................
     c0c:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     c34:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     c44:	ff 00 ff ff ff ff ff 00 ff 00 00 00 ff 00 ff 00     ................
     c54:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     c7c:	00 ff ff ff 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     c8c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     c9c:	ff 00 00 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     cc4:	00 00 ff ff ff 00 00 00 00 ff 00 00 00 00 00 ff     ................
     cd4:	00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 ff 00     ................
     ce4:	00 ff 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
     d0c:	ff 00 00 00 ff 00 ff 00 00 ff 00 00 ff 00 ff 00     ................
     d1c:	00 00 ff ff 00 00 00 00 ff 00 ff 00 00 00 ff 00     ................
     d2c:	00 ff 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     d54:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
     d64:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
     d74:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
	...
     d9c:	ff 00 00 00 ff 00 ff ff 00 ff ff 00 ff 00 ff 00     ................
     dac:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     dbc:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     de4:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff ff 00 00     ................
     df4:	ff 00 ff 00 ff 00 ff 00 ff 00 00 ff ff 00 ff 00     ................
     e04:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     e2c:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     e3c:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     e4c:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     e74:	ff ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     e84:	ff 00 ff ff ff ff 00 00 ff 00 00 00 00 00 ff 00     ................
     e94:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     ebc:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     ecc:	ff 00 ff 00 00 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
     edc:	00 ff 00 00 00 ff ff 00 ff 00 00 00 00 00 00 00     ................
	...
     f04:	ff ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     f14:	ff 00 ff ff ff ff 00 00 ff 00 ff 00 00 00 ff 00     ................
     f24:	00 ff 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
     f4c:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     f5c:	00 00 00 ff ff ff 00 00 00 00 00 00 ff 00 ff 00     ................
     f6c:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
     f94:	ff ff ff ff ff 00 00 00 ff 00 00 00 00 00 ff 00     ................
     fa4:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
     fb4:	ff 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
     fdc:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
     fec:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
     ffc:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    1024:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1034:	ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00 00 ff     ................
    1044:	00 ff 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    106c:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    107c:	ff 00 ff 00 00 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    108c:	ff 00 ff 00 00 ff 00 ff 00 00 00 00 00 00 00 00     ................
	...
    10b4:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 00 ff 00 ff     ................
    10c4:	00 00 00 00 ff 00 00 00 00 ff 00 ff 00 00 ff 00     ................
    10d4:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    10fc:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 00 ff 00 ff     ................
    110c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    111c:	ff 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    1144:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 ff     ................
    1154:	00 00 00 00 ff 00 00 00 00 ff 00 00 00 00 ff 00     ................
    1164:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
	...
    1184:	00 00 00 ff ff ff 00 00 00 ff 00 00 00 00 00 ff     ................
    1194:	00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00     ................
    11a4:	00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
    11b4:	00 00 00 ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    11d4:	ff 00 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
    11e4:	00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00     ................
    11f4:	00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    1214:	00 00 00 ff ff ff 00 00 00 00 00 ff 00 00 00 00     ................
    1224:	00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00     ................
    1234:	00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff     ................
    1244:	00 00 00 ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    1260:	ff 00 00 00 00 ff 00 ff 00 00 ff 00 00 00 ff 00     ................
	...
    12dc:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    12ec:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    12fc:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1348:	00 ff ff ff 00 00 00 00 00 00 ff 00 00 ff ff ff     ................
    1358:	ff 00 ff 00 00 00 ff 00 00 ff ff ff ff 00 00 00     ................
	...
    1384:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff ff ff ff     ................
    1394:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
    13a4:	00 00 ff 00 ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    13d8:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    13e8:	00 00 ff 00 00 00 ff 00 00 ff ff ff 00 00 00 00     ................
	...
    1418:	ff 00 00 00 00 00 ff 00 00 ff ff ff ff 00 ff 00     ................
    1428:	00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00     ................
    1438:	00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1468:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff ff ff ff     ................
    1478:	00 00 ff 00 00 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    14a4:	00 00 ff ff 00 00 00 ff 00 00 ff 00 00 ff 00 00     ................
    14b4:	00 00 ff ff ff 00 00 00 00 ff 00 00 00 00 00 ff     ................
    14c4:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    14f8:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1508:	ff 00 ff 00 00 00 ff 00 00 ff ff ff ff 00 00 00     ................
    1518:	00 00 ff 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    1534:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff ff ff ff     ................
    1544:	00 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00     ................
    1554:	00 00 ff 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    157c:	00 00 ff 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    158c:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    159c:	ff 00 00 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    15c8:	ff 00 00 00 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    15d8:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
    15e8:	00 00 00 00 ff 00 00 ff 00 00 ff 00 00 00 ff ff     ................
	...
    160c:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    161c:	ff 00 ff 00 00 ff 00 00 ff ff ff 00 00 00 ff 00     ................
    162c:	00 ff 00 00 ff 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    1654:	00 ff ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
    1664:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    1674:	ff 00 00 00 00 ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    16a8:	ff ff 00 ff 00 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    16b8:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
	...
    16f0:	ff 00 ff ff 00 00 ff ff 00 00 ff 00 ff 00 00 00     ................
    1700:	ff 00 ff 00 00 00 ff 00 ff 00 00 00 ff 00 00 00     ................
	...
    1738:	00 ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1748:	ff 00 ff 00 00 00 ff 00 00 ff ff ff 00 00 00 00     ................
	...
    1780:	ff ff ff ff 00 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1790:	ff 00 ff 00 00 00 ff 00 ff ff ff ff 00 00 ff 00     ................
    17a0:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    17c8:	00 ff ff ff ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    17d8:	ff 00 ff 00 00 00 ff 00 00 ff ff ff ff 00 00 00     ................
    17e8:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    1810:	ff 00 ff ff 00 00 ff ff 00 00 ff 00 ff 00 00 00     ................
    1820:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    1858:	00 ff ff ff ff 00 ff 00 00 00 00 00 00 ff ff ff     ................
    1868:	00 00 00 00 00 00 ff 00 ff ff ff ff 00 00 00 00     ................
	...
    1894:	00 00 ff 00 00 00 00 00 ff 00 00 00 ff ff ff ff     ................
    18a4:	ff 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    18b4:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    18e8:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    18f8:	ff 00 ff 00 00 ff ff 00 00 ff ff 00 ff 00 00 00     ................
	...
    1930:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1940:	ff 00 00 ff 00 ff 00 00 00 00 ff 00 00 00 00 00     ................
	...
    1978:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00     ................
    1988:	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 00 00 00     ................
	...
    19c0:	ff 00 00 00 ff 00 00 ff 00 ff 00 00 00 00 ff 00     ................
    19d0:	00 00 00 ff 00 ff 00 00 ff 00 00 00 ff 00 00 00     ................
	...
    1a08:	ff 00 00 00 ff 00 ff 00 00 00 ff 00 ff 00 00 00     ................
    1a18:	ff 00 00 ff 00 ff 00 00 00 00 ff 00 00 00 00 ff     ................
    1a28:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a50:	ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 ff 00     ................
    1a60:	00 00 00 ff 00 00 00 00 ff ff ff ff ff 00 00 00     ................
	...
    1a88:	00 ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    1a98:	00 00 ff 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
    1aa8:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    1ab8:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ad0:	ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    1ae0:	00 00 ff 00 00 00 00 00 ff 00 00 00 00 00 ff 00     ................
    1af0:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    1b00:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b10:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
    1b20:	00 00 00 00 ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    1b30:	00 ff 00 00 00 00 ff 00 00 00 00 00 ff 00 00 00     ................
    1b40:	00 00 ff 00 00 00 00 ff 00 00 00 00 00 00 00 00     ................
	...
    1b70:	00 ff 00 00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff     ................
	...

00001ba0 <__c.2181>:
    1ba0:	48 65 6c 6c 6f 20 57 6f 72 6c 64 20 46 72 6f 6d     Hello World From
    1bb0:	20 54 68 65 20 55 7a 65 62 6f 78 21 00 00            The Uzebox!..

00001bbe <__ctors_end>:
    1bbe:	11 24       	eor	r1, r1
    1bc0:	1f be       	out	0x3f, r1	; 63
    1bc2:	cf ef       	ldi	r28, 0xFF	; 255
    1bc4:	d0 e1       	ldi	r29, 0x10	; 16
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	cd bf       	out	0x3d, r28	; 61

00001bca <__do_copy_data>:
    1bca:	11 e0       	ldi	r17, 0x01	; 1
    1bcc:	a0 e0       	ldi	r26, 0x00	; 0
    1bce:	b1 e0       	ldi	r27, 0x01	; 1
    1bd0:	e4 ec       	ldi	r30, 0xC4	; 196
    1bd2:	fa e3       	ldi	r31, 0x3A	; 58
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <__do_copy_data+0x10>
    1bd6:	05 90       	lpm	r0, Z+
    1bd8:	0d 92       	st	X+, r0
    1bda:	ac 30       	cpi	r26, 0x0C	; 12
    1bdc:	b1 07       	cpc	r27, r17
    1bde:	d9 f7       	brne	.-10     	; 0x1bd6 <__do_copy_data+0xc>

00001be0 <__do_clear_bss>:
    1be0:	19 e0       	ldi	r17, 0x09	; 9
    1be2:	ac e0       	ldi	r26, 0x0C	; 12
    1be4:	b1 e0       	ldi	r27, 0x01	; 1
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <.do_clear_bss_start>

00001be8 <.do_clear_bss_loop>:
    1be8:	1d 92       	st	X+, r1

00001bea <.do_clear_bss_start>:
    1bea:	a6 39       	cpi	r26, 0x96	; 150
    1bec:	b1 07       	cpc	r27, r17
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <.do_clear_bss_loop>

00001bf0 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    1bf0:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    1bf2:	88 e1       	ldi	r24, 0x18	; 24
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	80 93 60 00 	sts	0x0060, r24
    1bfc:	10 92 60 00 	sts	0x0060, r1
    1c00:	0f be       	out	0x3f, r0	; 63

00001c02 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    1c02:	0e 94 57 11 	call	0x22ae	; 0x22ae <isEepromFormatted>
    1c06:	81 11       	cpse	r24, r1
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <Initialize+0xc>
    1c0a:	0e 94 35 11 	call	0x226a	; 0x226a <FormatEeprom>

	cli();
    1c0e:	f8 94       	cli
    1c10:	e9 ef       	ldi	r30, 0xF9	; 249
    1c12:	f6 e0       	ldi	r31, 0x06	; 6
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    1c18:	29 e0       	ldi	r18, 0x09	; 9
    1c1a:	e5 30       	cpi	r30, 0x05	; 5
    1c1c:	f2 07       	cpc	r31, r18
    1c1e:	d9 f7       	brne	.-10     	; 0x1c16 <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    1c20:	89 ef       	ldi	r24, 0xF9	; 249
    1c22:	96 e0       	ldi	r25, 0x06	; 6
    1c24:	90 93 06 09 	sts	0x0906, r25
    1c28:	80 93 05 09 	sts	0x0905, r24
		mix_bank=0;
    1c2c:	10 92 07 09 	sts	0x0907, r1
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 1e 09 	sts	0x091E, r24
		tr4_barrel_hi=1;		
    1c36:	80 93 1f 09 	sts	0x091F, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    1c3a:	80 93 1d 09 	sts	0x091D, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    1c3e:	10 92 0a 09 	sts	0x090A, r1
    1c42:	10 92 10 09 	sts	0x0910, r1
    1c46:	10 92 16 09 	sts	0x0916, r1
    1c4a:	10 92 1c 09 	sts	0x091C, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    1c4e:	10 92 e4 06 	sts	0x06E4, r1
	sync_flags=0;
    1c52:	10 92 e6 06 	sts	0x06E6, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    1c56:	92 e1       	ldi	r25, 0x12	; 18
    1c58:	90 93 e5 06 	sts	0x06E5, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    1c5c:	98 ed       	ldi	r25, 0xD8	; 216
    1c5e:	90 93 ec 06 	sts	0x06EC, r25
	first_render_line=FIRST_RENDER_LINE;
    1c62:	94 e1       	ldi	r25, 0x14	; 20
    1c64:	90 93 eb 06 	sts	0x06EB, r25

	joypad1_status_hi=0;
    1c68:	10 92 f0 06 	sts	0x06F0, r1
    1c6c:	10 92 ef 06 	sts	0x06EF, r1
	joypad2_status_hi=0;
    1c70:	10 92 f4 06 	sts	0x06F4, r1
    1c74:	10 92 f3 06 	sts	0x06F3, r1
	sound_enabled=1;
    1c78:	80 93 09 09 	sts	0x0909, r24

	InitializeVideoMode();
    1c7c:	0e 94 81 1b 	call	0x3702	; 0x3702 <InitializeVideoMode>
    1c80:	80 e9       	ldi	r24, 0x90	; 144
    1c82:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    1c84:	fc 01       	movw	r30, r24
    1c86:	25 91       	lpm	r18, Z+
    1c88:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    1c8e:	30 83       	st	Z, r19
    1c90:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	8e 3b       	cpi	r24, 0xBE	; 190
    1c96:	92 07       	cpc	r25, r18
    1c98:	a9 f7       	brne	.-22     	; 0x1c84 <Initialize+0x82>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    1c9a:	78 94       	sei
	
	DisplayLogo();
    1c9c:	0e 94 80 1b 	call	0x3700	; 0x3700 <DisplayLogo>
    1ca0:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <main>
    1ca4:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <_exit>

00001ca8 <__bad_interrupt>:
    1ca8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001cac <sub_video_mode1>:
.section .text

sub_video_mode1:

	;waste line to align with next hsync in render function
	WAIT r19,1347
    1cac:	30 ee       	ldi	r19, 0xE0	; 224
    1cae:	3a 95       	dec	r19
    1cb0:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <sub_video_mode1+0x8>
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <sub_video_mode1+0x2>
    1cb6:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <sub_video_mode1+0xe>

	ldi YL,lo8(vram)
    1cba:	cc e0       	ldi	r28, 0x0C	; 12
	ldi YH,hi8(vram)
    1cbc:	d1 e0       	ldi	r29, 0x01	; 1

	ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    1cbe:	08 ed       	ldi	r16, 0xD8	; 216
	mov r10,r16
    1cc0:	a0 2e       	mov	r10, r16
	clr r22
    1cc2:	66 27       	eor	r22, r22
	ldi r23,TILE_WIDTH ;tile width in pixels
    1cc4:	76 e0       	ldi	r23, 0x06	; 6

00001cc6 <next_tile_line>:



next_tile_line:	
	rcall hsync_pulse
    1cc6:	36 d1       	rcall	.+620    	; 0x1f34 <hsync_pulse>

	WAIT r19,HSYNC_USABLE_CYCLES - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT
    1cc8:	3b e2       	ldi	r19, 0x2B	; 43
    1cca:	3a 95       	dec	r19
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <next_tile_line+0x4>
	
	call render_tile_line
    1cce:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <render_tile_line>

	WAIT r19,51 - CENTER_ADJUSTMENT
    1cd2:	31 e1       	ldi	r19, 0x11	; 17
    1cd4:	3a 95       	dec	r19
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <next_tile_line+0xe>

	dec r10
    1cd8:	aa 94       	dec	r10
	breq frame_end
    1cda:	89 f0       	breq	.+34     	; 0x1cfe <frame_end>
	
	lpm ;3 nop
    1cdc:	c8 95       	lpm
	inc r22
    1cde:	63 95       	inc	r22

	cpi r22,TILE_HEIGHT ;last char line? 1
    1ce0:	6c 30       	cpi	r22, 0x0C	; 12
	breq next_tile_row 
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <next_tile_row>
	
	;wait to align with next_tile_row instructions (+1 cycle for the breq)
	WAIT r19,10
    1ce4:	33 e0       	ldi	r19, 0x03	; 3
    1ce6:	3a 95       	dec	r19
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <next_tile_line+0x20>
    1cea:	00 00       	nop

	rjmp next_tile_line	
    1cec:	ec cf       	rjmp	.-40     	; 0x1cc6 <next_tile_line>

00001cee <next_tile_row>:

next_tile_row:
	clr r22		;current char line			;1	
    1cee:	66 27       	eor	r22, r22

	clr r0
    1cf0:	00 24       	eor	r0, r0
	ldi r19,VRAM_TILES_H*2
    1cf2:	30 e5       	ldi	r19, 0x50	; 80
	add YL,r19
    1cf4:	c3 0f       	add	r28, r19
	adc YH,r0
    1cf6:	d0 1d       	adc	r29, r0

	lpm
    1cf8:	c8 95       	lpm
	nop
    1cfa:	00 00       	nop

	rjmp next_tile_line
    1cfc:	e4 cf       	rjmp	.-56     	; 0x1cc6 <next_tile_line>

00001cfe <frame_end>:

frame_end:

	WAIT r19,17
    1cfe:	35 e0       	ldi	r19, 0x05	; 5
    1d00:	3a 95       	dec	r19
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <frame_end+0x2>
    1d04:	00 00       	nop
    1d06:	00 00       	nop

	rcall hsync_pulse ;145
    1d08:	15 d1       	rcall	.+554    	; 0x1f34 <hsync_pulse>

	;set vsync flag & flip field
	lds ZL,sync_flags
    1d0a:	e0 91 e6 06 	lds	r30, 0x06E6
	ldi r20,SYNC_FLAG_FIELD
    1d0e:	42 e0       	ldi	r20, 0x02	; 2
	eor ZL,r20
    1d10:	e4 27       	eor	r30, r20
	#if MODE1_FAST_VSYNC == 0
		sbrs ZL,1
	#endif
	ori ZL,SYNC_FLAG_VSYNC
    1d12:	e1 60       	ori	r30, 0x01	; 1
	sts sync_flags,ZL
    1d14:	e0 93 e6 06 	sts	0x06E6, r30
		
	;clear any pending timer int
	ldi ZL,(1<<OCF1A)
    1d18:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIFR1),ZL
    1d1a:	e0 93 36 00 	sts	0x0036, r30

	ret
    1d1e:	08 95       	ret

00001d20 <render_tile_line>:
; 
; cycles  = 1495
;*************************************************
render_tile_line:

	movw XL,YL			;copy current VRAM pointer to X
    1d20:	de 01       	movw	r26, r28
	
	;////////////////////////////////////////////
	;Compute the adress of the first tile to draw
	;////////////////////////////////////////////
	ld	r20,X+			;load absolute tile adress from VRAM (LSB)
    1d22:	4d 91       	ld	r20, X+
	ld	r21,X+			;load absolute tile adress from VRAM (MSB)
    1d24:	5d 91       	ld	r21, X+
	mul r22,r23			;compute Y offset in current tile row
    1d26:	67 9f       	mul	r22, r23
	movw r24,r0			;store result in r24:r25 for use in inner loop
    1d28:	c0 01       	movw	r24, r0
	add r20,r24			;add Y offset to tile address
    1d2a:	48 0f       	add	r20, r24
	adc r21,r25 		;add Y offset to tile address
    1d2c:	59 1f       	adc	r21, r25
	movw ZL,r20 		;copy to Z, the only register that can read from flash
    1d2e:	fa 01       	movw	r30, r20

	ldi r18,SCREEN_TILES_H ;load the number of horizontal tiles to draw
    1d30:	28 e2       	ldi	r18, 0x28	; 40

00001d32 <mode1_loop>:

mode1_loop:	
	lpm r16,Z+			;get pixel 0 from flash
    1d32:	05 91       	lpm	r16, Z+
	out VIDEO_PORT,r16	;and output it to the video DAC
    1d34:	08 b9       	out	0x08, r16	; 8
	
	ld	r20,X+			;load next tile adress from VRAM (LSB)
    1d36:	4d 91       	ld	r20, X+

	lpm r16,Z+			;get pixel 1 from flash
    1d38:	05 91       	lpm	r16, Z+
	out VIDEO_PORT,r16	;and output it to the video DAC
    1d3a:	08 b9       	out	0x08, r16	; 8

	ld	r21,X+			;load next tile adress from VRAM (MSB)
    1d3c:	5d 91       	ld	r21, X+

	lpm r16,Z+			;get pixel 2 from flash
    1d3e:	05 91       	lpm	r16, Z+
	out VIDEO_PORT,r16	;and output it to the video DAC
    1d40:	08 b9       	out	0x08, r16	; 8

	rjmp .				;2 cycles delay
    1d42:	00 c0       	rjmp	.+0      	; 0x1d44 <mode1_loop+0x12>

	lpm r16,Z+			;get pixel 3 from flash
    1d44:	05 91       	lpm	r16, Z+
	out VIDEO_PORT,r16	;and output it to the video DAC
    1d46:	08 b9       	out	0x08, r16	; 8

	add r20,r24			;add Y offset to tile address
    1d48:	48 0f       	add	r20, r24
	adc r21,r25 		;add Y offset to tile address
    1d4a:	59 1f       	adc	r21, r25

	lpm r16,Z+			;get pixel 4 from flash
    1d4c:	05 91       	lpm	r16, Z+
	out VIDEO_PORT,r16	;and output it to the video DAC
    1d4e:	08 b9       	out	0x08, r16	; 8

	lpm r16,Z+			;get pixel 5 from flash
    1d50:	05 91       	lpm	r16, Z+

	out VIDEO_PORT,r16	;and output it to the video DAC
	lpm r16,Z+			;get pixel 7 from flash
#endif

	movw ZL,r20			;load the next tile's adress in Z
    1d52:	fa 01       	movw	r30, r20
	dec r18				;decrement horizontal tiles to draw
    1d54:	2a 95       	dec	r18

	out VIDEO_PORT,r16	;and output it to the video DAC
    1d56:	08 b9       	out	0x08, r16	; 8
	brne mode1_loop		
    1d58:	61 f7       	brne	.-40     	; 0x1d32 <mode1_loop>
	
	lpm					;3 cycles delay
    1d5a:	c8 95       	lpm
	clr r16				;set last pixel to zero (black)
    1d5c:	00 27       	eor	r16, r16
	out VIDEO_PORT,r16
    1d5e:	08 b9       	out	0x08, r16	; 8

	ret
    1d60:	08 95       	ret

00001d62 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    1d62:	0f 92       	push	r0
	push r1
    1d64:	1f 92       	push	r1
	push ZL;2
    1d66:	ef 93       	push	r30
	push ZH;2
    1d68:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    1d6a:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    1d6c:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    1d6e:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    1d72:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    1d74:	f1 e0       	ldi	r31, 0x01	; 1

00001d76 <latency_loop>:
latency_loop:
	cp ZL,ZH
    1d76:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    1d78:	00 f0       	brcs	.+0      	; 0x1d7a <latency_loop+0x4>
	inc ZH
    1d7a:	f3 95       	inc	r31
	cpi ZH,10
    1d7c:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    1d7e:	d8 f3       	brcs	.-10     	; 0x1d76 <latency_loop>
	jmp .
    1d80:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <latency_loop+0xe>
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    1d84:	e0 91 e5 06 	lds	r30, 0x06E5
	dec ZL
    1d88:	ea 95       	dec	r30
	sts sync_pulse,ZL
    1d8a:	e0 93 e5 06 	sts	0x06E5, r30

	;process sync phases
	lds ZH,sync_phase
    1d8e:	f0 91 e4 06 	lds	r31, 0x06E4
	sbrc ZH,0
    1d92:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    1d94:	57 c0       	rjmp	.+174    	; 0x1e44 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    1d96:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    1d98:	98 f0       	brcs	.+38     	; 0x1dc0 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    1d9a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    1d9c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    1da0:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    1da2:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    1da6:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    1da8:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    1daa:	26 f4       	brtc	.+8      	; 0x1db4 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    1dac:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    1dae:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <update_sound>
	rjmp sync_end
    1db2:	b9 c0       	rjmp	.+370    	; 0x1f26 <sync_end>

00001db4 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    1db4:	e5 e1       	ldi	r30, 0x15	; 21
    1db6:	ea 95       	dec	r30
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <sync_pre_eq_no_sound_update+0x2>
    1dba:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    1dbc:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    1dbe:	b3 c0       	rjmp	.+358    	; 0x1f26 <sync_end>

00001dc0 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    1dc0:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    1dc2:	38 f1       	brcs	.+78     	; 0x1e12 <sync_post_eq>

	rjmp .
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <sync_eq+0x6>
	rjmp .
    1dc6:	00 c0       	rjmp	.+0      	; 0x1dc8 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    1dc8:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    1dca:	e0 fb       	bst	r30, 0
	ldi ZL,4
    1dcc:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    1dce:	16 f4       	brtc	.+4      	; 0x1dd4 <sync_eq_skip>
	
	call update_sound
    1dd0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <update_sound>

00001dd4 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    1dd4:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    1dd6:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    1dda:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    1ddc:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    1de0:	a2 c0       	rjmp	.+324    	; 0x1f26 <sync_end>

00001de2 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    1de2:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    1de4:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    1de6:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    1de8:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    1dec:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    1dee:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    1df0:	00 f0       	brcs	.+0      	; 0x1df2 <__vector_14+0x10>

	cpi ZL,2
    1df2:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    1df4:	00 f0       	brcs	.+0      	; 0x1df6 <__vector_14+0x14>

	cpi ZL,3
    1df6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    1df8:	00 f0       	brcs	.+0      	; 0x1dfa <__vector_14+0x18>

	cpi ZL,4
    1dfa:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    1dfc:	00 f0       	brcs	.+0      	; 0x1dfe <__vector_14+0x1c>

	cpi ZL,5
    1dfe:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    1e00:	00 f0       	brcs	.+0      	; 0x1e02 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    1e02:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    1e04:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    1e06:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    1e0a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    1e0c:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    1e0e:	ef 91       	pop	r30
	reti
    1e10:	18 95       	reti

00001e12 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    1e12:	00 c0       	rjmp	.+0      	; 0x1e14 <sync_post_eq+0x2>

	bst ZL,0
    1e14:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    1e16:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    1e18:	26 f4       	brtc	.+8      	; 0x1e22 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    1e1a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    1e1c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <update_sound>
	rjmp sync_pre_eq_cont
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <sync_pre_eq_cont>

00001e22 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    1e22:	e5 e1       	ldi	r30, 0x15	; 21
    1e24:	ea 95       	dec	r30
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <sync_post_eq_no_sound_update+0x2>
    1e28:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    1e2a:	28 9a       	sbi	0x05, 0	; 5

00001e2c <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    1e2c:	e0 91 e5 06 	lds	r30, 0x06E5
	cpi ZL,0
    1e30:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    1e34:	78 c0       	rjmp	.+240    	; 0x1f26 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    1e36:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    1e38:	e0 93 e5 06 	sts	0x06E5, r30
	ldi ZL,1
    1e3c:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    1e3e:	e0 93 e4 06 	sts	0x06E4, r30
	
	rjmp sync_end
    1e42:	71 c0       	rjmp	.+226    	; 0x1f26 <sync_end>

00001e44 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    1e44:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    1e46:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    1e4a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    1e4c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    1e50:	00 c0       	rjmp	.+0      	; 0x1e52 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    1e52:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    1e54:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <sync_hsync+0x14>
	call update_sound
    1e58:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    1e5c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    1e5e:	00 90 eb 06 	lds	r0, 0x06EB
	sub ZH,r0				
    1e62:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    1e64:	e0 91 e5 06 	lds	r30, 0x06E5
	cp ZL,ZH
    1e68:	ef 17       	cp	r30, r31
	brsh no_render
    1e6a:	e0 f4       	brcc	.+56     	; 0x1ea4 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    1e6c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    1e6e:	00 90 eb 06 	lds	r0, 0x06EB
	sub ZH,r0				
    1e72:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    1e74:	00 90 ec 06 	lds	r0, 0x06EC
	sub ZH,r0			
    1e78:	f0 19       	sub	r31, r0
	cp ZL,ZH
    1e7a:	ef 17       	cp	r30, r31
	brlo no_render
    1e7c:	98 f0       	brcs	.+38     	; 0x1ea4 <no_render>

	;push r1-r29
	ldi ZL,29
    1e7e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    1e80:	ff 27       	eor	r31, r31

00001e82 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    1e82:	00 80       	ld	r0, Z
	push r0
    1e84:	0f 92       	push	r0
	dec ZL
    1e86:	ea 95       	dec	r30
	brne push_loop	
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    1e8a:	0f e1       	ldi	r16, 0x1F	; 31
    1e8c:	0a 95       	dec	r16
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <push_loop+0xa>
    1e90:	00 00       	nop
    1e92:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    1e94:	0e 94 56 0e 	call	0x1cac	; 0x1cac <sub_video_mode1>

	;pop r1-r29
	ldi ZL,1
    1e98:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    1e9a:	ff 27       	eor	r31, r31

00001e9c <pop_loop>:
pop_loop:
	pop r0
    1e9c:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    1e9e:	01 92       	st	Z+, r0
	cpi ZL,30
    1ea0:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    1ea2:	e0 f3       	brcs	.-8      	; 0x1e9c <pop_loop>

00001ea4 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    1ea4:	e0 91 e5 06 	lds	r30, 0x06E5
	cpi ZL,0
    1ea8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <no_render+0xa>
	rjmp sync_end
    1eac:	3c c0       	rjmp	.+120    	; 0x1f26 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    1eae:	2f 93       	push	r18
	push r19
    1eb0:	3f 93       	push	r19
	push r20
    1eb2:	4f 93       	push	r20
	push r21
    1eb4:	5f 93       	push	r21
	push r22
    1eb6:	6f 93       	push	r22
	push r23
    1eb8:	7f 93       	push	r23
	push r24
    1eba:	8f 93       	push	r24
	push r25
    1ebc:	9f 93       	push	r25
	push r26
    1ebe:	af 93       	push	r26
	push r27
    1ec0:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    1ec2:	78 94       	sei
	clr r1
    1ec4:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    1ec6:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    1ec8:	e0 93 e4 06 	sts	0x06E4, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    1ecc:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    1ece:	e0 93 e5 06 	sts	0x06E5, r30



	;increment the vsync counter
	lds r24,vsync_counter
    1ed2:	80 91 f5 06 	lds	r24, 0x06F5
	lds r25,vsync_counter+1
    1ed6:	90 91 f6 06 	lds	r25, 0x06F6
	adiw r24,1
    1eda:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    1edc:	80 93 f5 06 	sts	0x06F5, r24
	sts vsync_counter+1,r25
    1ee0:	90 93 f6 06 	sts	0x06F6, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    1ee4:	e0 91 e7 06 	lds	r30, 0x06E7
	lds ZH,pre_vsync_user_callback+1
    1ee8:	f0 91 e8 06 	lds	r31, 0x06E8
	cp  ZL,r1
    1eec:	e1 15       	cp	r30, r1
	cpc ZH,r1
    1eee:	f1 05       	cpc	r31, r1
	breq .+2 
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <no_render+0x50>
	icall
    1ef2:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    1ef4:	0e 94 25 11 	call	0x224a	; 0x224a <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    1ef8:	0e 94 82 1b 	call	0x3704	; 0x3704 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    1efc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <process_music>
	clr r1
    1f00:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    1f02:	e0 91 e9 06 	lds	r30, 0x06E9
	lds ZH,post_vsync_user_callback+1
    1f06:	f0 91 ea 06 	lds	r31, 0x06EA
	cp  ZL,r1
    1f0a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    1f0c:	f1 05       	cpc	r31, r1
	breq .+2 
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <no_render+0x6e>
	icall
    1f10:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    1f12:	bf 91       	pop	r27
	pop r26
    1f14:	af 91       	pop	r26
	pop r25
    1f16:	9f 91       	pop	r25
	pop r24
    1f18:	8f 91       	pop	r24
	pop r23
    1f1a:	7f 91       	pop	r23
	pop r22
    1f1c:	6f 91       	pop	r22
	pop r21
    1f1e:	5f 91       	pop	r21
	pop r20
    1f20:	4f 91       	pop	r20
	pop r19
    1f22:	3f 91       	pop	r19
	pop r18
    1f24:	2f 91       	pop	r18

00001f26 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    1f26:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    1f28:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    1f2a:	ff 91       	pop	r31
	pop ZL
    1f2c:	ef 91       	pop	r30
	pop r1
    1f2e:	1f 90       	pop	r1
	pop r0
    1f30:	0f 90       	pop	r0
	reti
    1f32:	18 95       	reti

00001f34 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    1f34:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    1f36:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    1f38:	00 c0       	rjmp	.+0      	; 0x1f3a <hsync_pulse+0x6>
	call update_sound
    1f3a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <update_sound>

	lds ZL,sync_pulse
    1f3e:	e0 91 e5 06 	lds	r30, 0x06E5
	dec ZL
    1f42:	ea 95       	dec	r30
	sts sync_pulse,ZL
    1f44:	e0 93 e5 06 	sts	0x06E5, r30

	ret
    1f48:	08 95       	ret

00001f4a <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    1f4a:	e0 91 09 09 	lds	r30, 0x0909
	sbrc ZL,0
    1f4e:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    1f50:	0e 94 26 12 	call	0x244c	; 0x244c <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    1f54:	00 90 07 09 	lds	r0, 0x0907
	tst r0
    1f58:	00 20       	and	r0, r0
	brne set_hi_bank
    1f5a:	19 f4       	brne	.+6      	; 0x1f62 <set_hi_bank>
	ldi XL,lo8(mix_buf)
    1f5c:	a9 ef       	ldi	r26, 0xF9	; 249
	ldi XH,hi8(mix_buf)
    1f5e:	b6 e0       	ldi	r27, 0x06	; 6
	rjmp end_set_bank
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <end_set_bank>

00001f62 <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    1f62:	af ef       	ldi	r26, 0xFF	; 255
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    1f64:	b7 e0       	ldi	r27, 0x07	; 7

00001f66 <end_set_bank>:
end_set_bank:

	ldi r18,1
    1f66:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    1f68:	02 26       	eor	r0, r18
	sts mix_bank,r0
    1f6a:	00 92 07 09 	sts	0x0907, r0
	
	ldi r18,2
    1f6e:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    1f70:	20 93 08 09 	sts	0x0908, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    1f74:	e0 91 09 09 	lds	r30, 0x0909
	sbrs ZL,0
    1f78:	e0 ff       	sbrs	r30, 0
	ret
    1f7a:	08 95       	ret

	push r2
    1f7c:	2f 92       	push	r2
	push r3
    1f7e:	3f 92       	push	r3
	push r4
    1f80:	4f 92       	push	r4
	push r5
    1f82:	5f 92       	push	r5
	push r6
    1f84:	6f 92       	push	r6
	push r7
    1f86:	7f 92       	push	r7
	push r8
    1f88:	8f 92       	push	r8
	push r9
    1f8a:	9f 92       	push	r9
	push r10
    1f8c:	af 92       	push	r10
	push r11
    1f8e:	bf 92       	push	r11
	push r12
    1f90:	cf 92       	push	r12
	push r13
    1f92:	df 92       	push	r13
	push r14
    1f94:	ef 92       	push	r14
	push r15
    1f96:	ff 92       	push	r15
	push r16
    1f98:	0f 93       	push	r16
	push r17
    1f9a:	1f 93       	push	r17
	push r28
    1f9c:	cf 93       	push	r28
	push r29
    1f9e:	df 93       	push	r29
	;mix channels

	#if SOUND_CHANNEL_4_ENABLE == 1

		#if MIXER_CHAN4_TYPE == 0	
			lds r21,tr4_vol
    1fa0:	50 91 1c 09 	lds	r21, 0x091C
			lds r22,tr4_barrel_lo
    1fa4:	60 91 1e 09 	lds	r22, 0x091E
			lds r23,tr4_barrel_hi
    1fa8:	70 91 1f 09 	lds	r23, 0x091F
			lds r24,tr4_divider
    1fac:	80 91 20 09 	lds	r24, 0x0920





	lds r2,tr1_step_lo
    1fb0:	20 90 0b 09 	lds	r2, 0x090B
	lds r3,tr1_step_hi
    1fb4:	30 90 0c 09 	lds	r3, 0x090C
	lds r4,tr1_pos_lo
    1fb8:	40 90 0e 09 	lds	r4, 0x090E
	lds r5,tr1_pos_hi 
    1fbc:	50 90 0f 09 	lds	r5, 0x090F
	lds r6,tr1_pos_frac
    1fc0:	60 90 0d 09 	lds	r6, 0x090D
	lds r17,tr1_vol
    1fc4:	10 91 0a 09 	lds	r17, 0x090A
	
	lds r7,tr2_step_lo
    1fc8:	70 90 11 09 	lds	r7, 0x0911
	lds r8,tr2_step_hi
    1fcc:	80 90 12 09 	lds	r8, 0x0912
	lds r9,tr2_pos_frac
    1fd0:	90 90 13 09 	lds	r9, 0x0913
	lds r10,tr2_pos_lo
    1fd4:	a0 90 14 09 	lds	r10, 0x0914
	lds r11,tr2_pos_hi
    1fd8:	b0 90 15 09 	lds	r11, 0x0915
	lds r18,tr2_vol	
    1fdc:	20 91 10 09 	lds	r18, 0x0910

	lds r12,tr3_step_lo
    1fe0:	c0 90 17 09 	lds	r12, 0x0917
	lds r13,tr3_step_hi
    1fe4:	d0 90 18 09 	lds	r13, 0x0918
	lds r14,tr3_pos_lo
    1fe8:	e0 90 1a 09 	lds	r14, 0x091A
	lds r15,tr3_pos_hi
    1fec:	f0 90 1b 09 	lds	r15, 0x091B
	lds r16,tr3_pos_frac
    1ff0:	00 91 19 09 	lds	r16, 0x0919
	lds r19,tr3_vol	
    1ff4:	30 91 16 09 	lds	r19, 0x0916



	

	ldi r25,0xff 
    1ff8:	9f ef       	ldi	r25, 0xFF	; 255

00001ffa <mix_loop>:
		sbrc r28,7
		ser r29
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    1ffa:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    1ffc:	43 1c       	adc	r4, r3
	movw ZL,r4
    1ffe:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    2000:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    2002:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    2004:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2006:	c1 2d       	mov	r28, r1
		mov r29,r0	;ajust mix buffer msb
    2008:	d0 2d       	mov	r29, r0
		adc r29,r0	;ajust mix buffer msb		
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    200a:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    200c:	a8 1c       	adc	r10, r8
		movw ZL,r10
    200e:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    2010:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    2012:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    2014:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2016:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    2018:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    201a:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    201c:	ed 1c       	adc	r14, r13
		movw ZL,r14
    201e:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    2020:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    2022:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    2024:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2026:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    2028:	d0 1d       	adc	r29, r0
	#endif

	#if MIXER_CHAN4_TYPE == 0 && SOUND_CHANNEL_4_ENABLE == 1	

		;channel 4 - 7/15 bit LFSR (12 cycles/24 cycles)
		dec r24
    202a:	8a 95       	dec	r24
		brpl no_shift
    202c:	6a f4       	brpl	.+26     	; 0x2048 <no_shift>

		lds r20,tr4_params
    202e:	40 91 1d 09 	lds	r20, 0x091D
		mov r24,r20
    2032:	84 2f       	mov	r24, r20
		lsr r24 ;keep bits7:1
    2034:	86 95       	lsr	r24

		mov r0,r22  ;copy barrel shifter
    2036:	06 2e       	mov	r0, r22
		lsr r0
    2038:	06 94       	lsr	r0
		eor r0,r22  ;xor bit0 and bit1
    203a:	06 26       	eor	r0, r22
		bst r0,0
    203c:	00 fa       	bst	r0, 0
		lsr r23
    203e:	76 95       	lsr	r23
		ror r22	
    2040:	67 95       	ror	r22
		bld r23,6	;15 bits mode
    2042:	76 f9       	bld	r23, 6
		sbrs r20,0
    2044:	40 ff       	sbrs	r20, 0
		bld r22,6	;7 bits mode
    2046:	66 f9       	bld	r22, 6

00002048 <no_shift>:

	no_shift:
		ldi r20,0x80 ;-128
    2048:	40 e8       	ldi	r20, 0x80	; 128
		sbrc r22,0
    204a:	60 fd       	sbrc	r22, 0
		ldi r20,0x7f ;+127
    204c:	4f e7       	ldi	r20, 0x7F	; 127

		mulsu r20,r21;(sample*mixing vol)
    204e:	45 03       	mulsu	r20, r21
		;clr r0
		sbc r0,r0	;sign extend
    2050:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    2052:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    2054:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    2056:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    2058:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    205a:	d0 05       	cpc	r29, r0
	brlt .+2
    205c:	0c f0       	brlt	.+2      	; 0x2060 <no_shift+0x18>
	ldi r28,127
    205e:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    2060:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    2062:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    2064:	d0 05       	cpc	r29, r0
	brge .+2
    2066:	0c f4       	brge	.+2      	; 0x206a <no_shift+0x22>
	ldi r28,-128
    2068:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    206a:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    206c:	cd 93       	st	X+, r28


	dec r25
    206e:	9a 95       	dec	r25
	breq .+2
    2070:	09 f0       	breq	.+2      	; 0x2074 <no_shift+0x2c>
	rjmp mix_loop
    2072:	c3 cf       	rjmp	.-122    	; 0x1ffa <mix_loop>

	lds r20,mix_block
    2074:	40 91 08 09 	lds	r20, 0x0908
	dec r20
    2078:	4a 95       	dec	r20
	sts mix_block,r20
    207a:	40 93 08 09 	sts	0x0908, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    207e:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    2080:	09 f0       	breq	.+2      	; 0x2084 <no_shift+0x3c>
	rjmp mix_loop
    2082:	bb cf       	rjmp	.-138    	; 0x1ffa <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    2084:	60 92 0d 09 	sts	0x090D, r6
	sts tr1_pos_lo,r4	
    2088:	40 92 0e 09 	sts	0x090E, r4

	sts tr2_pos_frac,r9
    208c:	90 92 13 09 	sts	0x0913, r9
	sts tr2_pos_lo,r10
    2090:	a0 92 14 09 	sts	0x0914, r10

	sts tr3_pos_frac,r16
    2094:	00 93 19 09 	sts	0x0919, r16
	sts tr3_pos_lo,r14
    2098:	e0 92 1a 09 	sts	0x091A, r14

#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
    209c:	60 93 1e 09 	sts	0x091E, r22
	sts tr4_barrel_hi,r23
    20a0:	70 93 1f 09 	sts	0x091F, r23
	sts tr4_divider,r24
    20a4:	80 93 20 09 	sts	0x0920, r24
	sts tr4_pos_hi,r23
	sts tr4_pos_frac,r24

#endif

	pop r29
    20a8:	df 91       	pop	r29
	pop r28
    20aa:	cf 91       	pop	r28
	pop r17
    20ac:	1f 91       	pop	r17
	pop r16
    20ae:	0f 91       	pop	r16
	pop r15
    20b0:	ff 90       	pop	r15
	pop r14
    20b2:	ef 90       	pop	r14
	pop r13
    20b4:	df 90       	pop	r13
	pop r12
    20b6:	cf 90       	pop	r12
	pop r11
    20b8:	bf 90       	pop	r11
	pop r10
    20ba:	af 90       	pop	r10
	pop r9
    20bc:	9f 90       	pop	r9
	pop r8
    20be:	8f 90       	pop	r8
	pop r7
    20c0:	7f 90       	pop	r7
	pop r6
    20c2:	6f 90       	pop	r6
	pop r5
    20c4:	5f 90       	pop	r5
	pop r4
    20c6:	4f 90       	pop	r4
	pop r3
    20c8:	3f 90       	pop	r3
	pop r2
    20ca:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    20cc:	08 95       	ret

000020ce <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    20ce:	e0 91 05 09 	lds	r30, 0x0905
	lds ZH,mix_pos+1
    20d2:	f0 91 06 09 	lds	r31, 0x0906
			
	ld r16,Z+		;load next sample
    20d6:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    20d8:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    20da:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    20de:	09 e0       	ldi	r16, 0x09	; 9
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    20e0:	e5 30       	cpi	r30, 0x05	; 5
	cpc ZH,r16
    20e2:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    20e4:	09 ef       	ldi	r16, 0xF9	; 249
	ldi r17,hi8(mix_buf)
    20e6:	16 e0       	ldi	r17, 0x06	; 6
	brlo .+2
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    20ea:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    20ec:	e0 93 05 09 	sts	0x0905, r30
	sts mix_pos+1,ZH		
    20f0:	f0 93 06 09 	sts	0x0906, r31

	ret ;20+4=24
    20f4:	08 95       	ret

000020f6 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    20f6:	0f 93       	push	r16
	push r17
    20f8:	1f 93       	push	r17
	push r18
    20fa:	2f 93       	push	r18
	push ZL
    20fc:	ef 93       	push	r30

	lds ZL,mix_pos
    20fe:	e0 91 05 09 	lds	r30, 0x0905
	lds ZH,mix_pos+1
    2102:	f0 91 06 09 	lds	r31, 0x0906
			
	ld r16,Z+
    2106:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    2108:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    210c:	09 e0       	ldi	r16, 0x09	; 9
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    210e:	e5 30       	cpi	r30, 0x05	; 5
	cpc ZH,r16
    2110:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    2112:	09 ef       	ldi	r16, 0xF9	; 249
	ldi r17,hi8(mix_buf)
    2114:	16 e0       	ldi	r17, 0x06	; 6

	brlo .+2
    2116:	08 f0       	brcs	.+2      	; 0x211a <update_sound+0x24>
	movw ZL,r16
    2118:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    211a:	e0 93 05 09 	sts	0x0905, r30
	sts mix_pos+1,ZH	
    211e:	f0 93 06 09 	sts	0x0906, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    2122:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    2124:	ea 95       	dec	r30
	brne .-4
    2126:	f1 f7       	brne	.-4      	; 0x2124 <update_sound+0x2e>
#endif

	pop ZL
    2128:	ef 91       	pop	r30
	pop r18
    212a:	2f 91       	pop	r18
	pop r17
    212c:	1f 91       	pop	r17
	pop r16
    212e:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    2130:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    2132:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    2134:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    2136:	01 c0       	rjmp	.+2      	; 0x213a <update_sound+0x44>
	ret
    2138:	08 95       	ret

	ldi ZH,20
    213a:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    213c:	fa 95       	dec	r31
	brne .-4
    213e:	f1 f7       	brne	.-4      	; 0x213c <update_sound+0x46>
	rjmp .
    2140:	00 c0       	rjmp	.+0      	; 0x2142 <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    2142:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    2144:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    2146:	e1 ff       	sbrs	r30, 1
	rjmp .
    2148:	00 c0       	rjmp	.+0      	; 0x214a <update_sound+0x54>

	ret 
    214a:	08 95       	ret

0000214c <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_TILES_H*VRAM_TILES_V)
    214c:	ea ee       	ldi	r30, 0xEA	; 234
	ldi r31,hi8(VRAM_TILES_H*VRAM_TILES_V)
    214e:	f2 e0       	ldi	r31, 0x02	; 2

	ldi XL,lo8(vram)
    2150:	ac e0       	ldi	r26, 0x0C	; 12
	ldi XH,hi8(vram)
    2152:	b1 e0       	ldi	r27, 0x01	; 1


	lds r22,font_table_lo
    2154:	60 91 e0 06 	lds	r22, 0x06E0
	lds r23,font_table_hi
    2158:	70 91 e1 06 	lds	r23, 0x06E1

0000215c <fill_vram_loop>:

fill_vram_loop:

	st X+,r22
    215c:	6d 93       	st	X+, r22
	st X+,r23	
    215e:	7d 93       	st	X+, r23
	sbiw r30,1
    2160:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    2162:	e1 f7       	brne	.-8      	; 0x215c <fill_vram_loop>

	clr r1
    2164:	11 24       	eor	r1, r1

	ret
    2166:	08 95       	ret

00002168 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	clr r25
    2168:	99 27       	eor	r25, r25
	clr r21
    216a:	55 27       	eor	r21, r21

	ldi r18,VRAM_TILES_H
    216c:	28 e2       	ldi	r18, 0x28	; 40
	lsl r18	
    216e:	22 0f       	add	r18, r18

	mul r22,r18		;calculate Y line addr in vram
    2170:	62 9f       	mul	r22, r18
	lsl r24
    2172:	88 0f       	add	r24, r24
	add r0,r24		;add X offset
    2174:	08 0e       	add	r0, r24
	adc r1,r25
    2176:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    2178:	ac e0       	ldi	r26, 0x0C	; 12
	ldi XH,hi8(vram)
    217a:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    217c:	a0 0d       	add	r26, r0
	adc XH,r1
    217e:	b1 1d       	adc	r27, r1

	lds r22,font_table_lo
    2180:	60 91 e0 06 	lds	r22, 0x06E0
	lds r23,font_table_hi
    2184:	70 91 e1 06 	lds	r23, 0x06E1

	ldi r18,(TILE_WIDTH*TILE_HEIGHT)
    2188:	28 e4       	ldi	r18, 0x48	; 72
	mul r20,r18
    218a:	42 9f       	mul	r20, r18
	add r22,r0
    218c:	60 0d       	add	r22, r0
	adc r23,r1
    218e:	71 1d       	adc	r23, r1

	st X+,r22
    2190:	6d 93       	st	X+, r22
	st X,r23
    2192:	7c 93       	st	X, r23

	clr r1
    2194:	11 24       	eor	r1, r1

	ret
    2196:	08 95       	ret

00002198 <SetFontTable>:
; C-callable
; r25:r24=pointer to font tiles data
;************************************
.section .text.SetFontTable
SetFontTable:
	sts font_table_lo,r24
    2198:	80 93 e0 06 	sts	0x06E0, r24
	sts font_table_hi,r25
    219c:	90 93 e1 06 	sts	0x06E1, r25

	ret
    21a0:	08 95       	ret

000021a2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    21a2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    21a4:	fe cf       	rjmp	.-4      	; 0x21a2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    21a6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    21a8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    21aa:	60 bd       	out	0x20, r22	; 32
   cli
    21ac:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    21ae:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    21b0:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    21b2:	78 94       	sei
   ret
    21b4:	08 95       	ret

000021b6 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    21b6:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    21b8:	fe cf       	rjmp	.-4      	; 0x21b6 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    21ba:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    21bc:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    21be:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    21c0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    21c2:	80 b5       	in	r24, 0x20	; 32
   sei
    21c4:	78 94       	sei
   ret
    21c6:	08 95       	ret

000021c8 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    21c8:	98 e0       	ldi	r25, 0x08	; 8
    21ca:	88 e1       	ldi	r24, 0x18	; 24
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	a8 95       	wdr
    21d2:	80 93 60 00 	sts	0x0060, r24
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	90 93 60 00 	sts	0x0060, r25
	while(1);
    21dc:	ff cf       	rjmp	.-2      	; 0x21dc <SoftReset+0x14>

000021de <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    21de:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    21e0:	c8 95       	lpm
    21e2:	c8 95       	lpm
		Wait200ns();
    21e4:	c8 95       	lpm
    21e6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    21e8:	12 98       	cbi	0x02, 2	; 2
    21ea:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    21f4:	36 95       	lsr	r19
    21f6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    21f8:	96 95       	lsr	r25
    21fa:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    21fc:	c8 95       	lpm
    21fe:	c8 95       	lpm
			Wait200ns();
    2200:	c8 95       	lpm
    2202:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    2204:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    2206:	00 9b       	sbis	0x00, 0	; 0
    2208:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    220a:	01 9b       	sbis	0x00, 1	; 0
    220c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    220e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    2210:	c8 95       	lpm
    2212:	c8 95       	lpm
			Wait200ns();
    2214:	c8 95       	lpm
    2216:	c8 95       	lpm
    2218:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    221a:	61 f7       	brne	.-40     	; 0x21f4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    221c:	30 93 ee 06 	sts	0x06EE, r19
    2220:	20 93 ed 06 	sts	0x06ED, r18
		joypad2_status_lo=p2ButtonsLo;
    2224:	90 93 f2 06 	sts	0x06F2, r25
    2228:	80 93 f1 06 	sts	0x06F1, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    222c:	80 91 ed 06 	lds	r24, 0x06ED
    2230:	90 91 ee 06 	lds	r25, 0x06EE
    2234:	0f 97       	sbiw	r24, 0x0f	; 15
    2236:	31 f0       	breq	.+12     	; 0x2244 <ReadButtons+0x66>
    2238:	80 91 f1 06 	lds	r24, 0x06F1
    223c:	90 91 f2 06 	lds	r25, 0x06F2
    2240:	0f 97       	sbiw	r24, 0x0f	; 15
    2242:	11 f4       	brne	.+4      	; 0x2248 <ReadButtons+0x6a>
		SoftReset();
    2244:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SoftReset>
    2248:	08 95       	ret

0000224a <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    224a:	10 92 24 09 	sts	0x0924, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    224e:	00 99       	sbic	0x00, 0	; 0
    2250:	03 c0       	rjmp	.+6      	; 0x2258 <ReadControllers+0xe>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	80 93 24 09 	sts	0x0924, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    2258:	01 99       	sbic	0x00, 1	; 0
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <ReadControllers+0x1c>
    225c:	80 91 24 09 	lds	r24, 0x0924
    2260:	82 60       	ori	r24, 0x02	; 2
    2262:	80 93 24 09 	sts	0x0924, r24
			
	//read the standard buttons
	ReadButtons();
    2266:	0c 94 ef 10 	jmp	0x21de	; 0x21de <ReadButtons>

0000226a <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	c0 e0       	ldi	r28, 0x00	; 0
    2270:	d0 e0       	ldi	r29, 0x00	; 0
    2272:	fe 01       	movw	r30, r28
    2274:	e0 59       	subi	r30, 0x90	; 144
    2276:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    2278:	64 91       	lpm	r22, Z
    227a:	ce 01       	movw	r24, r28
    227c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <WriteEeprom>
    2280:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    2282:	c0 32       	cpi	r28, 0x20	; 32
    2284:	d1 05       	cpc	r29, r1
    2286:	a9 f7       	brne	.-22     	; 0x2272 <FormatEeprom+0x8>
    2288:	c0 e2       	ldi	r28, 0x20	; 32
    228a:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    228c:	6f ef       	ldi	r22, 0xFF	; 255
    228e:	ce 01       	movw	r24, r28
    2290:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    2294:	6f ef       	ldi	r22, 0xFF	; 255
    2296:	ce 01       	movw	r24, r28
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    229e:	a0 96       	adiw	r28, 0x20	; 32
    22a0:	c1 15       	cp	r28, r1
    22a2:	88 e0       	ldi	r24, 0x08	; 8
    22a4:	d8 07       	cpc	r29, r24
    22a6:	91 f7       	brne	.-28     	; 0x228c <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    22ae:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 db 10 	call	0x21b6	; 0x21b6 <ReadEeprom>
    22b8:	c8 2f       	mov	r28, r24
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 db 10 	call	0x21b6	; 0x21b6 <ReadEeprom>
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	32 2f       	mov	r19, r18
    22c8:	22 27       	eor	r18, r18
    22ca:	2c 0f       	add	r18, r28
    22cc:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	2a 35       	cpi	r18, 0x5A	; 90
    22d2:	35 45       	sbci	r19, 0x55	; 85
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <isEepromFormatted+0x2a>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
}
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    22dc:	fc 01       	movw	r30, r24
    22de:	46 87       	std	Z+14, r20	; 0x0e
    22e0:	08 95       	ret

000022e2 <PatchCommand01>:
 * Command 01: Set noise channel params 
 * Param:
 */
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    22e2:	ea e0       	ldi	r30, 0x0A	; 10
    22e4:	f9 e0       	ldi	r31, 0x09	; 9
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	95 8b       	std	Z+21, r25	; 0x15
    22ec:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    22ee:	43 8b       	std	Z+19, r20	; 0x13
    22f0:	08 95       	ret

000022f2 <PatchCommand02>:
}
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    22f2:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    22f4:	64 2f       	mov	r22, r20
    22f6:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <SetMixerWave>

000022fa <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    22fa:	fc 01       	movw	r30, r24
    22fc:	86 2f       	mov	r24, r22
	track->note+=param;
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	64 2f       	mov	r22, r20
    2302:	69 0f       	add	r22, r25
    2304:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    2306:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <SetMixerNote>

0000230a <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    230a:	fc 01       	movw	r30, r24
    230c:	86 2f       	mov	r24, r22
	track->note-=param;
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	69 2f       	mov	r22, r25
    2312:	64 1b       	sub	r22, r20
    2314:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    2316:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <SetMixerNote>

0000231a <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    231a:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    231c:	90 81       	ld	r25, Z
    231e:	9f 75       	andi	r25, 0x5F	; 95
    2320:	90 83       	st	Z, r25
    2322:	08 95       	ret

00002324 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    2324:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    2326:	90 81       	ld	r25, Z
    2328:	90 64       	ori	r25, 0x40	; 64
    232a:	90 83       	st	Z, r25
    232c:	08 95       	ret

0000232e <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    232e:	fc 01       	movw	r30, r24
    2330:	45 87       	std	Z+13, r20	; 0x0d
    2332:	08 95       	ret

00002334 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    2334:	0f 93       	push	r16
    2336:	1f 93       	push	r17
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	1f 92       	push	r1
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	8c 01       	movw	r16, r24
    2344:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    2346:	64 2f       	mov	r22, r20
    2348:	49 83       	std	Y+1, r20	; 0x01
    234a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SetMixerNote>
	track->note=param;
    234e:	49 81       	ldd	r20, Y+1	; 0x01
    2350:	f8 01       	movw	r30, r16
    2352:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    2354:	80 81       	ld	r24, Z
    2356:	87 7f       	andi	r24, 0xF7	; 247
    2358:	80 83       	st	Z, r24
}
    235a:	0f 90       	pop	r0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    2366:	fc 01       	movw	r30, r24
    2368:	41 87       	std	Z+9, r20	; 0x09
    236a:	08 95       	ret

0000236c <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    236c:	fc 01       	movw	r30, r24
    236e:	42 87       	std	Z+10, r20	; 0x0a
    2370:	08 95       	ret

00002372 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	ec 01       	movw	r28, r24
    237a:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    237c:	29 81       	ldd	r18, Y+1	; 0x01
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	f9 01       	movw	r30, r18
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	e8 5f       	subi	r30, 0xF8	; 248
    2388:	f4 4d       	sbci	r31, 0xD4	; 212
    238a:	65 91       	lpm	r22, Z+
    238c:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    238e:	f9 01       	movw	r30, r18
    2390:	e4 0f       	add	r30, r20
    2392:	f1 1d       	adc	r31, r1
    2394:	47 fd       	sbrc	r20, 7
    2396:	fa 95       	dec	r31
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	e8 5f       	subi	r30, 0xF8	; 248
    239e:	f4 4d       	sbci	r31, 0xD4	; 212
    23a0:	85 91       	lpm	r24, Z+
    23a2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    23a4:	86 1b       	sub	r24, r22
    23a6:	97 0b       	sbc	r25, r23
    23a8:	60 91 2e 09 	lds	r22, 0x092E
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__divmodhi4>
	if(delta==0)delta++;
    23b2:	61 15       	cp	r22, r1
    23b4:	71 05       	cpc	r23, r1
    23b6:	11 f4       	brne	.+4      	; 0x23bc <PatchCommand11+0x4a>
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    23bc:	86 e0       	ldi	r24, 0x06	; 6
    23be:	18 9f       	mul	r17, r24
    23c0:	f0 01       	movw	r30, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	e6 5f       	subi	r30, 0xF6	; 246
    23c6:	f6 4f       	sbci	r31, 0xF6	; 246
    23c8:	81 81       	ldd	r24, Z+1	; 0x01
    23ca:	92 81       	ldd	r25, Z+2	; 0x02
    23cc:	86 0f       	add	r24, r22
    23ce:	97 1f       	adc	r25, r23
    23d0:	92 83       	std	Z+2, r25	; 0x02
    23d2:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    23d4:	7d 83       	std	Y+5, r23	; 0x05
    23d6:	6c 83       	std	Y+4, r22	; 0x04
	track->flags|=TRACK_FLAGS_SLIDING;
    23d8:	88 81       	ld	r24, Y
    23da:	88 60       	ori	r24, 0x08	; 8
    23dc:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	48 0f       	add	r20, r24
    23e2:	4e 83       	std	Y+6, r20	; 0x06
}
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	08 95       	ret

000023ec <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    23ec:	40 93 2e 09 	sts	0x092E, r20
    23f0:	08 95       	ret

000023f2 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(struct TrackStruct* track,unsigned char trackNo, char param){
	track->loopCount=(u8)param;
    23f2:	fc 01       	movw	r30, r24
    23f4:	43 83       	std	Z+3, r20	; 0x03
    23f6:	08 95       	ret

000023f8 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(struct TrackStruct* track,unsigned char trackNo, char param){
    23f8:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    23fa:	13 96       	adiw	r26, 0x03	; 3
    23fc:	8c 91       	ld	r24, X
    23fe:	13 97       	sbiw	r26, 0x03	; 3
    2400:	88 23       	and	r24, r24
    2402:	19 f1       	breq	.+70     	; 0x244a <PatchCommand14+0x52>
    2404:	55 96       	adiw	r26, 0x15	; 21
    2406:	2d 91       	ld	r18, X+
    2408:	3c 91       	ld	r19, X
    240a:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    240c:	44 23       	and	r20, r20
    240e:	79 f0       	breq	.+30     	; 0x242e <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    2410:	55 27       	eor	r21, r21
    2412:	47 fd       	sbrc	r20, 7
    2414:	50 95       	com	r21
    2416:	4f 5f       	subi	r20, 0xFF	; 255
    2418:	5f 4f       	sbci	r21, 0xFF	; 255
    241a:	ba 01       	movw	r22, r20
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	46 0f       	add	r20, r22
    2422:	57 1f       	adc	r21, r23
    2424:	24 1b       	sub	r18, r20
    2426:	35 0b       	sbc	r19, r21
    2428:	09 c0       	rjmp	.+18     	; 0x243c <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    242a:	ef 3f       	cpi	r30, 0xFF	; 255
    242c:	39 f0       	breq	.+14     	; 0x243c <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    242e:	23 50       	subi	r18, 0x03	; 3
    2430:	31 09       	sbc	r19, r1
    2432:	f9 01       	movw	r30, r18
    2434:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    2436:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    2438:	ed 30       	cpi	r30, 0x0D	; 13
    243a:	b9 f7       	brne	.-18     	; 0x242a <PatchCommand14+0x32>
    243c:	56 96       	adiw	r26, 0x16	; 22
    243e:	3c 93       	st	X, r19
    2440:	2e 93       	st	-X, r18
    2442:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    2444:	81 50       	subi	r24, 0x01	; 1
    2446:	13 96       	adiw	r26, 0x03	; 3
    2448:	8c 93       	st	X, r24
    244a:	08 95       	ret

0000244c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    244c:	5f 92       	push	r5
    244e:	6f 92       	push	r6
    2450:	7f 92       	push	r7
    2452:	8f 92       	push	r8
    2454:	9f 92       	push	r9
    2456:	af 92       	push	r10
    2458:	bf 92       	push	r11
    245a:	cf 92       	push	r12
    245c:	df 92       	push	r13
    245e:	ef 92       	push	r14
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	c7 e2       	ldi	r28, 0x27	; 39
    246c:	d9 e0       	ldi	r29, 0x09	; 9
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	e8 2e       	mov	r14, r24
    2472:	89 e0       	ldi	r24, 0x09	; 9
    2474:	f8 2e       	mov	r15, r24
    2476:	d7 01       	movw	r26, r14
    2478:	9e 01       	movw	r18, r28
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	ca 01       	movw	r24, r20
    2480:	89 5d       	subi	r24, 0xD9	; 217
    2482:	96 4f       	sbci	r25, 0xF6	; 246
    2484:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    2486:	fc 01       	movw	r30, r24
    2488:	86 85       	ldd	r24, Z+14	; 0x0e
    248a:	88 23       	and	r24, r24
    248c:	91 f0       	breq	.+36     	; 0x24b2 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    248e:	65 85       	ldd	r22, Z+13	; 0x0d
    2490:	99 27       	eor	r25, r25
    2492:	87 fd       	sbrc	r24, 7
    2494:	90 95       	com	r25
    2496:	86 0f       	add	r24, r22
    2498:	91 1d       	adc	r25, r1
    249a:	8f 3f       	cpi	r24, 0xFF	; 255
    249c:	91 05       	cpc	r25, r1
    249e:	19 f0       	breq	.+6      	; 0x24a6 <ProcessMusic+0x5a>
    24a0:	14 f0       	brlt	.+4      	; 0x24a6 <ProcessMusic+0x5a>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	97 ff       	sbrs	r25, 7
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <ProcessMusic+0x62>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    24ae:	f6 01       	movw	r30, r12
    24b0:	85 87       	std	Z+13, r24	; 0x0d
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    24b2:	f9 01       	movw	r30, r18
    24b4:	10 81       	ld	r17, Z
    24b6:	13 ff       	sbrs	r17, 3
    24b8:	29 c0       	rjmp	.+82     	; 0x250c <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    24ba:	64 81       	ldd	r22, Z+4	; 0x04
    24bc:	75 81       	ldd	r23, Z+5	; 0x05
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	8d 91       	ld	r24, X+
    24c2:	9c 91       	ld	r25, X
    24c4:	12 97       	sbiw	r26, 0x02	; 2
    24c6:	86 0f       	add	r24, r22
    24c8:	97 1f       	adc	r25, r23
    24ca:	12 96       	adiw	r26, 0x02	; 2
    24cc:	9c 93       	st	X, r25
    24ce:	8e 93       	st	-X, r24
    24d0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    24d2:	f6 01       	movw	r30, r12
    24d4:	06 81       	ldd	r16, Z+6	; 0x06
    24d6:	e0 2f       	mov	r30, r16
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e8 5f       	subi	r30, 0xF8	; 248
    24e0:	f4 4d       	sbci	r31, 0xD4	; 212
    24e2:	c5 90       	lpm	r12, Z+
    24e4:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    24e6:	16 16       	cp	r1, r22
    24e8:	17 06       	cpc	r1, r23
    24ea:	24 f4       	brge	.+8      	; 0x24f4 <ProcessMusic+0xa8>
    24ec:	8c 15       	cp	r24, r12
    24ee:	9d 05       	cpc	r25, r13
    24f0:	30 f4       	brcc	.+12     	; 0x24fe <ProcessMusic+0xb2>
    24f2:	0c c0       	rjmp	.+24     	; 0x250c <ProcessMusic+0xc0>
    24f4:	67 2b       	or	r22, r23
    24f6:	51 f0       	breq	.+20     	; 0x250c <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    24f8:	c8 16       	cp	r12, r24
    24fa:	d9 06       	cpc	r13, r25
    24fc:	38 f0       	brcs	.+14     	; 0x250c <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    24fe:	12 96       	adiw	r26, 0x02	; 2
    2500:	dc 92       	st	X, r13
    2502:	ce 92       	st	-X, r12
    2504:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    2506:	17 7f       	andi	r17, 0xF7	; 247
    2508:	f9 01       	movw	r30, r18
    250a:	10 83       	st	Z, r17
    250c:	49 5e       	subi	r20, 0xE9	; 233
    250e:	5f 4f       	sbci	r21, 0xFF	; 255
    2510:	29 5e       	subi	r18, 0xE9	; 233
    2512:	3f 4f       	sbci	r19, 0xFF	; 255
    2514:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    2516:	4c 35       	cpi	r20, 0x5C	; 92
    2518:	51 05       	cpc	r21, r1
    251a:	09 f0       	breq	.+2      	; 0x251e <ProcessMusic+0xd2>
    251c:	b0 cf       	rjmp	.-160    	; 0x247e <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    251e:	80 91 f8 06 	lds	r24, 0x06F8
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <ProcessMusic+0xdc>
    2526:	cb c0       	rjmp	.+406    	; 0x26be <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    2528:	17 e1       	ldi	r17, 0x17	; 23
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    252a:	80 91 83 09 	lds	r24, 0x0983
    252e:	90 91 84 09 	lds	r25, 0x0984
    2532:	20 91 89 09 	lds	r18, 0x0989
    2536:	30 91 8a 09 	lds	r19, 0x098A
    253a:	82 17       	cp	r24, r18
    253c:	93 07       	cpc	r25, r19
    253e:	09 f0       	breq	.+2      	; 0x2542 <ProcessMusic+0xf6>
    2540:	b9 c0       	rjmp	.+370    	; 0x26b4 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    2542:	20 91 8c 09 	lds	r18, 0x098C
    2546:	30 91 8d 09 	lds	r19, 0x098D
    254a:	b9 01       	movw	r22, r18
    254c:	6f 5f       	subi	r22, 0xFF	; 255
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	70 93 8d 09 	sts	0x098D, r23
    2554:	60 93 8c 09 	sts	0x098C, r22
    2558:	f9 01       	movw	r30, r18
    255a:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    255c:	4f 3f       	cpi	r20, 0xFF	; 255
    255e:	79 f5       	brne	.+94     	; 0x25be <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    2560:	a9 01       	movw	r20, r18
    2562:	4e 5f       	subi	r20, 0xFE	; 254
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	50 93 8d 09 	sts	0x098D, r21
    256a:	40 93 8c 09 	sts	0x098C, r20
    256e:	fb 01       	movw	r30, r22
    2570:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    2572:	6f 32       	cpi	r22, 0x2F	; 47
    2574:	19 f4       	brne	.+6      	; 0x257c <ProcessMusic+0x130>
						playSong=false;
    2576:	10 92 f8 06 	sts	0x06F8, r1
						break;	
    257a:	9c c0       	rjmp	.+312    	; 0x26b4 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    257c:	66 30       	cpi	r22, 0x06	; 6
    257e:	09 f0       	breq	.+2      	; 0x2582 <ProcessMusic+0x136>
    2580:	8c c0       	rjmp	.+280    	; 0x269a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    2582:	fa 01       	movw	r30, r20
    2584:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    2586:	c9 01       	movw	r24, r18
    2588:	04 96       	adiw	r24, 0x04	; 4
    258a:	90 93 8d 09 	sts	0x098D, r25
    258e:	80 93 8c 09 	sts	0x098C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    2592:	f9 01       	movw	r30, r18
    2594:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    2596:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    2598:	e3 35       	cpi	r30, 0x53	; 83
    259a:	29 f4       	brne	.+10     	; 0x25a6 <ProcessMusic+0x15a>
							loopStart=songPos;
    259c:	90 93 8f 09 	sts	0x098F, r25
    25a0:	80 93 8e 09 	sts	0x098E, r24
    25a4:	7a c0       	rjmp	.+244    	; 0x269a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    25a6:	e5 34       	cpi	r30, 0x45	; 69
    25a8:	09 f0       	breq	.+2      	; 0x25ac <ProcessMusic+0x160>
    25aa:	77 c0       	rjmp	.+238    	; 0x269a <ProcessMusic+0x24e>
							songPos=loopStart;
    25ac:	80 91 8e 09 	lds	r24, 0x098E
    25b0:	90 91 8f 09 	lds	r25, 0x098F
    25b4:	90 93 8d 09 	sts	0x098D, r25
    25b8:	80 93 8c 09 	sts	0x098C, r24
    25bc:	6e c0       	rjmp	.+220    	; 0x269a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    25be:	47 fd       	sbrc	r20, 7
    25c0:	40 93 87 09 	sts	0x0987, r20
					channel=lastStatus&0x0f;
    25c4:	90 91 87 09 	lds	r25, 0x0987
    25c8:	89 2f       	mov	r24, r25
    25ca:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    25cc:	47 ff       	sbrs	r20, 7
    25ce:	08 c0       	rjmp	.+16     	; 0x25e0 <ProcessMusic+0x194>
    25d0:	2e 5f       	subi	r18, 0xFE	; 254
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	30 93 8d 09 	sts	0x098D, r19
    25d8:	20 93 8c 09 	sts	0x098C, r18
    25dc:	fb 01       	movw	r30, r22
    25de:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    25e0:	90 7f       	andi	r25, 0xF0	; 240
    25e2:	90 3b       	cpi	r25, 0xB0	; 176
    25e4:	e1 f0       	breq	.+56     	; 0x261e <ProcessMusic+0x1d2>
    25e6:	90 3c       	cpi	r25, 0xC0	; 192
    25e8:	09 f4       	brne	.+2      	; 0x25ec <ProcessMusic+0x1a0>
    25ea:	51 c0       	rjmp	.+162    	; 0x268e <ProcessMusic+0x242>
    25ec:	90 39       	cpi	r25, 0x90	; 144
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <ProcessMusic+0x1a6>
    25f0:	54 c0       	rjmp	.+168    	; 0x269a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    25f2:	e0 91 8c 09 	lds	r30, 0x098C
    25f6:	f0 91 8d 09 	lds	r31, 0x098D
    25fa:	9f 01       	movw	r18, r30
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	30 93 8d 09 	sts	0x098D, r19
    2604:	20 93 8c 09 	sts	0x098C, r18
    2608:	24 91       	lpm	r18, Z
    260a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    260c:	18 9f       	mul	r17, r24
    260e:	f0 01       	movw	r30, r0
    2610:	11 24       	eor	r1, r1
    2612:	e9 5d       	subi	r30, 0xD9	; 217
    2614:	f6 4f       	sbci	r31, 0xF6	; 246
    2616:	67 85       	ldd	r22, Z+15	; 0x0f
    2618:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TriggerNote>
    261c:	3e c0       	rjmp	.+124    	; 0x269a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    261e:	e0 91 8c 09 	lds	r30, 0x098C
    2622:	f0 91 8d 09 	lds	r31, 0x098D
    2626:	9f 01       	movw	r18, r30
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	30 93 8d 09 	sts	0x098D, r19
    2630:	20 93 8c 09 	sts	0x098C, r18
    2634:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    2636:	47 30       	cpi	r20, 0x07	; 7
    2638:	49 f4       	brne	.+18     	; 0x264c <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    263a:	18 9f       	mul	r17, r24
    263c:	d0 01       	movw	r26, r0
    263e:	11 24       	eor	r1, r1
    2640:	a9 5d       	subi	r26, 0xD9	; 217
    2642:	b6 4f       	sbci	r27, 0xF6	; 246
    2644:	ee 0f       	add	r30, r30
    2646:	1b 96       	adiw	r26, 0x0b	; 11
    2648:	ec 93       	st	X, r30
    264a:	27 c0       	rjmp	.+78     	; 0x269a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    264c:	4b 30       	cpi	r20, 0x0B	; 11
    264e:	49 f4       	brne	.+18     	; 0x2662 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    2650:	18 9f       	mul	r17, r24
    2652:	d0 01       	movw	r26, r0
    2654:	11 24       	eor	r1, r1
    2656:	a9 5d       	subi	r26, 0xD9	; 217
    2658:	b6 4f       	sbci	r27, 0xF6	; 246
    265a:	ee 0f       	add	r30, r30
    265c:	12 96       	adiw	r26, 0x02	; 2
    265e:	ec 93       	st	X, r30
    2660:	1c c0       	rjmp	.+56     	; 0x269a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    2662:	4c 35       	cpi	r20, 0x5C	; 92
    2664:	49 f4       	brne	.+18     	; 0x2678 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    2666:	18 9f       	mul	r17, r24
    2668:	d0 01       	movw	r26, r0
    266a:	11 24       	eor	r1, r1
    266c:	a9 5d       	subi	r26, 0xD9	; 217
    266e:	b6 4f       	sbci	r27, 0xF6	; 246
    2670:	ee 0f       	add	r30, r30
    2672:	19 96       	adiw	r26, 0x09	; 9
    2674:	ec 93       	st	X, r30
    2676:	11 c0       	rjmp	.+34     	; 0x269a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    2678:	44 36       	cpi	r20, 0x64	; 100
    267a:	79 f4       	brne	.+30     	; 0x269a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    267c:	18 9f       	mul	r17, r24
    267e:	d0 01       	movw	r26, r0
    2680:	11 24       	eor	r1, r1
    2682:	a9 5d       	subi	r26, 0xD9	; 217
    2684:	b6 4f       	sbci	r27, 0xF6	; 246
    2686:	ee 0f       	add	r30, r30
    2688:	1a 96       	adiw	r26, 0x0a	; 10
    268a:	ec 93       	st	X, r30
    268c:	06 c0       	rjmp	.+12     	; 0x269a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    268e:	18 9f       	mul	r17, r24
    2690:	f0 01       	movw	r30, r0
    2692:	11 24       	eor	r1, r1
    2694:	e9 5d       	subi	r30, 0xD9	; 217
    2696:	f6 4f       	sbci	r31, 0xF6	; 246
    2698:	47 87       	std	Z+15, r20	; 0x0f


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    269a:	8c e8       	ldi	r24, 0x8C	; 140
    269c:	99 e0       	ldi	r25, 0x09	; 9
    269e:	0e 94 4d 14 	call	0x289a	; 0x289a <ReadVarLen>
    26a2:	90 93 8a 09 	sts	0x098A, r25
    26a6:	80 93 89 09 	sts	0x0989, r24
				currDeltaTime=0;
    26aa:	10 92 84 09 	sts	0x0984, r1
    26ae:	10 92 83 09 	sts	0x0983, r1
    26b2:	3b cf       	rjmp	.-394    	; 0x252a <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	90 93 84 09 	sts	0x0984, r25
    26ba:	80 93 83 09 	sts	0x0983, r24
    26be:	9f e2       	ldi	r25, 0x2F	; 47
    26c0:	a9 2e       	mov	r10, r25
    26c2:	99 e0       	ldi	r25, 0x09	; 9
    26c4:	b9 2e       	mov	r11, r25
    26c6:	0a e3       	ldi	r16, 0x3A	; 58
    26c8:	19 e0       	ldi	r17, 0x09	; 9
    26ca:	29 e3       	ldi	r18, 0x39	; 57
    26cc:	c2 2e       	mov	r12, r18
    26ce:	29 e0       	ldi	r18, 0x09	; 9
    26d0:	d2 2e       	mov	r13, r18
    26d2:	3b e3       	ldi	r19, 0x3B	; 59
    26d4:	83 2e       	mov	r8, r19
    26d6:	39 e0       	ldi	r19, 0x09	; 9
    26d8:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    26da:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    26dc:	66 24       	eor	r6, r6
    26de:	6a 94       	dec	r6
    26e0:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    26e2:	88 81       	ld	r24, Y
    26e4:	86 fd       	sbrc	r24, 6
    26e6:	43 c0       	rjmp	.+134    	; 0x276e <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    26e8:	8d 89       	ldd	r24, Y+21	; 0x15
    26ea:	9e 89       	ldd	r25, Y+22	; 0x16
    26ec:	89 2b       	or	r24, r25
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <ProcessMusic+0x2a6>
    26f0:	3a c0       	rjmp	.+116    	; 0x2766 <ProcessMusic+0x31a>
    26f2:	d8 01       	movw	r26, r16
    26f4:	9c 91       	ld	r25, X
    26f6:	f6 01       	movw	r30, r12
    26f8:	80 81       	ld	r24, Z
    26fa:	98 17       	cp	r25, r24
    26fc:	08 f4       	brcc	.+2      	; 0x2700 <ProcessMusic+0x2b4>
    26fe:	33 c0       	rjmp	.+102    	; 0x2766 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    2700:	d8 01       	movw	r26, r16
    2702:	9c 91       	ld	r25, X
    2704:	f6 01       	movw	r30, r12
    2706:	80 81       	ld	r24, Z
    2708:	98 13       	cpse	r25, r24
    270a:	2d c0       	rjmp	.+90     	; 0x2766 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    270c:	ed 89       	ldd	r30, Y+21	; 0x15
    270e:	fe 89       	ldd	r31, Y+22	; 0x16
    2710:	af 01       	movw	r20, r30
    2712:	4f 5f       	subi	r20, 0xFF	; 255
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	5e 8b       	std	Y+22, r21	; 0x16
    2718:	4d 8b       	std	Y+21, r20	; 0x15
    271a:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    271c:	8f 3f       	cpi	r24, 0xFF	; 255
    271e:	31 f4       	brne	.+12     	; 0x272c <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    2720:	88 81       	ld	r24, Y
    2722:	8f 77       	andi	r24, 0x7F	; 127
    2724:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    2726:	1e 8a       	std	Y+22, r1	; 0x16
    2728:	1d 8a       	std	Y+21, r1	; 0x15
						break;
    272a:	1d c0       	rjmp	.+58     	; 0x2766 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    272c:	32 96       	adiw	r30, 0x02	; 2
    272e:	fe 8b       	std	Y+22, r31	; 0x16
    2730:	ed 8b       	std	Y+21, r30	; 0x15
    2732:	fa 01       	movw	r30, r20
    2734:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    2736:	e8 2f       	mov	r30, r24
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	ee 0f       	add	r30, r30
    273c:	ff 1f       	adc	r31, r31
    273e:	e2 54       	subi	r30, 0x42	; 66
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	25 91       	lpm	r18, Z+
    2744:	34 91       	lpm	r19, Z
    2746:	65 2d       	mov	r22, r5
    2748:	ce 01       	movw	r24, r28
    274a:	f9 01       	movw	r30, r18
    274c:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    274e:	ed 89       	ldd	r30, Y+21	; 0x15
    2750:	fe 89       	ldd	r31, Y+22	; 0x16
    2752:	cf 01       	movw	r24, r30
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	9e 8b       	std	Y+22, r25	; 0x16
    2758:	8d 8b       	std	Y+21, r24	; 0x15
    275a:	e4 91       	lpm	r30, Z
    275c:	d6 01       	movw	r26, r12
    275e:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    2760:	f8 01       	movw	r30, r16
    2762:	10 82       	st	Z, r1
    2764:	cd cf       	rjmp	.-102    	; 0x2700 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    2766:	d8 01       	movw	r26, r16
    2768:	8c 91       	ld	r24, X
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    276e:	98 81       	ld	r25, Y
    2770:	95 ff       	sbrs	r25, 5
    2772:	6c c0       	rjmp	.+216    	; 0x284c <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    2774:	f4 01       	movw	r30, r8
    2776:	80 81       	ld	r24, Z
    2778:	8f 3f       	cpi	r24, 0xFF	; 255
    277a:	11 f0       	breq	.+4      	; 0x2780 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    2780:	97 fd       	sbrc	r25, 7
    2782:	04 c0       	rjmp	.+8      	; 0x278c <ProcessMusic+0x340>
    2784:	f8 01       	movw	r30, r16
    2786:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    2788:	90 81       	ld	r25, Z
    278a:	01 c0       	rjmp	.+2      	; 0x278e <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    278c:	9f ef       	ldi	r25, 0xFF	; 255
    278e:	f8 01       	movw	r30, r16
    2790:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    2792:	80 81       	ld	r24, Z
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <ProcessMusic+0x34e>
    2798:	4e c0       	rjmp	.+156    	; 0x2836 <ProcessMusic+0x3ea>
    279a:	31 96       	adiw	r30, 0x01	; 1
    279c:	50 81       	ld	r21, Z
    279e:	55 23       	and	r21, r21
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <ProcessMusic+0x358>
    27a2:	49 c0       	rjmp	.+146    	; 0x2836 <ProcessMusic+0x3ea>
    27a4:	99 23       	and	r25, r25
    27a6:	09 f4       	brne	.+2      	; 0x27aa <ProcessMusic+0x35e>
    27a8:	46 c0       	rjmp	.+140    	; 0x2836 <ProcessMusic+0x3ea>
    27aa:	40 91 88 09 	lds	r20, 0x0988
    27ae:	44 23       	and	r20, r20
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <ProcessMusic+0x368>
    27b2:	41 c0       	rjmp	.+130    	; 0x2836 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    27b4:	89 9f       	mul	r24, r25
    27b6:	c0 01       	movw	r24, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	93 95       	inc	r25
				uVol>>=8;
    27bc:	89 2f       	mov	r24, r25
    27be:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    27c0:	58 9f       	mul	r21, r24
    27c2:	90 01       	movw	r18, r0
    27c4:	59 9f       	mul	r21, r25
    27c6:	30 0d       	add	r19, r0
    27c8:	11 24       	eor	r1, r1
    27ca:	c9 01       	movw	r24, r18
    27cc:	93 95       	inc	r25
				uVol>>=8;
    27ce:	89 2f       	mov	r24, r25
    27d0:	99 27       	eor	r25, r25
    27d2:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    27d4:	50 81       	ld	r21, Z
    27d6:	58 9f       	mul	r21, r24
    27d8:	90 01       	movw	r18, r0
    27da:	59 9f       	mul	r21, r25
    27dc:	30 0d       	add	r19, r0
    27de:	11 24       	eor	r1, r1
    27e0:	33 95       	inc	r19
					uVol>>=8;
    27e2:	23 2f       	mov	r18, r19
    27e4:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    27e6:	42 9f       	mul	r20, r18
    27e8:	c0 01       	movw	r24, r0
    27ea:	43 9f       	mul	r20, r19
    27ec:	90 0d       	add	r25, r0
    27ee:	11 24       	eor	r1, r1
    27f0:	93 95       	inc	r25
				uVol>>=8;
    27f2:	89 2f       	mov	r24, r25
    27f4:	99 27       	eor	r25, r25
    27f6:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    27f8:	20 81       	ld	r18, Z
    27fa:	22 23       	and	r18, r18
    27fc:	f1 f0       	breq	.+60     	; 0x283a <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    27fe:	d5 01       	movw	r26, r10
    2800:	ec 91       	ld	r30, X
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	e0 50       	subi	r30, 0x00	; 0
    2806:	f3 4d       	sbci	r31, 0xD3	; 211
    2808:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    280a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    280c:	2e 9f       	mul	r18, r30
    280e:	f0 01       	movw	r30, r0
    2810:	11 24       	eor	r1, r1
    2812:	f3 95       	inc	r31
					tVol>>=8;
    2814:	ef 2f       	mov	r30, r31
    2816:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    2818:	a3 01       	movw	r20, r6
    281a:	4e 1b       	sub	r20, r30
    281c:	5f 0b       	sbc	r21, r31
    281e:	48 9f       	mul	r20, r24
    2820:	90 01       	movw	r18, r0
    2822:	49 9f       	mul	r20, r25
    2824:	30 0d       	add	r19, r0
    2826:	58 9f       	mul	r21, r24
    2828:	30 0d       	add	r19, r0
    282a:	11 24       	eor	r1, r1
    282c:	c9 01       	movw	r24, r18
    282e:	93 95       	inc	r25
					uVol>>=8;
    2830:	89 2f       	mov	r24, r25
    2832:	99 27       	eor	r25, r25
    2834:	02 c0       	rjmp	.+4      	; 0x283a <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    283a:	f5 01       	movw	r30, r10
    283c:	30 81       	ld	r19, Z
    283e:	f8 01       	movw	r30, r16
    2840:	39 97       	sbiw	r30, 0x09	; 9
    2842:	20 81       	ld	r18, Z
    2844:	23 0f       	add	r18, r19
    2846:	d5 01       	movw	r26, r10
    2848:	2c 93       	st	X, r18
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <ProcessMusic+0x404>

		}else{
			uVol=0;
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    2850:	f7 01       	movw	r30, r14
    2852:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    2854:	53 94       	inc	r5
    2856:	67 96       	adiw	r28, 0x17	; 23
    2858:	f6 e0       	ldi	r31, 0x06	; 6
    285a:	ef 0e       	add	r14, r31
    285c:	f1 1c       	adc	r15, r1
    285e:	87 e1       	ldi	r24, 0x17	; 23
    2860:	a8 0e       	add	r10, r24
    2862:	b1 1c       	adc	r11, r1
    2864:	09 5e       	subi	r16, 0xE9	; 233
    2866:	1f 4f       	sbci	r17, 0xFF	; 255
    2868:	97 e1       	ldi	r25, 0x17	; 23
    286a:	c9 0e       	add	r12, r25
    286c:	d1 1c       	adc	r13, r1
    286e:	a7 e1       	ldi	r26, 0x17	; 23
    2870:	8a 0e       	add	r8, r26
    2872:	91 1c       	adc	r9, r1
    2874:	b4 e0       	ldi	r27, 0x04	; 4
    2876:	5b 12       	cpse	r5, r27
    2878:	34 cf       	rjmp	.-408    	; 0x26e2 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	ff 90       	pop	r15
    2884:	ef 90       	pop	r14
    2886:	df 90       	pop	r13
    2888:	cf 90       	pop	r12
    288a:	bf 90       	pop	r11
    288c:	af 90       	pop	r10
    288e:	9f 90       	pop	r9
    2890:	8f 90       	pop	r8
    2892:	7f 90       	pop	r7
    2894:	6f 90       	pop	r6
    2896:	5f 90       	pop	r5
    2898:	08 95       	ret

0000289a <ReadVarLen>:



unsigned int ReadVarLen(const char **songPos)
{
    289a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    289c:	ed 91       	ld	r30, X+
    289e:	fc 91       	ld	r31, X
    28a0:	11 97       	sbiw	r26, 0x01	; 1
    28a2:	9f 01       	movw	r18, r30
    28a4:	2f 5f       	subi	r18, 0xFF	; 255
    28a6:	3f 4f       	sbci	r19, 0xFF	; 255
    28a8:	11 96       	adiw	r26, 0x01	; 1
    28aa:	3c 93       	st	X, r19
    28ac:	2e 93       	st	-X, r18
    28ae:	e4 91       	lpm	r30, Z
    28b0:	e7 fd       	sbrc	r30, 7
    28b2:	03 c0       	rjmp	.+6      	; 0x28ba <ReadVarLen+0x20>
    28b4:	8e 2f       	mov	r24, r30
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	08 95       	ret
    {
       value &= 0x7F;
    28ba:	ef 77       	andi	r30, 0x7F	; 127
    28bc:	8e 2f       	mov	r24, r30
    28be:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    28c0:	96 95       	lsr	r25
    28c2:	98 2f       	mov	r25, r24
    28c4:	88 27       	eor	r24, r24
    28c6:	97 95       	ror	r25
    28c8:	87 95       	ror	r24
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	f9 01       	movw	r30, r18
    28d0:	31 97       	sbiw	r30, 0x01	; 1
    28d2:	e4 91       	lpm	r30, Z
    28d4:	4e 2f       	mov	r20, r30
    28d6:	4f 77       	andi	r20, 0x7F	; 127
    28d8:	84 0f       	add	r24, r20
    28da:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    28dc:	e7 fd       	sbrc	r30, 7
    28de:	f0 cf       	rjmp	.-32     	; 0x28c0 <ReadVarLen+0x26>
    28e0:	2d 93       	st	X+, r18
    28e2:	3c 93       	st	X, r19
    }


    return value;
}
    28e4:	08 95       	ret

000028e6 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	18 2f       	mov	r17, r24
    28f2:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    28f4:	c8 2f       	mov	r28, r24
    28f6:	d0 e0       	ldi	r29, 0x00	; 0
    28f8:	87 e1       	ldi	r24, 0x17	; 23
    28fa:	18 9f       	mul	r17, r24
    28fc:	f0 01       	movw	r30, r0
    28fe:	11 24       	eor	r1, r1
    2900:	e9 5d       	subi	r30, 0xD9	; 217
    2902:	f6 4f       	sbci	r31, 0xF6	; 246
    2904:	90 81       	ld	r25, Z
    2906:	f9 2e       	mov	r15, r25
    2908:	ff 1c       	adc	r15, r15
    290a:	ff 24       	eor	r15, r15
    290c:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    290e:	13 8a       	std	Z+19, r1	; 0x13
	track->envelopeStep=0; 
    2910:	16 86       	std	Z+14, r1	; 0x0e
	track->envelopeVol=0xff; 
    2912:	8f ef       	ldi	r24, 0xFF	; 255
    2914:	85 87       	std	Z+13, r24	; 0x0d
	track->noteVol=volume;
    2916:	44 87       	std	Z+12, r20	; 0x0c
	track->patchPlayingTime=0;
    2918:	14 8a       	std	Z+20, r1	; 0x14
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    291a:	97 7b       	andi	r25, 0xB7	; 183
    291c:	90 62       	ori	r25, 0x20	; 32
    291e:	90 83       	st	Z, r25
	track->tremoloLevel=0;
    2920:	11 86       	std	Z+9, r1	; 0x09
	track->tremoloPos=0;
    2922:	10 86       	std	Z+8, r1	; 0x08
	track->note=note;
    2924:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    2926:	13 82       	std	Z+3, r1	; 0x03

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    2928:	82 83       	std	Z+2, r24	; 0x02

	#else

		#if MIXER_CHAN4_TYPE == 0
			//if it's a noise channel
			if(channel==3){
    292a:	13 30       	cpi	r17, 0x03	; 3
    292c:	69 f4       	brne	.+26     	; 0x2948 <TriggerCommon+0x62>
				if(!isFx) patch=note;
    292e:	f1 10       	cpse	r15, r1
    2930:	01 c0       	rjmp	.+2      	; 0x2934 <TriggerCommon+0x4e>
    2932:	02 2f       	mov	r16, r18
				mixer.channels.type.noise.barrel=0x0101;				
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	90 93 1f 09 	sts	0x091F, r25
    293c:	80 93 1e 09 	sts	0x091E, r24
				mixer.channels.type.noise.params=1; //default 
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 93 1d 09 	sts	0x091D, r24
    2946:	08 c0       	rjmp	.+16     	; 0x2958 <TriggerCommon+0x72>
			}else{
				SetMixerNote(channel,note);
    2948:	62 2f       	mov	r22, r18
    294a:	81 2f       	mov	r24, r17
    294c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <SetMixerNote>
				SetMixerWave(channel,0);
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	81 2f       	mov	r24, r17
    2954:	0e 94 34 15 	call	0x2a68	; 0x2a68 <SetMixerWave>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    2958:	87 e1       	ldi	r24, 0x17	; 23
    295a:	8c 9f       	mul	r24, r28
    295c:	f0 01       	movw	r30, r0
    295e:	8d 9f       	mul	r24, r29
    2960:	f0 0d       	add	r31, r0
    2962:	11 24       	eor	r1, r1
    2964:	e9 5d       	subi	r30, 0xD9	; 217
    2966:	f6 4f       	sbci	r31, 0xF6	; 246

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    2968:	ff 20       	and	r15, r15
    296a:	11 f0       	breq	.+4      	; 0x2970 <TriggerCommon+0x8a>
		track->fxPatchNo=patch;
    296c:	00 8b       	std	Z+16, r16	; 0x10
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <TriggerCommon+0x8c>
	}else{
		track->patchNo=patch;	
    2970:	07 87       	std	Z+15, r16	; 0x0f
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    2972:	e0 91 85 09 	lds	r30, 0x0985
    2976:	f0 91 86 09 	lds	r31, 0x0986
    297a:	89 e0       	ldi	r24, 0x09	; 9
    297c:	08 9f       	mul	r16, r24
    297e:	e0 0d       	add	r30, r0
    2980:	f1 1d       	adc	r31, r1
    2982:	11 24       	eor	r1, r1
    2984:	33 96       	adiw	r30, 0x03	; 3
    2986:	85 91       	lpm	r24, Z+
    2988:	94 91       	lpm	r25, Z
	if(pos==NULL){
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	59 f4       	brne	.+22     	; 0x29a4 <TriggerCommon+0xbe>
		track->patchCommandStreamPos=NULL;
    298e:	87 e1       	ldi	r24, 0x17	; 23
    2990:	8c 9f       	mul	r24, r28
    2992:	f0 01       	movw	r30, r0
    2994:	8d 9f       	mul	r24, r29
    2996:	f0 0d       	add	r31, r0
    2998:	11 24       	eor	r1, r1
    299a:	e9 5d       	subi	r30, 0xD9	; 217
    299c:	f6 4f       	sbci	r31, 0xF6	; 246
    299e:	16 8a       	std	Z+22, r1	; 0x16
    29a0:	15 8a       	std	Z+21, r1	; 0x15
    29a2:	0e c0       	rjmp	.+28     	; 0x29c0 <TriggerCommon+0xda>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    29a4:	fc 01       	movw	r30, r24
    29a6:	24 91       	lpm	r18, Z
    29a8:	37 e1       	ldi	r19, 0x17	; 23
    29aa:	3c 9f       	mul	r19, r28
    29ac:	f0 01       	movw	r30, r0
    29ae:	3d 9f       	mul	r19, r29
    29b0:	f0 0d       	add	r31, r0
    29b2:	11 24       	eor	r1, r1
    29b4:	e9 5d       	subi	r30, 0xD9	; 217
    29b6:	f6 4f       	sbci	r31, 0xF6	; 246
    29b8:	22 8b       	std	Z+18, r18	; 0x12
    29ba:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    29bc:	96 8b       	std	Z+22, r25	; 0x16
    29be:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	08 95       	ret

000029cc <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    29cc:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    29ce:	a8 2f       	mov	r26, r24
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	97 e1       	ldi	r25, 0x17	; 23
    29d4:	89 9f       	mul	r24, r25
    29d6:	f0 01       	movw	r30, r0
    29d8:	11 24       	eor	r1, r1
    29da:	e9 5d       	subi	r30, 0xD9	; 217
    29dc:	f6 4f       	sbci	r31, 0xF6	; 246
    29de:	90 81       	ld	r25, Z
    29e0:	95 ff       	sbrs	r25, 5
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <TriggerNote+0x1c>
    29e4:	97 fd       	sbrc	r25, 7
    29e6:	28 c0       	rjmp	.+80     	; 0x2a38 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    29e8:	31 11       	cpse	r19, r1
    29ea:	18 c0       	rjmp	.+48     	; 0x2a1c <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    29ec:	87 e1       	ldi	r24, 0x17	; 23
    29ee:	8a 9f       	mul	r24, r26
    29f0:	f0 01       	movw	r30, r0
    29f2:	8b 9f       	mul	r24, r27
    29f4:	f0 0d       	add	r31, r0
    29f6:	11 24       	eor	r1, r1
    29f8:	e9 5d       	subi	r30, 0xD9	; 217
    29fa:	f6 4f       	sbci	r31, 0xF6	; 246
    29fc:	86 85       	ldd	r24, Z+14	; 0x0e
    29fe:	81 11       	cpse	r24, r1
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <TriggerNote+0x3a>
    2a02:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    2a04:	14 86       	std	Z+12, r1	; 0x0c
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    2a06:	87 e1       	ldi	r24, 0x17	; 23
    2a08:	8a 9f       	mul	r24, r26
    2a0a:	f0 01       	movw	r30, r0
    2a0c:	8b 9f       	mul	r24, r27
    2a0e:	f0 0d       	add	r31, r0
    2a10:	11 24       	eor	r1, r1
    2a12:	e9 5d       	subi	r30, 0xD9	; 217
    2a14:	f6 4f       	sbci	r31, 0xF6	; 246
    2a16:	9f 7b       	andi	r25, 0xBF	; 191
    2a18:	90 83       	st	Z, r25
    2a1a:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    2a1c:	27 e1       	ldi	r18, 0x17	; 23
    2a1e:	2a 9f       	mul	r18, r26
    2a20:	f0 01       	movw	r30, r0
    2a22:	2b 9f       	mul	r18, r27
    2a24:	f0 0d       	add	r31, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	e9 5d       	subi	r30, 0xD9	; 217
    2a2a:	f6 4f       	sbci	r31, 0xF6	; 246
    2a2c:	9f 77       	andi	r25, 0x7F	; 127
    2a2e:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    2a30:	24 2f       	mov	r18, r20
    2a32:	43 2f       	mov	r20, r19
    2a34:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <TriggerCommon>
    2a38:	08 95       	ret

00002a3a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    2a3a:	99 27       	eor	r25, r25
	clr r23
    2a3c:	77 27       	eor	r23, r23

#if MIXER_CHAN4_TYPE == 0 
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
    2a3e:	83 30       	cpi	r24, 0x03	; 3
		brlo set_note_waves
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <set_note_waves>
		ret		
    2a42:	08 95       	ret

00002a44 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    2a44:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    2a46:	fb e2       	ldi	r31, 0x2B	; 43
	lsl r22
    2a48:	66 0f       	add	r22, r22
	rol r23
    2a4a:	77 1f       	adc	r23, r23
	add ZL,r22
    2a4c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    2a4e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    2a50:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    2a52:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    2a54:	ea e0       	ldi	r30, 0x0A	; 10
	ldi ZH,hi8(mixerStruct)
    2a56:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    2a58:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    2a5a:	28 9f       	mul	r18, r24
	add ZL,r0
    2a5c:	e0 0d       	add	r30, r0
	adc ZH,r1
    2a5e:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    2a60:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    2a62:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    2a64:	11 24       	eor	r1, r1
	

	ret
    2a66:	08 95       	ret

00002a68 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    2a68:	99 27       	eor	r25, r25
	clr r23
    2a6a:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    2a6c:	ea e0       	ldi	r30, 0x0A	; 10
	ldi ZH,hi8(mixerStruct)
    2a6e:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    2a70:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    2a72:	28 9f       	mul	r18, r24
	add ZL,r0
    2a74:	e0 0d       	add	r30, r0
	adc ZH,r1
    2a76:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    2a78:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    2a7a:	31 f4       	brne	.+12     	; 0x2a88 <smw1>
	lds r22,tr4_params
    2a7c:	60 91 1d 09 	lds	r22, 0x091D
	andi r22,0xfe;
    2a80:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    2a82:	60 93 1d 09 	sts	0x091D, r22
	rjmp esmw	
    2a86:	0b c0       	rjmp	.+22     	; 0x2a9e <esmw>

00002a88 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    2a88:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    2a8a:	31 f4       	brne	.+12     	; 0x2a98 <smw2>
	lds r22,tr4_params
    2a8c:	60 91 1d 09 	lds	r22, 0x091D
	ori r22,0xfe;
    2a90:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    2a92:	60 93 1d 09 	sts	0x091D, r22
	rjmp esmw
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <esmw>

00002a98 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    2a98:	7d e2       	ldi	r23, 0x2D	; 45
	add r23,r22
    2a9a:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    2a9c:	75 83       	std	Z+5, r23	; 0x05

00002a9e <esmw>:

esmw:
	clr r1	
    2a9e:	11 24       	eor	r1, r1
	ret
    2aa0:	08 95       	ret
	...

00002b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    2b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    2b02:	80 93 09 09 	sts	0x0909, r24
	ret
    2b06:	08 95       	ret

00002b08 <steptable>:
    2b08:	22 00       	.word	0x0022	; ????
    2b0a:	24 00       	.word	0x0024	; ????
    2b0c:	26 00       	.word	0x0026	; ????
    2b0e:	28 00       	.word	0x0028	; ????
    2b10:	2b 00       	.word	0x002b	; ????
    2b12:	2d 00       	.word	0x002d	; ????
    2b14:	30 00       	.word	0x0030	; ????
    2b16:	33 00       	.word	0x0033	; ????
    2b18:	36 00       	.word	0x0036	; ????
    2b1a:	39 00       	.word	0x0039	; ????
    2b1c:	3d 00       	.word	0x003d	; ????
    2b1e:	40 00       	.word	0x0040	; ????
    2b20:	44 00       	.word	0x0044	; ????
    2b22:	48 00       	.word	0x0048	; ????
    2b24:	4c 00       	.word	0x004c	; ????
    2b26:	51 00       	.word	0x0051	; ????
    2b28:	56 00       	.word	0x0056	; ????
    2b2a:	5b 00       	.word	0x005b	; ????
    2b2c:	60 00       	.word	0x0060	; ????
    2b2e:	66 00       	.word	0x0066	; ????
    2b30:	6c 00       	.word	0x006c	; ????
    2b32:	73 00       	.word	0x0073	; ????
    2b34:	79 00       	.word	0x0079	; ????
    2b36:	81 00       	.word	0x0081	; ????
    2b38:	88 00       	.word	0x0088	; ????
    2b3a:	90 00       	.word	0x0090	; ????
    2b3c:	99 00       	.word	0x0099	; ????
    2b3e:	a2 00       	.word	0x00a2	; ????
    2b40:	ac 00       	.word	0x00ac	; ????
    2b42:	b6 00       	.word	0x00b6	; ????
    2b44:	c1 00       	.word	0x00c1	; ????
    2b46:	cc 00       	.word	0x00cc	; ????
    2b48:	d8 00       	.word	0x00d8	; ????
    2b4a:	e5 00       	.word	0x00e5	; ????
    2b4c:	f3 00       	.word	0x00f3	; ????
    2b4e:	01 01       	movw	r0, r2
    2b50:	10 01       	movw	r2, r0
    2b52:	21 01       	movw	r4, r2
    2b54:	32 01       	movw	r6, r4
    2b56:	44 01       	movw	r8, r8
    2b58:	57 01       	movw	r10, r14
    2b5a:	6c 01       	movw	r12, r24
    2b5c:	81 01       	movw	r16, r2
    2b5e:	98 01       	movw	r18, r16
    2b60:	b0 01       	movw	r22, r0
    2b62:	ca 01       	movw	r24, r20
    2b64:	e5 01       	movw	r28, r10
    2b66:	02 02       	muls	r16, r18
    2b68:	21 02       	muls	r18, r17
    2b6a:	41 02       	muls	r20, r17
    2b6c:	64 02       	muls	r22, r20
    2b6e:	88 02       	muls	r24, r24
    2b70:	ae 02       	muls	r26, r30
    2b72:	d7 02       	muls	r29, r23
    2b74:	03 03       	mulsu	r16, r19
    2b76:	30 03       	mulsu	r19, r16
    2b78:	61 03       	mulsu	r22, r17
    2b7a:	94 03       	fmuls	r17, r20
    2b7c:	cb 03       	fmulsu	r20, r19
    2b7e:	05 04       	cpc	r0, r5
    2b80:	42 04       	cpc	r4, r2
    2b82:	83 04       	cpc	r8, r3
    2b84:	c7 04       	cpc	r12, r7
    2b86:	10 05       	cpc	r17, r0
    2b88:	5d 05       	cpc	r21, r13
    2b8a:	af 05       	cpc	r26, r15
    2b8c:	05 06       	cpc	r0, r21
    2b8e:	61 06       	cpc	r6, r17
    2b90:	c2 06       	cpc	r12, r18
    2b92:	29 07       	cpc	r18, r25
    2b94:	96 07       	cpc	r25, r22
    2b96:	09 08       	sbc	r0, r9
    2b98:	83 08       	sbc	r8, r3
    2b9a:	05 09       	sbc	r16, r5
    2b9c:	8e 09       	sbc	r24, r14
    2b9e:	20 0a       	sbc	r2, r16
    2ba0:	ba 0a       	sbc	r11, r26
    2ba2:	5d 0b       	sbc	r21, r29
    2ba4:	0a 0c       	add	r0, r10
    2ba6:	c1 0c       	add	r12, r1
    2ba8:	84 0d       	add	r24, r4
    2baa:	51 0e       	add	r5, r17
    2bac:	2b 0f       	add	r18, r27
    2bae:	12 10       	cpse	r1, r2
    2bb0:	07 11       	cpse	r16, r7
    2bb2:	0a 12       	cpse	r0, r26
    2bb4:	1d 13       	cpse	r17, r29
    2bb6:	40 14       	cp	r4, r0
    2bb8:	74 15       	cp	r23, r4
    2bba:	ba 16       	cp	r11, r26
    2bbc:	14 18       	sub	r1, r4
    2bbe:	83 19       	sub	r24, r3
    2bc0:	07 1b       	sub	r16, r23
    2bc2:	a3 1c       	adc	r10, r3
    2bc4:	57 1e       	adc	r5, r23
    2bc6:	24 20       	and	r2, r4
    2bc8:	0e 22       	and	r0, r30
    2bca:	14 24       	eor	r1, r4
    2bcc:	39 26       	eor	r3, r25
    2bce:	7f 28       	or	r7, r15
    2bd0:	e8 2a       	or	r14, r24
    2bd2:	75 2d       	mov	r23, r5
    2bd4:	29 30       	cpi	r18, 0x09	; 9
    2bd6:	06 33       	cpi	r16, 0x36	; 54
    2bd8:	0f 36       	cpi	r16, 0x6F	; 111
    2bda:	45 39       	cpi	r20, 0x95	; 149
    2bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    2bde:	49 40       	sbci	r20, 0x09	; 9
    2be0:	1b 44       	sbci	r17, 0x4B	; 75
    2be2:	28 48       	sbci	r18, 0x88	; 136
    2be4:	73 4c       	sbci	r23, 0xC3	; 195
    2be6:	fe 50       	subi	r31, 0x0E	; 14
    2be8:	cf 55       	subi	r28, 0x5F	; 95
    2bea:	ea 5a       	subi	r30, 0xAA	; 170
    2bec:	51 60       	ori	r21, 0x01	; 1
    2bee:	0c 66       	ori	r16, 0x6C	; 108
    2bf0:	1d 6c       	ori	r17, 0xCD	; 205
    2bf2:	8b 72       	andi	r24, 0x2B	; 43
    2bf4:	5a 79       	andi	r21, 0x9A	; 154
    2bf6:	92 80       	ldd	r9, Z+2	; 0x02
    2bf8:	37 88       	ldd	r3, Z+23	; 0x17
    2bfa:	50 90 e5 98 	lds	r5, 0x98E5
    2bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    2c00:	9f ab       	std	Y+55, r25	; 0x37
    2c02:	d3 b5       	in	r29, 0x23	; 35
    2c04:	a3 c0       	rjmp	.+326    	; 0x2d4c <waves+0x4c>
	...

00002d00 <waves>:
    2d00:	00 03       	mulsu	r16, r16
    2d02:	06 09       	sbc	r16, r6
    2d04:	0c 10       	cpse	r0, r12
    2d06:	13 16       	cp	r1, r19
    2d08:	19 1c       	adc	r1, r9
    2d0a:	1f 22       	and	r1, r31
    2d0c:	25 28       	or	r2, r5
    2d0e:	2b 2e       	mov	r2, r27
    2d10:	31 33       	cpi	r19, 0x31	; 49
    2d12:	36 39       	cpi	r19, 0x96	; 150
    2d14:	3c 3f       	cpi	r19, 0xFC	; 252
    2d16:	41 44       	sbci	r20, 0x41	; 65
    2d18:	47 49       	sbci	r20, 0x97	; 151
    2d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    2d1c:	51 53       	subi	r21, 0x31	; 49
    2d1e:	55 58       	subi	r21, 0x85	; 133
    2d20:	5a 5c       	subi	r21, 0xCA	; 202
    2d22:	5e 60       	ori	r21, 0x0E	; 14
    2d24:	62 64       	ori	r22, 0x42	; 66
    2d26:	66 68       	ori	r22, 0x86	; 134
    2d28:	6a 6b       	ori	r22, 0xBA	; 186
    2d2a:	6d 6f       	ori	r22, 0xFD	; 253
    2d2c:	70 71       	andi	r23, 0x10	; 16
    2d2e:	73 74       	andi	r23, 0x43	; 67
    2d30:	75 76       	andi	r23, 0x65	; 101
    2d32:	78 79       	andi	r23, 0x98	; 152
    2d34:	7a 7a       	andi	r23, 0xAA	; 170
    2d36:	7b 7c       	andi	r23, 0xCB	; 203
    2d38:	7d 7d       	andi	r23, 0xDD	; 221
    2d3a:	7e 7e       	andi	r23, 0xEE	; 238
    2d3c:	7e 7f       	andi	r23, 0xFE	; 254
    2d3e:	7f 7f       	andi	r23, 0xFF	; 255
    2d40:	7f 7f       	andi	r23, 0xFF	; 255
    2d42:	7f 7f       	andi	r23, 0xFF	; 255
    2d44:	7e 7e       	andi	r23, 0xEE	; 238
    2d46:	7e 7d       	andi	r23, 0xDE	; 222
    2d48:	7d 7c       	andi	r23, 0xCD	; 205
    2d4a:	7b 7a       	andi	r23, 0xAB	; 171
    2d4c:	7a 79       	andi	r23, 0x9A	; 154
    2d4e:	78 76       	andi	r23, 0x68	; 104
    2d50:	75 74       	andi	r23, 0x45	; 69
    2d52:	73 71       	andi	r23, 0x13	; 19
    2d54:	70 6f       	ori	r23, 0xF0	; 240
    2d56:	6d 6b       	ori	r22, 0xBD	; 189
    2d58:	6a 68       	ori	r22, 0x8A	; 138
    2d5a:	66 64       	ori	r22, 0x46	; 70
    2d5c:	62 60       	ori	r22, 0x02	; 2
    2d5e:	5e 5c       	subi	r21, 0xCE	; 206
    2d60:	5a 58       	subi	r21, 0x8A	; 138
    2d62:	55 53       	subi	r21, 0x35	; 53
    2d64:	51 4e       	sbci	r21, 0xE1	; 225
    2d66:	4c 49       	sbci	r20, 0x9C	; 156
    2d68:	47 44       	sbci	r20, 0x47	; 71
    2d6a:	41 3f       	cpi	r20, 0xF1	; 241
    2d6c:	3c 39       	cpi	r19, 0x9C	; 156
    2d6e:	36 33       	cpi	r19, 0x36	; 54
    2d70:	31 2e       	mov	r3, r17
    2d72:	2b 28       	or	r2, r11
    2d74:	25 22       	and	r2, r21
    2d76:	1f 1c       	adc	r1, r15
    2d78:	19 16       	cp	r1, r25
    2d7a:	13 10       	cpse	r1, r3
    2d7c:	0c 09       	sbc	r16, r12
    2d7e:	06 03       	mulsu	r16, r22
    2d80:	00 fd       	sbrc	r16, 0
    2d82:	fa f7       	brpl	.-2      	; 0x2d82 <waves+0x82>
    2d84:	f4 f0       	brlt	.+60     	; 0x2dc2 <waves+0xc2>
    2d86:	ed ea       	ldi	r30, 0xAD	; 173
    2d88:	e7 e4       	ldi	r30, 0x47	; 71
    2d8a:	e1 de       	rcall	.-574    	; 0x2b4e <steptable+0x46>
    2d8c:	db d8       	rcall	.-3658   	; 0x1f44 <hsync_pulse+0x10>
    2d8e:	d5 d2       	rcall	.+1450   	; 0x333a <waves+0x63a>
    2d90:	cf cd       	rjmp	.-1122   	; 0x2930 <TriggerCommon+0x4a>
    2d92:	ca c7       	rjmp	.+3988   	; 0x3d28 <__data_load_end+0x258>
    2d94:	c4 c1       	rjmp	.+904    	; 0x311e <waves+0x41e>
    2d96:	bf bc       	out	0x2f, r11	; 47
    2d98:	b9 b7       	in	r27, 0x39	; 57
    2d9a:	b4 b2       	in	r11, 0x14	; 20
    2d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    2d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    2da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    2da4:	9e 9c       	mul	r9, r14
    2da6:	9a 98       	cbi	0x13, 2	; 19
    2da8:	96 95       	lsr	r25
    2daa:	93 91       	.word	0x9193	; ????
    2dac:	90 8f       	std	Z+24, r25	; 0x18
    2dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    2db0:	8b 8a       	std	Y+19, r8	; 0x13
    2db2:	88 87       	std	Y+8, r24	; 0x08
    2db4:	86 86       	std	Z+14, r8	; 0x0e
    2db6:	85 84       	ldd	r8, Z+13	; 0x0d
    2db8:	83 83       	std	Z+3, r24	; 0x03
    2dba:	82 82       	std	Z+2, r8	; 0x02
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	81 81       	ldd	r24, Z+1	; 0x01
    2dc0:	81 81       	ldd	r24, Z+1	; 0x01
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	82 82       	std	Z+2, r8	; 0x02
    2dc6:	82 83       	std	Z+2, r24	; 0x02
    2dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    2dca:	85 86       	std	Z+13, r8	; 0x0d
    2dcc:	86 87       	std	Z+14, r24	; 0x0e
    2dce:	88 8a       	std	Y+16, r8	; 0x10
    2dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd4:	90 91 93 95 	lds	r25, 0x9593
    2dd8:	96 98       	cbi	0x12, 6	; 18
    2dda:	9a 9c       	mul	r9, r10
    2ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    2dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    2de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    2de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    2de4:	af b2       	in	r10, 0x1f	; 31
    2de6:	b4 b7       	in	r27, 0x34	; 52
    2de8:	b9 bc       	out	0x29, r11	; 41
    2dea:	bf c1       	rjmp	.+894    	; 0x316a <waves+0x46a>
    2dec:	c4 c7       	rjmp	.+3976   	; 0x3d76 <__data_load_end+0x2a6>
    2dee:	ca cd       	rjmp	.-1132   	; 0x2984 <TriggerCommon+0x9e>
    2df0:	cf d2       	rcall	.+1438   	; 0x3390 <waves+0x690>
    2df2:	d5 d8       	rcall	.-3670   	; 0x1f9e <end_set_bank+0x38>
    2df4:	db de       	rcall	.-586    	; 0x2bac <steptable+0xa4>
    2df6:	e1 e4       	ldi	r30, 0x41	; 65
    2df8:	e7 ea       	ldi	r30, 0xA7	; 167
    2dfa:	ed f0       	brhs	.+58     	; 0x2e36 <waves+0x136>
    2dfc:	f4 f7       	brge	.-4      	; 0x2dfa <waves+0xfa>
    2dfe:	fa fd       	.word	0xfdfa	; ????
    2e00:	80 81       	ld	r24, Z
    2e02:	82 83       	std	Z+2, r24	; 0x02
    2e04:	84 85       	ldd	r24, Z+12	; 0x0c
    2e06:	86 87       	std	Z+14, r24	; 0x0e
    2e08:	88 89       	ldd	r24, Y+16	; 0x10
    2e0a:	8a 8b       	std	Y+18, r24	; 0x12
    2e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2e10:	90 91 92 93 	lds	r25, 0x9392
    2e14:	94 95       	.word	0x9594	; ????
    2e16:	96 97       	sbiw	r26, 0x26	; 38
    2e18:	98 99       	sbic	0x13, 0	; 19
    2e1a:	9a 9b       	sbis	0x13, 2	; 19
    2e1c:	9c 9d       	mul	r25, r12
    2e1e:	9e 9f       	mul	r25, r30
    2e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    2e22:	a2 a3       	std	Z+34, r26	; 0x22
    2e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2e26:	a6 a7       	std	Z+46, r26	; 0x2e
    2e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    2e2a:	aa ab       	std	Y+50, r26	; 0x32
    2e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    2e2e:	ae af       	std	Y+62, r26	; 0x3e
    2e30:	b0 b1       	in	r27, 0x00	; 0
    2e32:	b2 b3       	in	r27, 0x12	; 18
    2e34:	b4 b5       	in	r27, 0x24	; 36
    2e36:	b6 b7       	in	r27, 0x36	; 54
    2e38:	b8 b9       	out	0x08, r27	; 8
    2e3a:	ba bb       	out	0x1a, r27	; 26
    2e3c:	bc bd       	out	0x2c, r27	; 44
    2e3e:	be bf       	out	0x3e, r27	; 62
    2e40:	c0 c1       	rjmp	.+896    	; 0x31c2 <waves+0x4c2>
    2e42:	c2 c3       	rjmp	.+1924   	; 0x35c8 <waves+0x8c8>
    2e44:	c4 c5       	rjmp	.+2952   	; 0x39ce <findFileFirstSector+0x118>
    2e46:	c6 c7       	rjmp	.+3980   	; 0x3dd4 <__data_load_end+0x304>
    2e48:	c8 c9       	rjmp	.-3184   	; 0x21da <SoftReset+0x12>
    2e4a:	ca cb       	rjmp	.-2156   	; 0x25e0 <ProcessMusic+0x194>
    2e4c:	cc cd       	rjmp	.-1128   	; 0x29e6 <TriggerNote+0x1a>
    2e4e:	ce cf       	rjmp	.-100    	; 0x2dec <waves+0xec>
    2e50:	d0 d1       	rcall	.+928    	; 0x31f2 <waves+0x4f2>
    2e52:	d2 d3       	rcall	.+1956   	; 0x35f8 <waves+0x8f8>
    2e54:	d4 d5       	rcall	.+2984   	; 0x39fe <findFileFirstSector+0x148>
    2e56:	d6 d7       	rcall	.+4012   	; 0x3e04 <__data_load_end+0x334>
    2e58:	d8 d9       	rcall	.-3152   	; 0x220a <ReadButtons+0x2c>
    2e5a:	da db       	rcall	.-2124   	; 0x2610 <ProcessMusic+0x1c4>
    2e5c:	dc dd       	rcall	.-1096   	; 0x2a16 <TriggerNote+0x4a>
    2e5e:	de df       	rcall	.-68     	; 0x2e1c <waves+0x11c>
    2e60:	e0 e1       	ldi	r30, 0x10	; 16
    2e62:	e2 e3       	ldi	r30, 0x32	; 50
    2e64:	e4 e5       	ldi	r30, 0x54	; 84
    2e66:	e6 e7       	ldi	r30, 0x76	; 118
    2e68:	e8 e9       	ldi	r30, 0x98	; 152
    2e6a:	ea eb       	ldi	r30, 0xBA	; 186
    2e6c:	ec ed       	ldi	r30, 0xDC	; 220
    2e6e:	ee ef       	ldi	r30, 0xFE	; 254
    2e70:	f0 f1       	brcs	.+124    	; 0x2eee <waves+0x1ee>
    2e72:	f2 f3       	brmi	.-4      	; 0x2e70 <waves+0x170>
    2e74:	f4 f5       	brge	.+124    	; 0x2ef2 <waves+0x1f2>
    2e76:	f6 f7       	brtc	.-4      	; 0x2e74 <waves+0x174>
    2e78:	f8 f9       	.word	0xf9f8	; ????
    2e7a:	fa fb       	.word	0xfbfa	; ????
    2e7c:	fc fd       	.word	0xfdfc	; ????
    2e7e:	fe ff       	.word	0xfffe	; ????
    2e80:	00 01       	movw	r0, r0
    2e82:	02 03       	mulsu	r16, r18
    2e84:	04 05       	cpc	r16, r4
    2e86:	06 07       	cpc	r16, r22
    2e88:	08 09       	sbc	r16, r8
    2e8a:	0a 0b       	sbc	r16, r26
    2e8c:	0c 0d       	add	r16, r12
    2e8e:	0e 0f       	add	r16, r30
    2e90:	10 11       	cpse	r17, r0
    2e92:	12 13       	cpse	r17, r18
    2e94:	14 15       	cp	r17, r4
    2e96:	16 17       	cp	r17, r22
    2e98:	18 19       	sub	r17, r8
    2e9a:	1a 1b       	sub	r17, r26
    2e9c:	1c 1d       	adc	r17, r12
    2e9e:	1e 1f       	adc	r17, r30
    2ea0:	20 21       	and	r18, r0
    2ea2:	22 23       	and	r18, r18
    2ea4:	24 25       	eor	r18, r4
    2ea6:	26 27       	eor	r18, r22
    2ea8:	28 29       	or	r18, r8
    2eaa:	2a 2b       	or	r18, r26
    2eac:	2c 2d       	mov	r18, r12
    2eae:	2e 2f       	mov	r18, r30
    2eb0:	30 31       	cpi	r19, 0x10	; 16
    2eb2:	32 33       	cpi	r19, 0x32	; 50
    2eb4:	34 35       	cpi	r19, 0x54	; 84
    2eb6:	36 37       	cpi	r19, 0x76	; 118
    2eb8:	38 39       	cpi	r19, 0x98	; 152
    2eba:	3a 3b       	cpi	r19, 0xBA	; 186
    2ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    2ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    2ec0:	40 41       	sbci	r20, 0x10	; 16
    2ec2:	42 43       	sbci	r20, 0x32	; 50
    2ec4:	44 45       	sbci	r20, 0x54	; 84
    2ec6:	46 47       	sbci	r20, 0x76	; 118
    2ec8:	48 49       	sbci	r20, 0x98	; 152
    2eca:	4a 4b       	sbci	r20, 0xBA	; 186
    2ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    2ece:	4e 4f       	sbci	r20, 0xFE	; 254
    2ed0:	50 51       	subi	r21, 0x10	; 16
    2ed2:	52 53       	subi	r21, 0x32	; 50
    2ed4:	54 55       	subi	r21, 0x54	; 84
    2ed6:	56 57       	subi	r21, 0x76	; 118
    2ed8:	58 59       	subi	r21, 0x98	; 152
    2eda:	5a 5b       	subi	r21, 0xBA	; 186
    2edc:	5c 5d       	subi	r21, 0xDC	; 220
    2ede:	5e 5f       	subi	r21, 0xFE	; 254
    2ee0:	60 61       	ori	r22, 0x10	; 16
    2ee2:	62 63       	ori	r22, 0x32	; 50
    2ee4:	64 65       	ori	r22, 0x54	; 84
    2ee6:	66 67       	ori	r22, 0x76	; 118
    2ee8:	68 69       	ori	r22, 0x98	; 152
    2eea:	6a 6b       	ori	r22, 0xBA	; 186
    2eec:	6c 6d       	ori	r22, 0xDC	; 220
    2eee:	6e 6f       	ori	r22, 0xFE	; 254
    2ef0:	70 71       	andi	r23, 0x10	; 16
    2ef2:	72 73       	andi	r23, 0x32	; 50
    2ef4:	74 75       	andi	r23, 0x54	; 84
    2ef6:	76 77       	andi	r23, 0x76	; 118
    2ef8:	78 79       	andi	r23, 0x98	; 152
    2efa:	7a 7b       	andi	r23, 0xBA	; 186
    2efc:	7c 7d       	andi	r23, 0xDC	; 220
    2efe:	7e 7f       	andi	r23, 0xFE	; 254
    2f00:	00 02       	muls	r16, r16
    2f02:	04 06       	cpc	r0, r20
    2f04:	08 0a       	sbc	r0, r24
    2f06:	0c 0e       	add	r0, r28
    2f08:	10 12       	cpse	r1, r16
    2f0a:	14 16       	cp	r1, r20
    2f0c:	18 1a       	sub	r1, r24
    2f0e:	1c 1e       	adc	r1, r28
    2f10:	20 22       	and	r2, r16
    2f12:	24 26       	eor	r2, r20
    2f14:	28 2a       	or	r2, r24
    2f16:	2c 2e       	mov	r2, r28
    2f18:	30 32       	cpi	r19, 0x20	; 32
    2f1a:	34 36       	cpi	r19, 0x64	; 100
    2f1c:	38 3a       	cpi	r19, 0xA8	; 168
    2f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    2f20:	40 42       	sbci	r20, 0x20	; 32
    2f22:	44 46       	sbci	r20, 0x64	; 100
    2f24:	48 4a       	sbci	r20, 0xA8	; 168
    2f26:	4c 4e       	sbci	r20, 0xEC	; 236
    2f28:	50 52       	subi	r21, 0x20	; 32
    2f2a:	54 56       	subi	r21, 0x64	; 100
    2f2c:	58 5a       	subi	r21, 0xA8	; 168
    2f2e:	5c 5e       	subi	r21, 0xEC	; 236
    2f30:	60 62       	ori	r22, 0x20	; 32
    2f32:	64 66       	ori	r22, 0x64	; 100
    2f34:	68 6a       	ori	r22, 0xA8	; 168
    2f36:	6c 6e       	ori	r22, 0xEC	; 236
    2f38:	70 72       	andi	r23, 0x20	; 32
    2f3a:	74 76       	andi	r23, 0x64	; 100
    2f3c:	78 7a       	andi	r23, 0xA8	; 168
    2f3e:	7c 7e       	andi	r23, 0xEC	; 236
    2f40:	7f 7d       	andi	r23, 0xDF	; 223
    2f42:	7b 79       	andi	r23, 0x9B	; 155
    2f44:	77 75       	andi	r23, 0x57	; 87
    2f46:	73 71       	andi	r23, 0x13	; 19
    2f48:	6f 6d       	ori	r22, 0xDF	; 223
    2f4a:	6b 69       	ori	r22, 0x9B	; 155
    2f4c:	67 65       	ori	r22, 0x57	; 87
    2f4e:	63 61       	ori	r22, 0x13	; 19
    2f50:	5f 5d       	subi	r21, 0xDF	; 223
    2f52:	5b 59       	subi	r21, 0x9B	; 155
    2f54:	57 55       	subi	r21, 0x57	; 87
    2f56:	53 51       	subi	r21, 0x13	; 19
    2f58:	4f 4d       	sbci	r20, 0xDF	; 223
    2f5a:	4b 49       	sbci	r20, 0x9B	; 155
    2f5c:	47 45       	sbci	r20, 0x57	; 87
    2f5e:	43 41       	sbci	r20, 0x13	; 19
    2f60:	3f 3d       	cpi	r19, 0xDF	; 223
    2f62:	3b 39       	cpi	r19, 0x9B	; 155
    2f64:	37 35       	cpi	r19, 0x57	; 87
    2f66:	33 31       	cpi	r19, 0x13	; 19
    2f68:	2f 2d       	mov	r18, r15
    2f6a:	2b 29       	or	r18, r11
    2f6c:	27 25       	eor	r18, r7
    2f6e:	23 21       	and	r18, r3
    2f70:	1f 1d       	adc	r17, r15
    2f72:	1b 19       	sub	r17, r11
    2f74:	17 15       	cp	r17, r7
    2f76:	13 11       	cpse	r17, r3
    2f78:	0f 0d       	add	r16, r15
    2f7a:	0b 09       	sbc	r16, r11
    2f7c:	07 05       	cpc	r16, r7
    2f7e:	03 01       	movw	r0, r6
    2f80:	ff fd       	.word	0xfdff	; ????
    2f82:	fb f9       	.word	0xf9fb	; ????
    2f84:	f7 f5       	brid	.+124    	; 0x3002 <waves+0x302>
    2f86:	f3 f1       	brvs	.+124    	; 0x3004 <waves+0x304>
    2f88:	ef ed       	ldi	r30, 0xDF	; 223
    2f8a:	eb e9       	ldi	r30, 0x9B	; 155
    2f8c:	e7 e5       	ldi	r30, 0x57	; 87
    2f8e:	e3 e1       	ldi	r30, 0x13	; 19
    2f90:	df dd       	rcall	.-1090   	; 0x2b50 <steptable+0x48>
    2f92:	db d9       	rcall	.-3146   	; 0x234a <PatchCommand08+0x16>
    2f94:	d7 d5       	rcall	.+2990   	; 0x3b44 <__data_load_end+0x74>
    2f96:	d3 d1       	rcall	.+934    	; 0x333e <waves+0x63e>
    2f98:	cf cd       	rjmp	.-1122   	; 0x2b38 <steptable+0x30>
    2f9a:	cb c9       	rjmp	.-3178   	; 0x2332 <PatchCommand07+0x4>
    2f9c:	c7 c5       	rjmp	.+2958   	; 0x3b2c <__data_load_end+0x5c>
    2f9e:	c3 c1       	rjmp	.+902    	; 0x3326 <waves+0x626>
    2fa0:	bf bd       	out	0x2f, r27	; 47
    2fa2:	bb b9       	out	0x0b, r27	; 11
    2fa4:	b7 b5       	in	r27, 0x27	; 39
    2fa6:	b3 b1       	in	r27, 0x03	; 3
    2fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    2faa:	ab a9       	ldd	r26, Y+51	; 0x33
    2fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    2fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fb0:	9f 9d       	mul	r25, r15
    2fb2:	9b 99       	sbic	0x13, 3	; 19
    2fb4:	97 95       	ror	r25
    2fb6:	93 91       	.word	0x9193	; ????
    2fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    2fbe:	83 81       	ldd	r24, Z+3	; 0x03
    2fc0:	80 82       	st	Z, r8
    2fc2:	84 86       	std	Z+12, r8	; 0x0c
    2fc4:	88 8a       	std	Y+16, r8	; 0x10
    2fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    2fc8:	90 92 94 96 	sts	0x9694, r9
    2fcc:	98 9a       	sbi	0x13, 0	; 19
    2fce:	9c 9e       	mul	r9, r28
    2fd0:	a0 a2       	std	Z+32, r10	; 0x20
    2fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    2fd4:	a8 aa       	std	Y+48, r10	; 0x30
    2fd6:	ac ae       	std	Y+60, r10	; 0x3c
    2fd8:	b0 b2       	in	r11, 0x10	; 16
    2fda:	b4 b6       	in	r11, 0x34	; 52
    2fdc:	b8 ba       	out	0x18, r11	; 24
    2fde:	bc be       	out	0x3c, r11	; 60
    2fe0:	c0 c2       	rjmp	.+1408   	; 0x3562 <waves+0x862>
    2fe2:	c4 c6       	rjmp	.+3464   	; 0x3d6c <__data_load_end+0x29c>
    2fe4:	c8 ca       	rjmp	.-2672   	; 0x2576 <ProcessMusic+0x12a>
    2fe6:	cc ce       	rjmp	.-616    	; 0x2d80 <waves+0x80>
    2fe8:	d0 d2       	rcall	.+1440   	; 0x358a <waves+0x88a>
    2fea:	d4 d6       	rcall	.+3496   	; 0x3d94 <__data_load_end+0x2c4>
    2fec:	d8 da       	rcall	.-2640   	; 0x259e <ProcessMusic+0x152>
    2fee:	dc de       	rcall	.-584    	; 0x2da8 <waves+0xa8>
    2ff0:	e0 e2       	ldi	r30, 0x20	; 32
    2ff2:	e4 e6       	ldi	r30, 0x64	; 100
    2ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    2ff6:	ec ee       	ldi	r30, 0xEC	; 236
    2ff8:	f0 f2       	brcs	.-68     	; 0x2fb6 <waves+0x2b6>
    2ffa:	f4 f6       	brge	.-68     	; 0x2fb8 <waves+0x2b8>
    2ffc:	f8 fa       	.word	0xfaf8	; ????
    2ffe:	fc fe       	.word	0xfefc	; ????
    3000:	7f 7f       	andi	r23, 0xFF	; 255
    3002:	7f 7f       	andi	r23, 0xFF	; 255
    3004:	7f 7f       	andi	r23, 0xFF	; 255
    3006:	7f 7f       	andi	r23, 0xFF	; 255
    3008:	7f 7f       	andi	r23, 0xFF	; 255
    300a:	7f 7f       	andi	r23, 0xFF	; 255
    300c:	7f 7f       	andi	r23, 0xFF	; 255
    300e:	7f 7f       	andi	r23, 0xFF	; 255
    3010:	7f 7f       	andi	r23, 0xFF	; 255
    3012:	7f 7f       	andi	r23, 0xFF	; 255
    3014:	7f 7f       	andi	r23, 0xFF	; 255
    3016:	7f 7f       	andi	r23, 0xFF	; 255
    3018:	7f 7f       	andi	r23, 0xFF	; 255
    301a:	7f 7f       	andi	r23, 0xFF	; 255
    301c:	7f 7f       	andi	r23, 0xFF	; 255
    301e:	7f 7f       	andi	r23, 0xFF	; 255
    3020:	7f 7f       	andi	r23, 0xFF	; 255
    3022:	7f 7f       	andi	r23, 0xFF	; 255
    3024:	7f 7f       	andi	r23, 0xFF	; 255
    3026:	7f 7f       	andi	r23, 0xFF	; 255
    3028:	7f 7f       	andi	r23, 0xFF	; 255
    302a:	7f 7f       	andi	r23, 0xFF	; 255
    302c:	7f 7f       	andi	r23, 0xFF	; 255
    302e:	7f 7f       	andi	r23, 0xFF	; 255
    3030:	7f 7f       	andi	r23, 0xFF	; 255
    3032:	7f 7f       	andi	r23, 0xFF	; 255
    3034:	7f 7f       	andi	r23, 0xFF	; 255
    3036:	7f 7f       	andi	r23, 0xFF	; 255
    3038:	7f 7f       	andi	r23, 0xFF	; 255
    303a:	7f 7f       	andi	r23, 0xFF	; 255
    303c:	7f 7f       	andi	r23, 0xFF	; 255
    303e:	7f 7f       	andi	r23, 0xFF	; 255
    3040:	80 80       	ld	r8, Z
    3042:	80 80       	ld	r8, Z
    3044:	80 80       	ld	r8, Z
    3046:	80 80       	ld	r8, Z
    3048:	80 80       	ld	r8, Z
    304a:	80 80       	ld	r8, Z
    304c:	80 80       	ld	r8, Z
    304e:	80 80       	ld	r8, Z
    3050:	80 80       	ld	r8, Z
    3052:	80 80       	ld	r8, Z
    3054:	80 80       	ld	r8, Z
    3056:	80 80       	ld	r8, Z
    3058:	80 80       	ld	r8, Z
    305a:	80 80       	ld	r8, Z
    305c:	80 80       	ld	r8, Z
    305e:	80 80       	ld	r8, Z
    3060:	80 80       	ld	r8, Z
    3062:	80 80       	ld	r8, Z
    3064:	80 80       	ld	r8, Z
    3066:	80 80       	ld	r8, Z
    3068:	80 80       	ld	r8, Z
    306a:	80 80       	ld	r8, Z
    306c:	80 80       	ld	r8, Z
    306e:	80 80       	ld	r8, Z
    3070:	80 80       	ld	r8, Z
    3072:	80 80       	ld	r8, Z
    3074:	80 80       	ld	r8, Z
    3076:	80 80       	ld	r8, Z
    3078:	80 80       	ld	r8, Z
    307a:	80 80       	ld	r8, Z
    307c:	80 80       	ld	r8, Z
    307e:	80 80       	ld	r8, Z
    3080:	80 80       	ld	r8, Z
    3082:	80 80       	ld	r8, Z
    3084:	80 80       	ld	r8, Z
    3086:	80 80       	ld	r8, Z
    3088:	80 80       	ld	r8, Z
    308a:	80 80       	ld	r8, Z
    308c:	80 80       	ld	r8, Z
    308e:	80 80       	ld	r8, Z
    3090:	80 80       	ld	r8, Z
    3092:	80 80       	ld	r8, Z
    3094:	80 80       	ld	r8, Z
    3096:	80 80       	ld	r8, Z
    3098:	80 80       	ld	r8, Z
    309a:	80 80       	ld	r8, Z
    309c:	80 80       	ld	r8, Z
    309e:	80 80       	ld	r8, Z
    30a0:	80 80       	ld	r8, Z
    30a2:	80 80       	ld	r8, Z
    30a4:	80 80       	ld	r8, Z
    30a6:	80 80       	ld	r8, Z
    30a8:	80 80       	ld	r8, Z
    30aa:	80 80       	ld	r8, Z
    30ac:	80 80       	ld	r8, Z
    30ae:	80 80       	ld	r8, Z
    30b0:	80 80       	ld	r8, Z
    30b2:	80 80       	ld	r8, Z
    30b4:	80 80       	ld	r8, Z
    30b6:	80 80       	ld	r8, Z
    30b8:	80 80       	ld	r8, Z
    30ba:	80 80       	ld	r8, Z
    30bc:	80 80       	ld	r8, Z
    30be:	80 80       	ld	r8, Z
    30c0:	80 80       	ld	r8, Z
    30c2:	80 80       	ld	r8, Z
    30c4:	80 80       	ld	r8, Z
    30c6:	80 80       	ld	r8, Z
    30c8:	80 80       	ld	r8, Z
    30ca:	80 80       	ld	r8, Z
    30cc:	80 80       	ld	r8, Z
    30ce:	80 80       	ld	r8, Z
    30d0:	80 80       	ld	r8, Z
    30d2:	80 80       	ld	r8, Z
    30d4:	80 80       	ld	r8, Z
    30d6:	80 80       	ld	r8, Z
    30d8:	80 80       	ld	r8, Z
    30da:	80 80       	ld	r8, Z
    30dc:	80 80       	ld	r8, Z
    30de:	80 80       	ld	r8, Z
    30e0:	80 80       	ld	r8, Z
    30e2:	80 80       	ld	r8, Z
    30e4:	80 80       	ld	r8, Z
    30e6:	80 80       	ld	r8, Z
    30e8:	80 80       	ld	r8, Z
    30ea:	80 80       	ld	r8, Z
    30ec:	80 80       	ld	r8, Z
    30ee:	80 80       	ld	r8, Z
    30f0:	80 80       	ld	r8, Z
    30f2:	80 80       	ld	r8, Z
    30f4:	80 80       	ld	r8, Z
    30f6:	80 80       	ld	r8, Z
    30f8:	80 80       	ld	r8, Z
    30fa:	80 80       	ld	r8, Z
    30fc:	80 80       	ld	r8, Z
    30fe:	80 80       	ld	r8, Z
    3100:	7f 7f       	andi	r23, 0xFF	; 255
    3102:	7f 7f       	andi	r23, 0xFF	; 255
    3104:	7f 7f       	andi	r23, 0xFF	; 255
    3106:	7f 7f       	andi	r23, 0xFF	; 255
    3108:	7f 7f       	andi	r23, 0xFF	; 255
    310a:	7f 7f       	andi	r23, 0xFF	; 255
    310c:	7f 7f       	andi	r23, 0xFF	; 255
    310e:	7f 7f       	andi	r23, 0xFF	; 255
    3110:	7f 7f       	andi	r23, 0xFF	; 255
    3112:	7f 7f       	andi	r23, 0xFF	; 255
    3114:	7f 7f       	andi	r23, 0xFF	; 255
    3116:	7f 7f       	andi	r23, 0xFF	; 255
    3118:	7f 7f       	andi	r23, 0xFF	; 255
    311a:	7f 7f       	andi	r23, 0xFF	; 255
    311c:	7f 7f       	andi	r23, 0xFF	; 255
    311e:	7f 7f       	andi	r23, 0xFF	; 255
    3120:	7f 7f       	andi	r23, 0xFF	; 255
    3122:	7f 7f       	andi	r23, 0xFF	; 255
    3124:	7f 7f       	andi	r23, 0xFF	; 255
    3126:	7f 7f       	andi	r23, 0xFF	; 255
    3128:	7f 7f       	andi	r23, 0xFF	; 255
    312a:	7f 7f       	andi	r23, 0xFF	; 255
    312c:	7f 7f       	andi	r23, 0xFF	; 255
    312e:	7f 7f       	andi	r23, 0xFF	; 255
    3130:	7f 7f       	andi	r23, 0xFF	; 255
    3132:	7f 7f       	andi	r23, 0xFF	; 255
    3134:	7f 7f       	andi	r23, 0xFF	; 255
    3136:	7f 7f       	andi	r23, 0xFF	; 255
    3138:	7f 7f       	andi	r23, 0xFF	; 255
    313a:	7f 7f       	andi	r23, 0xFF	; 255
    313c:	7f 7f       	andi	r23, 0xFF	; 255
    313e:	7f 7f       	andi	r23, 0xFF	; 255
    3140:	7f 7f       	andi	r23, 0xFF	; 255
    3142:	7f 7f       	andi	r23, 0xFF	; 255
    3144:	7f 7f       	andi	r23, 0xFF	; 255
    3146:	7f 7f       	andi	r23, 0xFF	; 255
    3148:	7f 7f       	andi	r23, 0xFF	; 255
    314a:	7f 7f       	andi	r23, 0xFF	; 255
    314c:	7f 7f       	andi	r23, 0xFF	; 255
    314e:	7f 7f       	andi	r23, 0xFF	; 255
    3150:	7f 7f       	andi	r23, 0xFF	; 255
    3152:	7f 7f       	andi	r23, 0xFF	; 255
    3154:	7f 7f       	andi	r23, 0xFF	; 255
    3156:	7f 7f       	andi	r23, 0xFF	; 255
    3158:	7f 7f       	andi	r23, 0xFF	; 255
    315a:	7f 7f       	andi	r23, 0xFF	; 255
    315c:	7f 7f       	andi	r23, 0xFF	; 255
    315e:	7f 7f       	andi	r23, 0xFF	; 255
    3160:	7f 7f       	andi	r23, 0xFF	; 255
    3162:	7f 7f       	andi	r23, 0xFF	; 255
    3164:	7f 7f       	andi	r23, 0xFF	; 255
    3166:	7f 7f       	andi	r23, 0xFF	; 255
    3168:	7f 7f       	andi	r23, 0xFF	; 255
    316a:	7f 7f       	andi	r23, 0xFF	; 255
    316c:	7f 7f       	andi	r23, 0xFF	; 255
    316e:	7f 7f       	andi	r23, 0xFF	; 255
    3170:	7f 7f       	andi	r23, 0xFF	; 255
    3172:	7f 7f       	andi	r23, 0xFF	; 255
    3174:	7f 7f       	andi	r23, 0xFF	; 255
    3176:	7f 7f       	andi	r23, 0xFF	; 255
    3178:	7f 7f       	andi	r23, 0xFF	; 255
    317a:	7f 7f       	andi	r23, 0xFF	; 255
    317c:	7f 7f       	andi	r23, 0xFF	; 255
    317e:	7f 7f       	andi	r23, 0xFF	; 255
    3180:	80 80       	ld	r8, Z
    3182:	80 80       	ld	r8, Z
    3184:	80 80       	ld	r8, Z
    3186:	80 80       	ld	r8, Z
    3188:	80 80       	ld	r8, Z
    318a:	80 80       	ld	r8, Z
    318c:	80 80       	ld	r8, Z
    318e:	80 80       	ld	r8, Z
    3190:	80 80       	ld	r8, Z
    3192:	80 80       	ld	r8, Z
    3194:	80 80       	ld	r8, Z
    3196:	80 80       	ld	r8, Z
    3198:	80 80       	ld	r8, Z
    319a:	80 80       	ld	r8, Z
    319c:	80 80       	ld	r8, Z
    319e:	80 80       	ld	r8, Z
    31a0:	80 80       	ld	r8, Z
    31a2:	80 80       	ld	r8, Z
    31a4:	80 80       	ld	r8, Z
    31a6:	80 80       	ld	r8, Z
    31a8:	80 80       	ld	r8, Z
    31aa:	80 80       	ld	r8, Z
    31ac:	80 80       	ld	r8, Z
    31ae:	80 80       	ld	r8, Z
    31b0:	80 80       	ld	r8, Z
    31b2:	80 80       	ld	r8, Z
    31b4:	80 80       	ld	r8, Z
    31b6:	80 80       	ld	r8, Z
    31b8:	80 80       	ld	r8, Z
    31ba:	80 80       	ld	r8, Z
    31bc:	80 80       	ld	r8, Z
    31be:	80 80       	ld	r8, Z
    31c0:	80 80       	ld	r8, Z
    31c2:	80 80       	ld	r8, Z
    31c4:	80 80       	ld	r8, Z
    31c6:	80 80       	ld	r8, Z
    31c8:	80 80       	ld	r8, Z
    31ca:	80 80       	ld	r8, Z
    31cc:	80 80       	ld	r8, Z
    31ce:	80 80       	ld	r8, Z
    31d0:	80 80       	ld	r8, Z
    31d2:	80 80       	ld	r8, Z
    31d4:	80 80       	ld	r8, Z
    31d6:	80 80       	ld	r8, Z
    31d8:	80 80       	ld	r8, Z
    31da:	80 80       	ld	r8, Z
    31dc:	80 80       	ld	r8, Z
    31de:	80 80       	ld	r8, Z
    31e0:	80 80       	ld	r8, Z
    31e2:	80 80       	ld	r8, Z
    31e4:	80 80       	ld	r8, Z
    31e6:	80 80       	ld	r8, Z
    31e8:	80 80       	ld	r8, Z
    31ea:	80 80       	ld	r8, Z
    31ec:	80 80       	ld	r8, Z
    31ee:	80 80       	ld	r8, Z
    31f0:	80 80       	ld	r8, Z
    31f2:	80 80       	ld	r8, Z
    31f4:	80 80       	ld	r8, Z
    31f6:	80 80       	ld	r8, Z
    31f8:	80 80       	ld	r8, Z
    31fa:	80 80       	ld	r8, Z
    31fc:	80 80       	ld	r8, Z
    31fe:	80 80       	ld	r8, Z
    3200:	7f 7f       	andi	r23, 0xFF	; 255
    3202:	7f 7f       	andi	r23, 0xFF	; 255
    3204:	7f 7f       	andi	r23, 0xFF	; 255
    3206:	7f 7f       	andi	r23, 0xFF	; 255
    3208:	7f 7f       	andi	r23, 0xFF	; 255
    320a:	7f 7f       	andi	r23, 0xFF	; 255
    320c:	7f 7f       	andi	r23, 0xFF	; 255
    320e:	7f 7f       	andi	r23, 0xFF	; 255
    3210:	7f 7f       	andi	r23, 0xFF	; 255
    3212:	7f 7f       	andi	r23, 0xFF	; 255
    3214:	7f 7f       	andi	r23, 0xFF	; 255
    3216:	7f 7f       	andi	r23, 0xFF	; 255
    3218:	7f 7f       	andi	r23, 0xFF	; 255
    321a:	7f 7f       	andi	r23, 0xFF	; 255
    321c:	7f 7f       	andi	r23, 0xFF	; 255
    321e:	7f 7f       	andi	r23, 0xFF	; 255
    3220:	7f 7f       	andi	r23, 0xFF	; 255
    3222:	7f 7f       	andi	r23, 0xFF	; 255
    3224:	7f 7f       	andi	r23, 0xFF	; 255
    3226:	7f 7f       	andi	r23, 0xFF	; 255
    3228:	7f 7f       	andi	r23, 0xFF	; 255
    322a:	7f 7f       	andi	r23, 0xFF	; 255
    322c:	7f 7f       	andi	r23, 0xFF	; 255
    322e:	7f 7f       	andi	r23, 0xFF	; 255
    3230:	7f 7f       	andi	r23, 0xFF	; 255
    3232:	7f 7f       	andi	r23, 0xFF	; 255
    3234:	7f 7f       	andi	r23, 0xFF	; 255
    3236:	7f 7f       	andi	r23, 0xFF	; 255
    3238:	7f 7f       	andi	r23, 0xFF	; 255
    323a:	7f 7f       	andi	r23, 0xFF	; 255
    323c:	7f 7f       	andi	r23, 0xFF	; 255
    323e:	7f 7f       	andi	r23, 0xFF	; 255
    3240:	7f 7f       	andi	r23, 0xFF	; 255
    3242:	7f 7f       	andi	r23, 0xFF	; 255
    3244:	7f 7f       	andi	r23, 0xFF	; 255
    3246:	7f 7f       	andi	r23, 0xFF	; 255
    3248:	7f 7f       	andi	r23, 0xFF	; 255
    324a:	7f 7f       	andi	r23, 0xFF	; 255
    324c:	7f 7f       	andi	r23, 0xFF	; 255
    324e:	7f 7f       	andi	r23, 0xFF	; 255
    3250:	7f 7f       	andi	r23, 0xFF	; 255
    3252:	7f 7f       	andi	r23, 0xFF	; 255
    3254:	7f 7f       	andi	r23, 0xFF	; 255
    3256:	7f 7f       	andi	r23, 0xFF	; 255
    3258:	7f 7f       	andi	r23, 0xFF	; 255
    325a:	7f 7f       	andi	r23, 0xFF	; 255
    325c:	7f 7f       	andi	r23, 0xFF	; 255
    325e:	7f 7f       	andi	r23, 0xFF	; 255
    3260:	7f 7f       	andi	r23, 0xFF	; 255
    3262:	7f 7f       	andi	r23, 0xFF	; 255
    3264:	7f 7f       	andi	r23, 0xFF	; 255
    3266:	7f 7f       	andi	r23, 0xFF	; 255
    3268:	7f 7f       	andi	r23, 0xFF	; 255
    326a:	7f 7f       	andi	r23, 0xFF	; 255
    326c:	7f 7f       	andi	r23, 0xFF	; 255
    326e:	7f 7f       	andi	r23, 0xFF	; 255
    3270:	7f 7f       	andi	r23, 0xFF	; 255
    3272:	7f 7f       	andi	r23, 0xFF	; 255
    3274:	7f 7f       	andi	r23, 0xFF	; 255
    3276:	7f 7f       	andi	r23, 0xFF	; 255
    3278:	7f 7f       	andi	r23, 0xFF	; 255
    327a:	7f 7f       	andi	r23, 0xFF	; 255
    327c:	7f 7f       	andi	r23, 0xFF	; 255
    327e:	7f 7f       	andi	r23, 0xFF	; 255
    3280:	7f 7f       	andi	r23, 0xFF	; 255
    3282:	7f 7f       	andi	r23, 0xFF	; 255
    3284:	7f 7f       	andi	r23, 0xFF	; 255
    3286:	7f 7f       	andi	r23, 0xFF	; 255
    3288:	7f 7f       	andi	r23, 0xFF	; 255
    328a:	7f 7f       	andi	r23, 0xFF	; 255
    328c:	7f 7f       	andi	r23, 0xFF	; 255
    328e:	7f 7f       	andi	r23, 0xFF	; 255
    3290:	7f 7f       	andi	r23, 0xFF	; 255
    3292:	7f 7f       	andi	r23, 0xFF	; 255
    3294:	7f 7f       	andi	r23, 0xFF	; 255
    3296:	7f 7f       	andi	r23, 0xFF	; 255
    3298:	7f 7f       	andi	r23, 0xFF	; 255
    329a:	7f 7f       	andi	r23, 0xFF	; 255
    329c:	7f 7f       	andi	r23, 0xFF	; 255
    329e:	7f 7f       	andi	r23, 0xFF	; 255
    32a0:	7f 7f       	andi	r23, 0xFF	; 255
    32a2:	7f 7f       	andi	r23, 0xFF	; 255
    32a4:	7f 7f       	andi	r23, 0xFF	; 255
    32a6:	7f 7f       	andi	r23, 0xFF	; 255
    32a8:	7f 7f       	andi	r23, 0xFF	; 255
    32aa:	7f 7f       	andi	r23, 0xFF	; 255
    32ac:	7f 7f       	andi	r23, 0xFF	; 255
    32ae:	7f 7f       	andi	r23, 0xFF	; 255
    32b0:	7f 7f       	andi	r23, 0xFF	; 255
    32b2:	7f 7f       	andi	r23, 0xFF	; 255
    32b4:	7f 7f       	andi	r23, 0xFF	; 255
    32b6:	7f 7f       	andi	r23, 0xFF	; 255
    32b8:	7f 7f       	andi	r23, 0xFF	; 255
    32ba:	7f 7f       	andi	r23, 0xFF	; 255
    32bc:	7f 7f       	andi	r23, 0xFF	; 255
    32be:	7f 7f       	andi	r23, 0xFF	; 255
    32c0:	80 80       	ld	r8, Z
    32c2:	80 80       	ld	r8, Z
    32c4:	80 80       	ld	r8, Z
    32c6:	80 80       	ld	r8, Z
    32c8:	80 80       	ld	r8, Z
    32ca:	80 80       	ld	r8, Z
    32cc:	80 80       	ld	r8, Z
    32ce:	80 80       	ld	r8, Z
    32d0:	80 80       	ld	r8, Z
    32d2:	80 80       	ld	r8, Z
    32d4:	80 80       	ld	r8, Z
    32d6:	80 80       	ld	r8, Z
    32d8:	80 80       	ld	r8, Z
    32da:	80 80       	ld	r8, Z
    32dc:	80 80       	ld	r8, Z
    32de:	80 80       	ld	r8, Z
    32e0:	80 80       	ld	r8, Z
    32e2:	80 80       	ld	r8, Z
    32e4:	80 80       	ld	r8, Z
    32e6:	80 80       	ld	r8, Z
    32e8:	80 80       	ld	r8, Z
    32ea:	80 80       	ld	r8, Z
    32ec:	80 80       	ld	r8, Z
    32ee:	80 80       	ld	r8, Z
    32f0:	80 80       	ld	r8, Z
    32f2:	80 80       	ld	r8, Z
    32f4:	80 80       	ld	r8, Z
    32f6:	80 80       	ld	r8, Z
    32f8:	80 80       	ld	r8, Z
    32fa:	80 80       	ld	r8, Z
    32fc:	80 80       	ld	r8, Z
    32fe:	80 80       	ld	r8, Z
    3300:	03 09       	sbc	r16, r3
    3302:	13 1e       	adc	r1, r19
    3304:	28 31       	cpi	r18, 0x18	; 24
    3306:	3a 40       	sbci	r19, 0x0A	; 10
    3308:	46 4c       	sbci	r20, 0xC6	; 198
    330a:	50 54       	subi	r21, 0x40	; 64
    330c:	58 5b       	subi	r21, 0xB8	; 184
    330e:	5e 61       	ori	r21, 0x1E	; 30
    3310:	63 65       	ori	r22, 0x53	; 83
    3312:	67 69       	ori	r22, 0x97	; 151
    3314:	6b 6c       	ori	r22, 0xCB	; 203
    3316:	6e 6f       	ori	r22, 0xFE	; 254
    3318:	70 71       	andi	r23, 0x10	; 16
    331a:	72 73       	andi	r23, 0x32	; 50
    331c:	74 75       	andi	r23, 0x54	; 84
    331e:	76 77       	andi	r23, 0x76	; 118
    3320:	77 78       	andi	r23, 0x87	; 135
    3322:	79 79       	andi	r23, 0x99	; 153
    3324:	7a 7a       	andi	r23, 0xAA	; 170
    3326:	7b 7b       	andi	r23, 0xBB	; 187
    3328:	7c 7c       	andi	r23, 0xCC	; 204
    332a:	7c 7d       	andi	r23, 0xDC	; 220
    332c:	7d 7d       	andi	r23, 0xDD	; 221
    332e:	7e 7e       	andi	r23, 0xEE	; 238
    3330:	7e 7e       	andi	r23, 0xEE	; 238
    3332:	7f 7f       	andi	r23, 0xFF	; 255
    3334:	7f 7f       	andi	r23, 0xFF	; 255
    3336:	7f 7f       	andi	r23, 0xFF	; 255
    3338:	7f 7f       	andi	r23, 0xFF	; 255
    333a:	7f 7f       	andi	r23, 0xFF	; 255
    333c:	7f 7f       	andi	r23, 0xFF	; 255
    333e:	7f 7f       	andi	r23, 0xFF	; 255
    3340:	7f 7f       	andi	r23, 0xFF	; 255
    3342:	7f 7f       	andi	r23, 0xFF	; 255
    3344:	7f 7f       	andi	r23, 0xFF	; 255
    3346:	7f 7f       	andi	r23, 0xFF	; 255
    3348:	7f 7f       	andi	r23, 0xFF	; 255
    334a:	7f 7f       	andi	r23, 0xFF	; 255
    334c:	7f 7e       	andi	r23, 0xEF	; 239
    334e:	7e 7e       	andi	r23, 0xEE	; 238
    3350:	7e 7d       	andi	r23, 0xDE	; 222
    3352:	7d 7d       	andi	r23, 0xDD	; 221
    3354:	7c 7c       	andi	r23, 0xCC	; 204
    3356:	7c 7b       	andi	r23, 0xBC	; 188
    3358:	7b 7a       	andi	r23, 0xAB	; 171
    335a:	7a 79       	andi	r23, 0x9A	; 154
    335c:	79 78       	andi	r23, 0x89	; 137
    335e:	77 77       	andi	r23, 0x77	; 119
    3360:	76 75       	andi	r23, 0x56	; 86
    3362:	74 73       	andi	r23, 0x34	; 52
    3364:	72 71       	andi	r23, 0x12	; 18
    3366:	70 6f       	ori	r23, 0xF0	; 240
    3368:	6e 6c       	ori	r22, 0xCE	; 206
    336a:	6b 69       	ori	r22, 0x9B	; 155
    336c:	67 65       	ori	r22, 0x57	; 87
    336e:	63 61       	ori	r22, 0x13	; 19
    3370:	5e 5b       	subi	r21, 0xBE	; 190
    3372:	58 54       	subi	r21, 0x48	; 72
    3374:	50 4c       	sbci	r21, 0xC0	; 192
    3376:	46 40       	sbci	r20, 0x06	; 6
    3378:	3a 31       	cpi	r19, 0x1A	; 26
    337a:	28 1e       	adc	r2, r24
    337c:	13 09       	sbc	r17, r3
    337e:	03 00       	.word	0x0003	; ????
    3380:	c6 cc       	rjmp	.-1652   	; 0x2d0e <waves+0xe>
    3382:	d5 db       	rcall	.-2134   	; 0x2b2e <steptable+0x26>
    3384:	df e3       	ldi	r29, 0x3F	; 63
    3386:	e5 e7       	ldi	r30, 0x75	; 117
    3388:	e9 ea       	ldi	r30, 0xA9	; 169
    338a:	eb ec       	ldi	r30, 0xCB	; 203
    338c:	ed ee       	ldi	r30, 0xED	; 237
    338e:	ef ef       	ldi	r30, 0xFF	; 255
    3390:	f0 f0       	brcs	.+60     	; 0x33ce <waves+0x6ce>
    3392:	f0 f1       	brcs	.+124    	; 0x3410 <waves+0x710>
    3394:	f1 f1       	breq	.+124    	; 0x3412 <waves+0x712>
    3396:	f1 f2       	breq	.-68     	; 0x3354 <waves+0x654>
    3398:	f2 f2       	brmi	.-68     	; 0x3356 <waves+0x656>
    339a:	f2 f2       	brmi	.-68     	; 0x3358 <waves+0x658>
    339c:	f2 f2       	brmi	.-68     	; 0x335a <waves+0x65a>
    339e:	f2 f3       	brmi	.-4      	; 0x339c <waves+0x69c>
    33a0:	f3 f3       	brvs	.-4      	; 0x339e <waves+0x69e>
    33a2:	f3 f3       	brvs	.-4      	; 0x33a0 <waves+0x6a0>
    33a4:	f3 f3       	brvs	.-4      	; 0x33a2 <waves+0x6a2>
    33a6:	f3 f3       	brvs	.-4      	; 0x33a4 <waves+0x6a4>
    33a8:	f3 f3       	brvs	.-4      	; 0x33a6 <waves+0x6a6>
    33aa:	f3 f3       	brvs	.-4      	; 0x33a8 <waves+0x6a8>
    33ac:	f3 f3       	brvs	.-4      	; 0x33aa <waves+0x6aa>
    33ae:	f3 f3       	brvs	.-4      	; 0x33ac <waves+0x6ac>
    33b0:	f3 f3       	brvs	.-4      	; 0x33ae <waves+0x6ae>
    33b2:	f3 f3       	brvs	.-4      	; 0x33b0 <waves+0x6b0>
    33b4:	f3 f3       	brvs	.-4      	; 0x33b2 <waves+0x6b2>
    33b6:	f3 f3       	brvs	.-4      	; 0x33b4 <waves+0x6b4>
    33b8:	f3 f3       	brvs	.-4      	; 0x33b6 <waves+0x6b6>
    33ba:	f3 f3       	brvs	.-4      	; 0x33b8 <waves+0x6b8>
    33bc:	f3 f3       	brvs	.-4      	; 0x33ba <waves+0x6ba>
    33be:	f3 f3       	brvs	.-4      	; 0x33bc <waves+0x6bc>
    33c0:	f3 f3       	brvs	.-4      	; 0x33be <waves+0x6be>
    33c2:	f3 f3       	brvs	.-4      	; 0x33c0 <waves+0x6c0>
    33c4:	f3 f3       	brvs	.-4      	; 0x33c2 <waves+0x6c2>
    33c6:	f3 f3       	brvs	.-4      	; 0x33c4 <waves+0x6c4>
    33c8:	f3 f3       	brvs	.-4      	; 0x33c6 <waves+0x6c6>
    33ca:	f3 f3       	brvs	.-4      	; 0x33c8 <waves+0x6c8>
    33cc:	f3 f3       	brvs	.-4      	; 0x33ca <waves+0x6ca>
    33ce:	f3 f3       	brvs	.-4      	; 0x33cc <waves+0x6cc>
    33d0:	f3 f3       	brvs	.-4      	; 0x33ce <waves+0x6ce>
    33d2:	f3 f3       	brvs	.-4      	; 0x33d0 <waves+0x6d0>
    33d4:	f3 f3       	brvs	.-4      	; 0x33d2 <waves+0x6d2>
    33d6:	f3 f3       	brvs	.-4      	; 0x33d4 <waves+0x6d4>
    33d8:	f3 f3       	brvs	.-4      	; 0x33d6 <waves+0x6d6>
    33da:	f3 f3       	brvs	.-4      	; 0x33d8 <waves+0x6d8>
    33dc:	f3 f3       	brvs	.-4      	; 0x33da <waves+0x6da>
    33de:	f3 f3       	brvs	.-4      	; 0x33dc <waves+0x6dc>
    33e0:	f2 f2       	brmi	.-68     	; 0x339e <waves+0x69e>
    33e2:	f2 f2       	brmi	.-68     	; 0x33a0 <waves+0x6a0>
    33e4:	f2 f2       	brmi	.-68     	; 0x33a2 <waves+0x6a2>
    33e6:	f2 f2       	brmi	.-68     	; 0x33a4 <waves+0x6a4>
    33e8:	f1 f1       	breq	.+124    	; 0x3466 <waves+0x766>
    33ea:	f1 f1       	breq	.+124    	; 0x3468 <waves+0x768>
    33ec:	f0 f0       	brcs	.+60     	; 0x342a <waves+0x72a>
    33ee:	f0 ef       	ldi	r31, 0xF0	; 240
    33f0:	ef ee       	ldi	r30, 0xEF	; 239
    33f2:	ed ec       	ldi	r30, 0xCD	; 205
    33f4:	eb ea       	ldi	r30, 0xAB	; 171
    33f6:	e9 e7       	ldi	r30, 0x79	; 121
    33f8:	e5 e3       	ldi	r30, 0x35	; 53
    33fa:	df db       	rcall	.-2114   	; 0x2bba <steptable+0xb2>
    33fc:	d5 cc       	rjmp	.-1622   	; 0x2da8 <waves+0xa8>
    33fe:	c6 00       	.word	0x00c6	; ????
    3400:	00 28       	or	r0, r0
    3402:	3d 42       	sbci	r19, 0x2D	; 45
    3404:	30 2d       	mov	r19, r0
    3406:	2c 2b       	or	r18, r28
    3408:	2c 2d       	mov	r18, r12
    340a:	2e 2f       	mov	r18, r30
    340c:	30 32       	cpi	r19, 0x20	; 32
    340e:	33 35       	cpi	r19, 0x53	; 83
    3410:	37 39       	cpi	r19, 0x97	; 151
    3412:	3b 3d       	cpi	r19, 0xDB	; 219
    3414:	3f 41       	sbci	r19, 0x1F	; 31
    3416:	43 45       	sbci	r20, 0x53	; 83
    3418:	48 4a       	sbci	r20, 0xA8	; 168
    341a:	4c 4e       	sbci	r20, 0xEC	; 236
    341c:	50 53       	subi	r21, 0x30	; 48
    341e:	55 57       	subi	r21, 0x75	; 117
    3420:	59 5b       	subi	r21, 0xB9	; 185
    3422:	5d 5f       	subi	r21, 0xFD	; 253
    3424:	61 63       	ori	r22, 0x31	; 49
    3426:	65 67       	ori	r22, 0x75	; 117
    3428:	69 6b       	ori	r22, 0xB9	; 185
    342a:	6c 6e       	ori	r22, 0xEC	; 236
    342c:	70 71       	andi	r23, 0x10	; 16
    342e:	73 74       	andi	r23, 0x43	; 67
    3430:	75 77       	andi	r23, 0x75	; 117
    3432:	78 79       	andi	r23, 0x98	; 152
    3434:	7a 7b       	andi	r23, 0xBA	; 186
    3436:	7c 7d       	andi	r23, 0xDC	; 220
    3438:	7d 7e       	andi	r23, 0xED	; 237
    343a:	7e 7f       	andi	r23, 0xFE	; 254
    343c:	7f 7f       	andi	r23, 0xFF	; 255
    343e:	7f 7f       	andi	r23, 0xFF	; 255
    3440:	7f 7f       	andi	r23, 0xFF	; 255
    3442:	7f 7f       	andi	r23, 0xFF	; 255
    3444:	7f 7f       	andi	r23, 0xFF	; 255
    3446:	7e 7e       	andi	r23, 0xEE	; 238
    3448:	7d 7d       	andi	r23, 0xDD	; 221
    344a:	7c 7b       	andi	r23, 0xBC	; 188
    344c:	7a 79       	andi	r23, 0x9A	; 154
    344e:	78 77       	andi	r23, 0x78	; 120
    3450:	75 74       	andi	r23, 0x45	; 69
    3452:	73 71       	andi	r23, 0x13	; 19
    3454:	70 6e       	ori	r23, 0xE0	; 224
    3456:	6c 6b       	ori	r22, 0xBC	; 188
    3458:	69 67       	ori	r22, 0x79	; 121
    345a:	65 63       	ori	r22, 0x35	; 53
    345c:	61 5f       	subi	r22, 0xF1	; 241
    345e:	5d 5b       	subi	r21, 0xBD	; 189
    3460:	59 57       	subi	r21, 0x79	; 121
    3462:	55 53       	subi	r21, 0x35	; 53
    3464:	50 4e       	sbci	r21, 0xE0	; 224
    3466:	4c 4a       	sbci	r20, 0xAC	; 172
    3468:	48 45       	sbci	r20, 0x58	; 88
    346a:	43 41       	sbci	r20, 0x13	; 19
    346c:	3f 3d       	cpi	r19, 0xDF	; 223
    346e:	3b 39       	cpi	r19, 0x9B	; 155
    3470:	37 35       	cpi	r19, 0x57	; 87
    3472:	33 32       	cpi	r19, 0x23	; 35
    3474:	30 2f       	mov	r19, r16
    3476:	2e 2d       	mov	r18, r14
    3478:	2c 2b       	or	r18, r28
    347a:	2c 2d       	mov	r18, r12
    347c:	30 42       	sbci	r19, 0x20	; 32
    347e:	3d 28       	or	r3, r13
    3480:	00 e9       	ldi	r16, 0x90	; 144
    3482:	e5 fe       	sbrs	r14, 5
    3484:	d4 d7       	rcall	.+4008   	; 0x442e <__data_load_end+0x95e>
    3486:	d7 d7       	rcall	.+4014   	; 0x4436 <__data_load_end+0x966>
    3488:	d6 d4       	rcall	.+2476   	; 0x3e36 <__data_load_end+0x366>
    348a:	d2 d0       	rcall	.+420    	; 0x3630 <waves+0x930>
    348c:	ce cc       	rjmp	.-1636   	; 0x2e2a <waves+0x12a>
    348e:	ca c8       	rjmp	.-3692   	; 0x2624 <ProcessMusic+0x1d8>
    3490:	c6 c3       	rjmp	.+1932   	; 0x3c1e <__data_load_end+0x14e>
    3492:	c1 bf       	out	0x31, r28	; 49
    3494:	bd ba       	out	0x1d, r11	; 29
    3496:	b8 b6       	in	r11, 0x38	; 56
    3498:	b4 b1       	in	r27, 0x04	; 4
    349a:	af ad       	ldd	r26, Y+63	; 0x3f
    349c:	ab a9       	ldd	r26, Y+51	; 0x33
    349e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    34a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    34a2:	9f 9e       	mul	r9, r31
    34a4:	9c 9a       	sbi	0x13, 4	; 19
    34a6:	99 97       	sbiw	r26, 0x29	; 41
    34a8:	95 94       	asr	r9
    34aa:	93 91       	.word	0x9193	; ????
    34ac:	90 8f       	std	Z+24, r25	; 0x18
    34ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    34b0:	8b 8a       	std	Y+19, r8	; 0x13
    34b2:	89 88       	ldd	r8, Y+17	; 0x11
    34b4:	88 87       	std	Y+8, r24	; 0x08
    34b6:	86 85       	ldd	r24, Z+14	; 0x0e
    34b8:	85 84       	ldd	r8, Z+13	; 0x0d
    34ba:	84 84       	ldd	r8, Z+12	; 0x0c
    34bc:	83 83       	std	Z+3, r24	; 0x03
    34be:	83 83       	std	Z+3, r24	; 0x03
    34c0:	83 83       	std	Z+3, r24	; 0x03
    34c2:	83 83       	std	Z+3, r24	; 0x03
    34c4:	83 84       	ldd	r8, Z+11	; 0x0b
    34c6:	84 84       	ldd	r8, Z+12	; 0x0c
    34c8:	85 85       	ldd	r24, Z+13	; 0x0d
    34ca:	86 87       	std	Z+14, r24	; 0x0e
    34cc:	88 88       	ldd	r8, Y+16	; 0x10
    34ce:	89 8a       	std	Y+17, r8	; 0x11
    34d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
    34d4:	90 91 93 94 	lds	r25, 0x9493
    34d8:	95 97       	sbiw	r26, 0x25	; 37
    34da:	99 9a       	sbi	0x13, 1	; 19
    34dc:	9c 9e       	mul	r9, r28
    34de:	9f a1       	ldd	r25, Y+39	; 0x27
    34e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    34e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    34e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    34e6:	af b1       	in	r26, 0x0f	; 15
    34e8:	b4 b6       	in	r11, 0x34	; 52
    34ea:	b8 ba       	out	0x18, r11	; 24
    34ec:	bd bf       	out	0x3d, r27	; 61
    34ee:	c1 c3       	rjmp	.+1922   	; 0x3c72 <__data_load_end+0x1a2>
    34f0:	c6 c8       	rjmp	.-3700   	; 0x267e <ProcessMusic+0x232>
    34f2:	ca cc       	rjmp	.-1644   	; 0x2e88 <waves+0x188>
    34f4:	ce d0       	rcall	.+412    	; 0x3692 <waves+0x992>
    34f6:	d2 d4       	rcall	.+2468   	; 0x3e9c <__data_load_end+0x3cc>
    34f8:	d6 d7       	rcall	.+4012   	; 0x44a6 <__data_load_end+0x9d6>
    34fa:	d7 d7       	rcall	.+4014   	; 0x44aa <__data_load_end+0x9da>
    34fc:	d4 fe       	sbrs	r13, 4
    34fe:	e5 e9       	ldi	r30, 0x95	; 149
    3500:	f9 f8       	.word	0xf8f9	; ????
    3502:	f9 f5       	brne	.+126    	; 0x3582 <waves+0x882>
    3504:	eb e1       	ldi	r30, 0x1B	; 27
    3506:	dd de       	rcall	.-582    	; 0x32c2 <waves+0x5c2>
    3508:	e0 e2       	ldi	r30, 0x20	; 32
    350a:	e4 e5       	ldi	r30, 0x54	; 84
    350c:	e6 e5       	ldi	r30, 0x56	; 86
    350e:	e4 e2       	ldi	r30, 0x24	; 36
    3510:	de d9       	rcall	.-3140   	; 0x28ce <ReadVarLen+0x34>
    3512:	d2 ca       	rjmp	.-2652   	; 0x2ab8 <esmw+0x1a>
    3514:	c1 b7       	in	r28, 0x31	; 49
    3516:	ac a2       	std	Y+36, r10	; 0x24
    3518:	99 91       	ld	r25, Y+
    351a:	8a 86       	std	Y+10, r8	; 0x0a
    351c:	83 81       	ldd	r24, Z+3	; 0x03
    351e:	80 80       	ld	r8, Z
    3520:	81 82       	std	Z+1, r8	; 0x01
    3522:	83 85       	ldd	r24, Z+11	; 0x0b
    3524:	86 88       	ldd	r8, Z+22	; 0x16
    3526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    3528:	8d 8f       	std	Y+29, r24	; 0x1d
    352a:	90 92 93 95 	sts	0x9593, r9
    352e:	96 97       	sbiw	r26, 0x26	; 38
    3530:	98 99       	sbic	0x13, 0	; 19
    3532:	9a 9b       	sbis	0x13, 2	; 19
    3534:	9b 9c       	mul	r9, r11
    3536:	9d 9d       	mul	r25, r13
    3538:	9d 9e       	mul	r9, r29
    353a:	9e 9e       	mul	r9, r30
    353c:	9f 9f       	mul	r25, r31
    353e:	9f 9f       	mul	r25, r31
    3540:	9f 9f       	mul	r25, r31
    3542:	9f 9e       	mul	r9, r31
    3544:	9e 9e       	mul	r9, r30
    3546:	9d 9d       	mul	r25, r13
    3548:	9d 9c       	mul	r9, r13
    354a:	9b 9b       	sbis	0x13, 3	; 19
    354c:	9a 99       	sbic	0x13, 2	; 19
    354e:	98 97       	sbiw	r26, 0x28	; 40
    3550:	96 95       	lsr	r25
    3552:	93 92       	.word	0x9293	; ????
    3554:	90 8f       	std	Z+24, r25	; 0x18
    3556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    3558:	8a 88       	ldd	r8, Y+18	; 0x12
    355a:	86 85       	ldd	r24, Z+14	; 0x0e
    355c:	83 82       	std	Z+3, r8	; 0x03
    355e:	81 80       	ldd	r8, Z+1	; 0x01
    3560:	80 81       	ld	r24, Z
    3562:	83 86       	std	Z+11, r8	; 0x0b
    3564:	8a 91       	ld	r24, -Y
    3566:	99 a2       	std	Y+33, r9	; 0x21
    3568:	ac b7       	in	r26, 0x3c	; 60
    356a:	c1 ca       	rjmp	.-2686   	; 0x2aee <esmw+0x50>
    356c:	d2 d9       	rcall	.-3164   	; 0x2912 <TriggerCommon+0x2c>
    356e:	de e2       	ldi	r29, 0x2E	; 46
    3570:	e4 e5       	ldi	r30, 0x54	; 84
    3572:	e6 e5       	ldi	r30, 0x56	; 86
    3574:	e4 e2       	ldi	r30, 0x24	; 36
    3576:	e0 de       	rcall	.-576    	; 0x3338 <waves+0x638>
    3578:	dd e1       	ldi	r29, 0x1D	; 29
    357a:	eb f5       	brvc	.+122    	; 0x35f6 <waves+0x8f6>
    357c:	f9 f8       	.word	0xf8f9	; ????
    357e:	f9 00       	.word	0x00f9	; ????
    3580:	07 08       	sbc	r0, r7
    3582:	07 0b       	sbc	r16, r23
    3584:	15 1f       	adc	r17, r21
    3586:	23 22       	and	r2, r19
    3588:	20 1e       	adc	r2, r16
    358a:	1c 1b       	sub	r17, r28
    358c:	1a 1b       	sub	r17, r26
    358e:	1c 1e       	adc	r1, r28
    3590:	22 27       	eor	r18, r18
    3592:	2e 36       	cpi	r18, 0x6E	; 110
    3594:	3f 49       	sbci	r19, 0x9F	; 159
    3596:	54 5e       	subi	r21, 0xE4	; 228
    3598:	67 6f       	ori	r22, 0xF7	; 247
    359a:	76 7a       	andi	r23, 0xA6	; 166
    359c:	7e 7f       	andi	r23, 0xFE	; 254
    359e:	7f 7f       	andi	r23, 0xFF	; 255
    35a0:	7f 7e       	andi	r23, 0xEF	; 239
    35a2:	7d 7b       	andi	r23, 0xBD	; 189
    35a4:	7a 78       	andi	r23, 0x8A	; 138
    35a6:	76 74       	andi	r23, 0x46	; 70
    35a8:	73 71       	andi	r23, 0x13	; 19
    35aa:	70 6e       	ori	r23, 0xE0	; 224
    35ac:	6d 6b       	ori	r22, 0xBD	; 189
    35ae:	6a 69       	ori	r22, 0x9A	; 154
    35b0:	68 67       	ori	r22, 0x78	; 120
    35b2:	66 65       	ori	r22, 0x56	; 86
    35b4:	65 64       	ori	r22, 0x45	; 69
    35b6:	64 63       	ori	r22, 0x34	; 52
    35b8:	63 62       	ori	r22, 0x23	; 35
    35ba:	62 62       	ori	r22, 0x22	; 34
    35bc:	61 61       	ori	r22, 0x11	; 17
    35be:	61 61       	ori	r22, 0x11	; 17
    35c0:	61 61       	ori	r22, 0x11	; 17
    35c2:	61 62       	ori	r22, 0x21	; 33
    35c4:	62 62       	ori	r22, 0x22	; 34
    35c6:	63 63       	ori	r22, 0x33	; 51
    35c8:	63 64       	ori	r22, 0x43	; 67
    35ca:	65 65       	ori	r22, 0x55	; 85
    35cc:	66 67       	ori	r22, 0x76	; 118
    35ce:	68 69       	ori	r22, 0x98	; 152
    35d0:	6a 6b       	ori	r22, 0xBA	; 186
    35d2:	6d 6e       	ori	r22, 0xED	; 237
    35d4:	70 71       	andi	r23, 0x10	; 16
    35d6:	73 74       	andi	r23, 0x43	; 67
    35d8:	76 78       	andi	r23, 0x86	; 134
    35da:	7a 7b       	andi	r23, 0xBA	; 186
    35dc:	7d 7e       	andi	r23, 0xED	; 237
    35de:	7f 7f       	andi	r23, 0xFF	; 255
    35e0:	7f 7f       	andi	r23, 0xFF	; 255
    35e2:	7e 7a       	andi	r23, 0xAE	; 174
    35e4:	76 6f       	ori	r23, 0xF6	; 246
    35e6:	67 5e       	subi	r22, 0xE7	; 231
    35e8:	54 49       	sbci	r21, 0x94	; 148
    35ea:	3f 36       	cpi	r19, 0x6F	; 111
    35ec:	2e 27       	eor	r18, r30
    35ee:	22 1e       	adc	r2, r18
    35f0:	1c 1b       	sub	r17, r28
    35f2:	1a 1b       	sub	r17, r26
    35f4:	1c 1e       	adc	r1, r28
    35f6:	20 22       	and	r2, r16
    35f8:	23 1f       	adc	r18, r19
    35fa:	15 0b       	sbc	r17, r21
    35fc:	07 08       	sbc	r0, r7
    35fe:	07 00       	.word	0x0007	; ????
    3600:	1f 31       	cpi	r17, 0x1F	; 31
    3602:	3d 44       	sbci	r19, 0x4D	; 77
    3604:	4e 53       	subi	r20, 0x3E	; 62
    3606:	54 56       	subi	r21, 0x64	; 100
    3608:	5a 5f       	subi	r21, 0xFA	; 250
    360a:	64 69       	ori	r22, 0x94	; 148
    360c:	6e 74       	andi	r22, 0x4E	; 78
    360e:	76 79       	andi	r23, 0x96	; 150
    3610:	7c 7f       	andi	r23, 0xFC	; 252
    3612:	7f 7f       	andi	r23, 0xFF	; 255
    3614:	7f 7f       	andi	r23, 0xFF	; 255
    3616:	7f 7f       	andi	r23, 0xFF	; 255
    3618:	7f 7f       	andi	r23, 0xFF	; 255
    361a:	7f 7f       	andi	r23, 0xFF	; 255
    361c:	7f 7f       	andi	r23, 0xFF	; 255
    361e:	7f 7f       	andi	r23, 0xFF	; 255
    3620:	7f 7f       	andi	r23, 0xFF	; 255
    3622:	7f 7f       	andi	r23, 0xFF	; 255
    3624:	7f 7f       	andi	r23, 0xFF	; 255
    3626:	7f 7f       	andi	r23, 0xFF	; 255
    3628:	7f 7f       	andi	r23, 0xFF	; 255
    362a:	7f 7f       	andi	r23, 0xFF	; 255
    362c:	7f 7f       	andi	r23, 0xFF	; 255
    362e:	7f 7f       	andi	r23, 0xFF	; 255
    3630:	7f 7f       	andi	r23, 0xFF	; 255
    3632:	7f 7f       	andi	r23, 0xFF	; 255
    3634:	7f 7f       	andi	r23, 0xFF	; 255
    3636:	7f 7f       	andi	r23, 0xFF	; 255
    3638:	7f 7f       	andi	r23, 0xFF	; 255
    363a:	7f 7f       	andi	r23, 0xFF	; 255
    363c:	7f 7f       	andi	r23, 0xFF	; 255
    363e:	7f 7f       	andi	r23, 0xFF	; 255
    3640:	7f 7f       	andi	r23, 0xFF	; 255
    3642:	7f 7f       	andi	r23, 0xFF	; 255
    3644:	7f 7f       	andi	r23, 0xFF	; 255
    3646:	7f 7f       	andi	r23, 0xFF	; 255
    3648:	7f 7f       	andi	r23, 0xFF	; 255
    364a:	7f 7f       	andi	r23, 0xFF	; 255
    364c:	7f 7f       	andi	r23, 0xFF	; 255
    364e:	7f 7f       	andi	r23, 0xFF	; 255
    3650:	7f 7f       	andi	r23, 0xFF	; 255
    3652:	7f 7f       	andi	r23, 0xFF	; 255
    3654:	7f 7f       	andi	r23, 0xFF	; 255
    3656:	7f 7f       	andi	r23, 0xFF	; 255
    3658:	7f 7f       	andi	r23, 0xFF	; 255
    365a:	7f 7f       	andi	r23, 0xFF	; 255
    365c:	7f 7f       	andi	r23, 0xFF	; 255
    365e:	7f 7f       	andi	r23, 0xFF	; 255
    3660:	7f 7f       	andi	r23, 0xFF	; 255
    3662:	7f 7f       	andi	r23, 0xFF	; 255
    3664:	7f 7f       	andi	r23, 0xFF	; 255
    3666:	7f 7f       	andi	r23, 0xFF	; 255
    3668:	7f 7f       	andi	r23, 0xFF	; 255
    366a:	7f 7f       	andi	r23, 0xFF	; 255
    366c:	7f 7f       	andi	r23, 0xFF	; 255
    366e:	7f 7f       	andi	r23, 0xFF	; 255
    3670:	7f 7f       	andi	r23, 0xFF	; 255
    3672:	7f 7f       	andi	r23, 0xFF	; 255
    3674:	7f 7f       	andi	r23, 0xFF	; 255
    3676:	7f 7f       	andi	r23, 0xFF	; 255
    3678:	7f 7f       	andi	r23, 0xFF	; 255
    367a:	7f 7c       	andi	r23, 0xCF	; 207
    367c:	78 71       	andi	r23, 0x18	; 24
    367e:	68 4c       	sbci	r22, 0xC8	; 200
    3680:	2c 1c       	adc	r2, r12
    3682:	12 0c       	add	r1, r2
    3684:	0a 0b       	sbc	r16, r26
    3686:	0a 05       	cpc	r16, r10
    3688:	fd f3       	brhs	.-2      	; 0x3688 <waves+0x988>
    368a:	e9 df       	rcall	.-46     	; 0x365e <waves+0x95e>
    368c:	d4 ca       	rjmp	.-2648   	; 0x2c36 <steptable+0x12e>
    368e:	c0 b7       	in	r28, 0x30	; 48
    3690:	ae a6       	std	Y+46, r10	; 0x2e
    3692:	9e 97       	sbiw	r26, 0x2e	; 46
    3694:	91 8b       	std	Z+17, r25	; 0x11
    3696:	86 85       	ldd	r24, Z+14	; 0x0e
    3698:	82 80       	ldd	r8, Z+2	; 0x02
    369a:	80 80       	ld	r8, Z
    369c:	80 80       	ld	r8, Z
    369e:	80 80       	ld	r8, Z
    36a0:	80 80       	ld	r8, Z
    36a2:	80 80       	ld	r8, Z
    36a4:	80 80       	ld	r8, Z
    36a6:	80 80       	ld	r8, Z
    36a8:	80 80       	ld	r8, Z
    36aa:	80 80       	ld	r8, Z
    36ac:	80 80       	ld	r8, Z
    36ae:	80 80       	ld	r8, Z
    36b0:	80 80       	ld	r8, Z
    36b2:	80 80       	ld	r8, Z
    36b4:	80 80       	ld	r8, Z
    36b6:	80 80       	ld	r8, Z
    36b8:	80 80       	ld	r8, Z
    36ba:	80 80       	ld	r8, Z
    36bc:	80 80       	ld	r8, Z
    36be:	80 80       	ld	r8, Z
    36c0:	80 80       	ld	r8, Z
    36c2:	80 80       	ld	r8, Z
    36c4:	80 80       	ld	r8, Z
    36c6:	80 80       	ld	r8, Z
    36c8:	80 80       	ld	r8, Z
    36ca:	80 80       	ld	r8, Z
    36cc:	80 80       	ld	r8, Z
    36ce:	80 80       	ld	r8, Z
    36d0:	80 80       	ld	r8, Z
    36d2:	80 80       	ld	r8, Z
    36d4:	80 80       	ld	r8, Z
    36d6:	80 80       	ld	r8, Z
    36d8:	80 80       	ld	r8, Z
    36da:	80 80       	ld	r8, Z
    36dc:	80 80       	ld	r8, Z
    36de:	80 80       	ld	r8, Z
    36e0:	80 80       	ld	r8, Z
    36e2:	80 80       	ld	r8, Z
    36e4:	80 80       	ld	r8, Z
    36e6:	80 80       	ld	r8, Z
    36e8:	80 80       	ld	r8, Z
    36ea:	80 80       	ld	r8, Z
    36ec:	80 80       	ld	r8, Z
    36ee:	80 80       	ld	r8, Z
    36f0:	80 80       	ld	r8, Z
    36f2:	80 80       	ld	r8, Z
    36f4:	80 87       	std	Z+8, r24	; 0x08
    36f6:	91 9d       	mul	r25, r1
    36f8:	ac c4       	rjmp	.+2392   	; 0x4052 <__data_load_end+0x582>
    36fa:	cb d4       	rcall	.+2454   	; 0x4092 <__data_load_end+0x5c2>
    36fc:	dd f2       	brhs	.-74     	; 0x36b4 <waves+0x9b4>
    36fe:	fa fa       	.word	0xfafa	; ????

00003700 <DisplayLogo>:
	#endif

	 

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    3700:	08 95       	ret

00003702 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){}
    3702:	08 95       	ret

00003704 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){		
		ProcessFading();
    3704:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <ProcessFading>

00003708 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	06 2f       	mov	r16, r22
    3712:	c4 2f       	mov	r28, r20
    3714:	d5 2f       	mov	r29, r21
    3716:	18 2f       	mov	r17, r24
    3718:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    371a:	fe 01       	movw	r30, r28
    371c:	44 91       	lpm	r20, Z
		if(c!=0){
    371e:	44 23       	and	r20, r20
    3720:	49 f0       	breq	.+18     	; 0x3734 <Print+0x2c>
			c=((c&127)-32);			
    3722:	4f 77       	andi	r20, 0x7F	; 127
    3724:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    3726:	60 2f       	mov	r22, r16
    3728:	8c 2f       	mov	r24, r28
    372a:	81 0f       	add	r24, r17
    372c:	0e 94 b4 10 	call	0x2168	; 0x2168 <SetFont>
    3730:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    3732:	f3 cf       	rjmp	.-26     	; 0x371a <Print+0x12>
	
}
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	1f 91       	pop	r17
    373a:	0f 91       	pop	r16
    373c:	08 95       	ret

0000373e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    373e:	40 52       	subi	r20, 0x20	; 32
    3740:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <SetFont>

00003744 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    3744:	80 91 93 09 	lds	r24, 0x0993
    3748:	88 23       	and	r24, r24
    374a:	01 f1       	breq	.+64     	; 0x378c <ProcessFading+0x48>
		if(currFadeFrame==0){
    374c:	80 91 94 09 	lds	r24, 0x0994
    3750:	81 11       	cpse	r24, r1
    3752:	19 c0       	rjmp	.+50     	; 0x3786 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    3754:	80 91 91 09 	lds	r24, 0x0991
    3758:	80 93 94 09 	sts	0x0994, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    375c:	e0 91 95 09 	lds	r30, 0x0995
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	e5 52       	subi	r30, 0x25	; 37
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	e4 91       	lpm	r30, Z
    3768:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    376a:	90 91 92 09 	lds	r25, 0x0992
    376e:	80 91 95 09 	lds	r24, 0x0995
    3772:	89 0f       	add	r24, r25
    3774:	80 93 95 09 	sts	0x0995, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    3778:	88 23       	and	r24, r24
    377a:	11 f0       	breq	.+4      	; 0x3780 <ProcessFading+0x3c>
    377c:	8d 30       	cpi	r24, 0x0D	; 13
    377e:	31 f4       	brne	.+12     	; 0x378c <ProcessFading+0x48>
				fadeActive=false;
    3780:	10 92 93 09 	sts	0x0993, r1
    3784:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    3786:	81 50       	subi	r24, 0x01	; 1
    3788:	80 93 94 09 	sts	0x0994, r24
    378c:	08 95       	ret

0000378e <mmcSkipBytes>:
.global mmcGetInt
.global mmcGetChar

.section .text.mmcSkipBytes
mmcSkipBytes:
	movw	r22, r24
    378e:	bc 01       	movw	r22, r24

00003790 <mmcSkipBytesLoop>:

mmcSkipBytesLoop:
	rcall	mmc_get_byte
    3790:	0e d0       	rcall	.+28     	; 0x37ae <mmcGetChar>
	subi	r22, 1
    3792:	61 50       	subi	r22, 0x01	; 1
	sbci	r23, 0
    3794:	70 40       	sbci	r23, 0x00	; 0
	brne	mmcSkipBytesLoop
    3796:	e1 f7       	brne	.-8      	; 0x3790 <mmcSkipBytesLoop>
	ret
    3798:	08 95       	ret

0000379a <mmcGetLong>:

.section .text.mmcGetLong
mmcGetLong:
	rcall	mmc_get_byte		; First byte from SD card straight to R22
    379a:	09 d0       	rcall	.+18     	; 0x37ae <mmcGetChar>
    mov		r22, r24
    379c:	68 2f       	mov	r22, r24
	rcall	mmc_get_byte		; Second byte from SD card straight to R23
    379e:	07 d0       	rcall	.+14     	; 0x37ae <mmcGetChar>
    mov		r23, r24
    37a0:	78 2f       	mov	r23, r24

000037a2 <mmcGetInt>:
								; Fall through to GetInt to receive 3rd and 4th bytes
.section .text.mmcGetInt
mmcGetInt:
	rcall	mmc_get_byte		; First byte from SD card to temp location in R20 (3rd byte of GetLong)
    37a2:	05 d0       	rcall	.+10     	; 0x37ae <mmcGetChar>
    mov		r20, r24
    37a4:	48 2f       	mov	r20, r24
    rcall	mmc_get_byte		; Second byte from SD card to temp location in R21 (4th byte of GetLong)
    37a6:	03 d0       	rcall	.+6      	; 0x37ae <mmcGetChar>
    mov		r21, r24
    37a8:	58 2f       	mov	r21, r24
    movw	r24, r20			; Move R20:21 to the R24:25 location C is expecting it
    37aa:	ca 01       	movw	r24, r20
    ret
    37ac:	08 95       	ret

000037ae <mmcGetChar>:
.section .text.mmcGetChar		; Simple fall through to get_byte
mmcGetChar:

.section .text.mmc_get_byte
mmc_get_byte:
	rcall	spibyte_ff
    37ae:	12 d0       	rcall	.+36     	; 0x37d4 <spibyte_ff>

	lds		r31, byte_count+0
    37b0:	f0 91 22 09 	lds	r31, 0x0922
	lds		r30, byte_count+1
    37b4:	e0 91 23 09 	lds	r30, 0x0923
	adiw	r30, 1
    37b8:	31 96       	adiw	r30, 0x01	; 1
	sts		byte_count+1, r30
    37ba:	e0 93 23 09 	sts	0x0923, r30

	cpi		r31, 0x02
    37be:	f2 30       	cpi	r31, 0x02	; 2
	breq	hit_512_boundary
    37c0:	19 f0       	breq	.+6      	; 0x37c8 <hit_512_boundary>

	sts		byte_count+0, r31
    37c2:	f0 93 22 09 	sts	0x0922, r31

	ret
    37c6:	08 95       	ret

000037c8 <hit_512_boundary>:

hit_512_boundary:
	sts		byte_count+0, r30
    37c8:	e0 93 22 09 	sts	0x0922, r30

	push	r24
    37cc:	8f 93       	push	r24
	rcall	mmc_datatoken
    37ce:	11 d0       	rcall	.+34     	; 0x37f2 <mmc_datatoken>
	pop		r24
    37d0:	8f 91       	pop	r24
	ret
    37d2:	08 95       	ret

000037d4 <spibyte_ff>:
; C callable
; in r24: byte to send
; returns: byte read
.section .text.spibyte_ff
spibyte_ff:
	ldi r24,0xff
    37d4:	8f ef       	ldi	r24, 0xFF	; 255

000037d6 <spi_byte>:

.section .text.spi_byte
spi_byte:
    out 	_SFR_IO_ADDR(SPDR),r24
    37d6:	8e bd       	out	0x2e, r24	; 46

000037d8 <spi_byte_wait>:
spi_byte_wait:
    in		r24,_SFR_IO_ADDR(SPSR)
    37d8:	8d b5       	in	r24, 0x2d	; 45
	sbrs	r24,SPIF
    37da:	87 ff       	sbrs	r24, 7
    rjmp	spi_byte_wait
    37dc:	fd cf       	rjmp	.-6      	; 0x37d8 <spi_byte_wait>
    in		r24,_SFR_IO_ADDR(SPDR)
    37de:	8e b5       	in	r24, 0x2e	; 46
    ret
    37e0:	08 95       	ret

000037e2 <mmc_get>:
; C callable
; in: void
; returns: byte read
.section .text.mmc_get
mmc_get:
	ser r30
    37e2:	ef ef       	ldi	r30, 0xFF	; 255
	ser r31
    37e4:	ff ef       	ldi	r31, 0xFF	; 255

000037e6 <mmc_get_wait>:
mmc_get_wait:
	sbiw r30,1
    37e6:	31 97       	sbiw	r30, 0x01	; 1
	breq mmc_get_end
    37e8:	19 f0       	breq	.+6      	; 0x37f0 <mmc_get_end>
    rcall spibyte_ff
    37ea:	f4 df       	rcall	.-24     	; 0x37d4 <spibyte_ff>
    cpi r24,0xff
    37ec:	8f 3f       	cpi	r24, 0xFF	; 255
    breq mmc_get_wait
    37ee:	d9 f3       	breq	.-10     	; 0x37e6 <mmc_get_wait>

000037f0 <mmc_get_end>:
mmc_get_end:    
	ret
    37f0:	08 95       	ret

000037f2 <mmc_datatoken>:
; C callable
; in: void 
; returns: token
.section .text.mmc_datatoken
mmc_datatoken:   
	ser r30
    37f2:	ef ef       	ldi	r30, 0xFF	; 255
	ser r31
    37f4:	ff ef       	ldi	r31, 0xFF	; 255

000037f6 <mmc_datatoken_loop>:
mmc_datatoken_loop: 
	sbiw r30,1
    37f6:	31 97       	sbiw	r30, 0x01	; 1
	breq mmc_datatoken_end
    37f8:	19 f0       	breq	.+6      	; 0x3800 <mmc_datatoken_end>
    rcall spibyte_ff
    37fa:	ec df       	rcall	.-40     	; 0x37d4 <spibyte_ff>
    cpi r24,0xfe
    37fc:	8e 3f       	cpi	r24, 0xFE	; 254
	brne mmc_datatoken_loop
    37fe:	d9 f7       	brne	.-10     	; 0x37f6 <mmc_datatoken_loop>

00003800 <mmc_datatoken_end>:
mmc_datatoken_end:
    ret
    3800:	08 95       	ret

00003802 <mmc_clock_and_release>:
; C callable
;
.section .text.mmc_clock_and_release
mmc_clock_and_release:

    ldi r25,10
    3802:	9a e0       	ldi	r25, 0x0A	; 10

00003804 <clock_loop>:
clock_loop:
    rcall spibyte_ff              ; 80 clocks for power stabilization
    3804:	e7 df       	rcall	.-50     	; 0x37d4 <spibyte_ff>
    dec r25
    3806:	9a 95       	dec	r25
    brne clock_loop
    3808:	e9 f7       	brne	.-6      	; 0x3804 <clock_loop>
	
	;release SPI
    in r24,_SFR_IO_ADDR(MMC_CS_PORT)
    380a:	8b b1       	in	r24, 0x0b	; 11
    ori r24,(1 << MMC_CS)
    380c:	80 64       	ori	r24, 0x40	; 64
    out _SFR_IO_ADDR(MMC_CS_PORT),r24
    380e:	8b b9       	out	0x0b, r24	; 11
    ret
    3810:	08 95       	ret

00003812 <mmc_send_command_no_address>:

.section .text.mmc_send_command
mmc_send_command_no_address:

	ldi		r20, 0
    3812:	40 e0       	ldi	r20, 0x00	; 0
	ldi		r21, 0
    3814:	50 e0       	ldi	r21, 0x00	; 0
	movw	r22, r20
    3816:	ba 01       	movw	r22, r20

00003818 <mmc_send_command>:
; C callable 
; r24 = command
; r23:r22 = px
; r21:r20 = py
mmc_send_command:
    in r25,_SFR_IO_ADDR(MMC_CS_PORT)
    3818:	9b b1       	in	r25, 0x0b	; 11
    andi r25,~(1 << MMC_CS)
    381a:	9f 7b       	andi	r25, 0xBF	; 191
    out _SFR_IO_ADDR(MMC_CS_PORT),r25  ; enable CS
    381c:	9b b9       	out	0x0b, r25	; 11

    mov r25,r24 	; save command
    381e:	98 2f       	mov	r25, r24
    rcall spibyte_ff ; send dummy byte    
    3820:	d9 df       	rcall	.-78     	; 0x37d4 <spibyte_ff>

    mov r24,r25  ; restore command
    3822:	89 2f       	mov	r24, r25
	ori r24,0x40
    3824:	80 64       	ori	r24, 0x40	; 64
    rcall spi_byte ; send command 
    3826:	d7 df       	rcall	.-82     	; 0x37d6 <spi_byte>

    mov r24,r23
    3828:	87 2f       	mov	r24, r23
    rcall spi_byte ; high x    
    382a:	d5 df       	rcall	.-86     	; 0x37d6 <spi_byte>

    mov r24,r22
    382c:	86 2f       	mov	r24, r22
    rcall spi_byte ; low x
    382e:	d3 df       	rcall	.-90     	; 0x37d6 <spi_byte>
    
	mov r24,r21
    3830:	85 2f       	mov	r24, r21
    rcall spi_byte ; high y    
    3832:	d1 df       	rcall	.-94     	; 0x37d6 <spi_byte>
    
	mov r24,r20
    3834:	84 2f       	mov	r24, r20
    rcall spi_byte ; low y
    3836:	cf df       	rcall	.-98     	; 0x37d6 <spi_byte>
 
    
    ldi r24,0x95 ; correct CRC for first command in SPI 
    3838:	85 e9       	ldi	r24, 0x95	; 149
    rcall spi_byte ; after that CRC is ignored, so no problem with always sending 0x95
    383a:	cd df       	rcall	.-102    	; 0x37d6 <spi_byte>
       
    rcall spibyte_ff ; ignore return byte
    383c:	cb df       	rcall	.-106    	; 0x37d4 <spibyte_ff>
    ret
    383e:	08 95       	ret

00003840 <mmc_init_no_buffer>:
;

.section .text.mmc_init_no_buffer
mmc_init_no_buffer:
	;setup I/O ports 
    in r24,_SFR_IO_ADDR(SPI_PORT)
    3840:	85 b1       	in	r24, 0x05	; 5
    andi r24,~((1 << MMC_SCK) | (1 << MMC_MOSI)) 
    3842:	8f 75       	andi	r24, 0x5F	; 95
    ori r24,(1 << MMC_MISO)
    3844:	80 64       	ori	r24, 0x40	; 64
    out _SFR_IO_ADDR(SPI_PORT),r24
    3846:	85 b9       	out	0x05, r24	; 5
    
    in r24,_SFR_IO_ADDR(SPI_DDR)
    3848:	84 b1       	in	r24, 0x04	; 4
    ori r24,(1<<MMC_SCK) | (1<<MMC_MOSI)
    384a:	80 6a       	ori	r24, 0xA0	; 160
    out _SFR_IO_ADDR(SPI_DDR),r24
    384c:	84 b9       	out	0x04, r24	; 4
    
	sbi	_SFR_IO_ADDR(MMC_CS_PORT), MMC_CS	;Initial level is high
    384e:	5e 9a       	sbi	0x0b, 6	; 11
	sbi	_SFR_IO_ADDR(MMC_CS_DIR), MMC_CS	;Direction is output
    3850:	56 9a       	sbi	0x0a, 6	; 10
	sbi	_SFR_IO_ADDR(SPI_DDR), 0
    3852:	20 9a       	sbi	0x04, 0	; 4
    
    ldi r24,(1<<MSTR)|(1<<SPE)   			;enable SPI interface
    3854:	80 e5       	ldi	r24, 0x50	; 80
    out _SFR_IO_ADDR(SPCR),r24    
    3856:	8c bd       	out	0x2c, r24	; 44
    ldi r24,1
    3858:	81 e0       	ldi	r24, 0x01	; 1
    out _SFR_IO_ADDR(SPSR),r24              ;set double speed	
    385a:	8d bd       	out	0x2d, r24	; 45

    
	; 80 clocks for power stabilization
    ldi r25,10
    385c:	9a e0       	ldi	r25, 0x0A	; 10

0000385e <mmcinit_power_loop>:
mmcinit_power_loop:
    rcall spibyte_ff              
    385e:	ba df       	rcall	.-140    	; 0x37d4 <spibyte_ff>
    dec r25
    3860:	9a 95       	dec	r25
    brne mmcinit_power_loop
    3862:	e9 f7       	brne	.-6      	; 0x385e <mmcinit_power_loop>

 	;issue card reset
    ldi r24,CMD_RESET
    3864:	80 e0       	ldi	r24, 0x00	; 0
    rcall mmc_send_command_no_address
    3866:	d5 df       	rcall	.-86     	; 0x3812 <mmc_send_command_no_address>


    rcall mmc_get
    3868:	bc df       	rcall	.-136    	; 0x37e2 <mmc_get>
    cpi r24,0x01
    386a:	81 30       	cpi	r24, 0x01	; 1
    breq mmcinit_card_detected
    386c:	19 f0       	breq	.+6      	; 0x3874 <mmcinit_card_detected>
    
	;invalid response code returned
    ;return error code since the card cannot be detected
	rcall mmc_clock_and_release
    386e:	c9 df       	rcall	.-110    	; 0x3802 <mmc_clock_and_release>
	ldi r24,1
    3870:	81 e0       	ldi	r24, 0x01	; 1
    ret
    3872:	08 95       	ret

00003874 <mmcinit_card_detected>:

mmcinit_card_detected:
    ;send CMD1 until we get a 0 back, indicating card is done initializing 

mmcinit_cmd1_loop:
    rcall spibyte_ff    
    3874:	af df       	rcall	.-162    	; 0x37d4 <spibyte_ff>
    cpi r24,0
    3876:	80 30       	cpi	r24, 0x00	; 0
    breq mmcinit_cmd1_done
    3878:	19 f0       	breq	.+6      	; 0x3880 <mmcinit_cmd1_done>
	ldi r24,CMD_INIT
    387a:	81 e0       	ldi	r24, 0x01	; 1
    rcall mmc_send_command_no_address
    387c:	ca df       	rcall	.-108    	; 0x3812 <mmc_send_command_no_address>
	rjmp mmcinit_cmd1_loop
    387e:	fa cf       	rjmp	.-12     	; 0x3874 <mmcinit_card_detected>

00003880 <mmcinit_cmd1_done>:

mmcinit_cmd1_done:
	rcall mmc_clock_and_release
    3880:	c0 df       	rcall	.-128    	; 0x3802 <mmc_clock_and_release>
    ret
    3882:	08 95       	ret

00003884 <mmc_cuesector>:
mmc_cuesector:
	;Regular SD needs bytes adress
	;shift sector value by 9 bits (*512)

	;shift <<8
	clr r20
    3884:	44 27       	eor	r20, r20
	mov r21,r22
    3886:	56 2f       	mov	r21, r22
	mov r22,r23
    3888:	67 2f       	mov	r22, r23
	mov r23,r24
    388a:	78 2f       	mov	r23, r24

	;shift one more bit to finish up the 512 multiplier
	lsl r21
    388c:	55 0f       	add	r21, r21
	rol r22
    388e:	66 1f       	adc	r22, r22
	rol r23
    3890:	77 1f       	adc	r23, r23

	;call read block command with lba argument in-place
    ldi r24,CMD_READMULTIBLOCK
    3892:	82 e1       	ldi	r24, 0x12	; 18
    rcall mmc_send_command
    3894:	c1 df       	rcall	.-126    	; 0x3818 <mmc_send_command>

    rcall mmc_datatoken				; wait for data token
    3896:	ad df       	rcall	.-166    	; 0x37f2 <mmc_datatoken>
	cpi r24,0xfe
    3898:	8e 3f       	cpi	r24, 0xFE	; 254
    breq mmc_cuesector_end			; if data token received cue_sector succeded
    389a:	19 f0       	breq	.+6      	; 0x38a2 <mmc_cuesector_end>

									; other wise there was an error and we need to
	rcall mmc_clock_and_release		; release the SD card bus
    389c:	b2 df       	rcall	.-156    	; 0x3802 <mmc_clock_and_release>
	ldi r24,0xff					; return fail
    389e:	8f ef       	ldi	r24, 0xFF	; 255
	ret
    38a0:	08 95       	ret

000038a2 <mmc_cuesector_end>:

mmc_cuesector_end:
    clr		r24						; return success
    38a2:	88 27       	eor	r24, r24
	sts		byte_count+0, r24		; Reset byte-in-sector counter to zero
    38a4:	80 93 22 09 	sts	0x0922, r24
	sts		byte_count+1, r24
    38a8:	80 93 23 09 	sts	0x0923, r24
    ret
    38ac:	08 95       	ret

000038ae <mmc_stoptransmission>:

.section .text.mmc_stoptransmission
mmc_stoptransmission:
    ldi		r24, CMD_STOPTRANSMISSION
    38ae:	8c e0       	ldi	r24, 0x0C	; 12
    rcall	mmc_send_command_no_address
    38b0:	b0 df       	rcall	.-160    	; 0x3812 <mmc_send_command_no_address>
	rcall spibyte_ff
    38b2:	90 df       	rcall	.-224    	; 0x37d4 <spibyte_ff>
	ret
    38b4:	08 95       	ret

000038b6 <findFileFirstSector>:
#include <avr/interrupt.h>
#include "mmc.h"
#include "fat.h"


long findFileFirstSector(char *fileName){
    38b6:	4f 92       	push	r4
    38b8:	5f 92       	push	r5
    38ba:	6f 92       	push	r6
    38bc:	7f 92       	push	r7
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	8c 01       	movw	r16, r24
	mmc_init_no_buffer();
    38d8:	0e 94 20 1c 	call	0x3840	; 0x3840 <mmc_init_no_buffer>
	mmc_cuesector(0x000);					// Get the first sector of the SD card.  This is where the MBR is
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	cb 01       	movw	r24, r22
    38e2:	0e 94 42 1c 	call	0x3884	; 0x3884 <mmc_cuesector>

	mmcSkipBytes(offsetof(MBR, partition1)+ offsetof(PartitionEntry, startSector));			// Skip the execCode and a few other bytes
    38e6:	86 ec       	ldi	r24, 0xC6	; 198
    38e8:	91 e0       	ldi	r25, 0x01	; 1
    38ea:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>

	long bootRecordSector = mmcGetLong();   // Read the sector that the boot record starts at
    38ee:	0e 94 cd 1b 	call	0x379a	; 0x379a <mmcGetLong>
    38f2:	4b 01       	movw	r8, r22
    38f4:	5c 01       	movw	r10, r24

	mmc_stoptransmission();					// stop reading the MBR
    38f6:	0e 94 57 1c 	call	0x38ae	; 0x38ae <mmc_stoptransmission>
	mmc_cuesector(bootRecordSector);		// and start reading the boot record
    38fa:	c5 01       	movw	r24, r10
    38fc:	b4 01       	movw	r22, r8
    38fe:	0e 94 42 1c 	call	0x3884	; 0x3884 <mmc_cuesector>

	mmcSkipBytes(offsetof(BootRecord, bytesPerSector));
    3902:	8b e0       	ldi	r24, 0x0B	; 11
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>

	int  bytesPerSector    = mmcGetInt();
    390a:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <mmcGetInt>
    390e:	7c 01       	movw	r14, r24
	char sectorsPerCluster = mmcGetChar();
    3910:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mmcGetChar>
    3914:	78 2e       	mov	r7, r24
	int  reservedSectors   = mmcGetInt();
    3916:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <mmcGetInt>
    391a:	6c 01       	movw	r12, r24
	mmcSkipBytes(1);
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>
	int  maxRootDirectoryEntries = mmcGetInt();
    3924:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <mmcGetInt>
    3928:	ec 01       	movw	r28, r24
	mmcSkipBytes(3);
    392a:	83 e0       	ldi	r24, 0x03	; 3
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>
	int sectorsPerFat = mmcGetInt();
    3932:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <mmcGetInt>

	long dirTableSector = bootRecordSector + reservedSectors + (sectorsPerFat * 2);
    3936:	a6 01       	movw	r20, r12
    3938:	66 27       	eor	r22, r22
    393a:	57 fd       	sbrc	r21, 7
    393c:	60 95       	com	r22
    393e:	76 2f       	mov	r23, r22
    3940:	48 0d       	add	r20, r8
    3942:	59 1d       	adc	r21, r9
    3944:	6a 1d       	adc	r22, r10
    3946:	7b 1d       	adc	r23, r11
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	4c 01       	movw	r8, r24
    394e:	aa 24       	eor	r10, r10
    3950:	97 fc       	sbrc	r9, 7
    3952:	a0 94       	com	r10
    3954:	ba 2c       	mov	r11, r10
    3956:	84 0e       	add	r8, r20
    3958:	95 1e       	adc	r9, r21
    395a:	a6 1e       	adc	r10, r22
    395c:	b7 1e       	adc	r11, r23

	mmc_stoptransmission();
    395e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <mmc_stoptransmission>
	mmc_cuesector(dirTableSector);
    3962:	c5 01       	movw	r24, r10
    3964:	b4 01       	movw	r22, r8
    3966:	0e 94 42 1c 	call	0x3884	; 0x3884 <mmc_cuesector>
    396a:	68 01       	movw	r12, r16
    396c:	2b e0       	ldi	r18, 0x0B	; 11
    396e:	c2 0e       	add	r12, r18
    3970:	d1 1c       	adc	r13, r1
    3972:	28 01       	movw	r4, r16
#include <avr/interrupt.h>
#include "mmc.h"
#include "fat.h"


long findFileFirstSector(char *fileName){
    3974:	66 24       	eor	r6, r6
    3976:	63 94       	inc	r6
			mmcSkipBytes(21);
			fileFound = 1;
		}

		for(uint8_t i = 0; i<11; i++){
			if(mmc_get_byte() != fileName[i]) fileFound = 0;
    3978:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mmcGetChar>
    397c:	f2 01       	movw	r30, r4
    397e:	21 91       	ld	r18, Z+
    3980:	2f 01       	movw	r4, r30
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	33 27       	eor	r19, r19
    3986:	27 fd       	sbrc	r18, 7
    3988:	30 95       	com	r19
    398a:	82 17       	cp	r24, r18
    398c:	93 07       	cpc	r25, r19
    398e:	09 f0       	breq	.+2      	; 0x3992 <findFileFirstSector+0xdc>
    3990:	61 2c       	mov	r6, r1
		if(fileFound == 0) {
			mmcSkipBytes(21);
			fileFound = 1;
		}

		for(uint8_t i = 0; i<11; i++){
    3992:	4c 14       	cp	r4, r12
    3994:	5d 04       	cpc	r5, r13
    3996:	81 f7       	brne	.-32     	; 0x3978 <findFileFirstSector+0xc2>
			if(mmc_get_byte() != fileName[i]) fileFound = 0;
		}

	} while (fileFound == 0);
    3998:	61 10       	cpse	r6, r1
    399a:	05 c0       	rjmp	.+10     	; 0x39a6 <findFileFirstSector+0xf0>

	uint8_t fileFound = 1;

	do {
		if(fileFound == 0) {
			mmcSkipBytes(21);
    399c:	85 e1       	ldi	r24, 0x15	; 21
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>
    39a4:	e6 cf       	rjmp	.-52     	; 0x3972 <findFileFirstSector+0xbc>
			if(mmc_get_byte() != fileName[i]) fileFound = 0;
		}

	} while (fileFound == 0);

	mmcSkipBytes(15);
    39a6:	8f e0       	ldi	r24, 0x0F	; 15
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 c7 1b 	call	0x378e	; 0x378e <mmcSkipBytes>

	int firstCluster = mmcGetInt();
    39ae:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <mmcGetInt>
    39b2:	8c 01       	movw	r16, r24

	mmc_stoptransmission();
    39b4:	0e 94 57 1c 	call	0x38ae	; 0x38ae <mmc_stoptransmission>

	return(dirTableSector+((maxRootDirectoryEntries * 32)/bytesPerSector)+((firstCluster-2)*sectorsPerCluster));
    39b8:	ce 01       	movw	r24, r28
    39ba:	25 e0       	ldi	r18, 0x05	; 5
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	2a 95       	dec	r18
    39c2:	e1 f7       	brne	.-8      	; 0x39bc <findFileFirstSector+0x106>
    39c4:	b7 01       	movw	r22, r14
    39c6:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__divmodhi4>
    39ca:	cb 01       	movw	r24, r22
    39cc:	aa 27       	eor	r26, r26
    39ce:	97 fd       	sbrc	r25, 7
    39d0:	a0 95       	com	r26
    39d2:	ba 2f       	mov	r27, r26
    39d4:	88 0e       	add	r8, r24
    39d6:	99 1e       	adc	r9, r25
    39d8:	aa 1e       	adc	r10, r26
    39da:	bb 1e       	adc	r11, r27
    39dc:	02 50       	subi	r16, 0x02	; 2
    39de:	11 09       	sbc	r17, r1
    39e0:	27 2d       	mov	r18, r7
    39e2:	20 03       	mulsu	r18, r16
    39e4:	a0 01       	movw	r20, r0
    39e6:	21 9f       	mul	r18, r17
    39e8:	50 0d       	add	r21, r0
    39ea:	11 24       	eor	r1, r1
    39ec:	66 27       	eor	r22, r22
    39ee:	57 fd       	sbrc	r21, 7
    39f0:	60 95       	com	r22
    39f2:	76 2f       	mov	r23, r22
    39f4:	cb 01       	movw	r24, r22
    39f6:	ba 01       	movw	r22, r20
    39f8:	68 0d       	add	r22, r8
    39fa:	79 1d       	adc	r23, r9
    39fc:	8a 1d       	adc	r24, r10
    39fe:	9b 1d       	adc	r25, r11
}
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	bf 90       	pop	r11
    3a12:	af 90       	pop	r10
    3a14:	9f 90       	pop	r9
    3a16:	8f 90       	pop	r8
    3a18:	7f 90       	pop	r7
    3a1a:	6f 90       	pop	r6
    3a1c:	5f 90       	pop	r5
    3a1e:	4f 90       	pop	r4
    3a20:	08 95       	ret

00003a22 <main>:


int main(){

int sectorStart;
sectorStart = findFileFirstSector("HELLWRLDTXT");
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	91 e0       	ldi	r25, 0x01	; 1
    3a26:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <findFileFirstSector>
mmc_cuesector(sectorStart);
    3a2a:	88 27       	eor	r24, r24
    3a2c:	77 fd       	sbrc	r23, 7
    3a2e:	80 95       	com	r24
    3a30:	98 2f       	mov	r25, r24
    3a32:	0e 94 42 1c 	call	0x3884	; 0x3884 <mmc_cuesector>



	//Set the font and tiles to use.
	//Always invoke before any ClearVram()
	SetFontTable(font);
    3a36:	88 ee       	ldi	r24, 0xE8	; 232
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	0e 94 cc 10 	call	0x2198	; 0x2198 <SetFontTable>

	//Clear the screen (fills the vram with tile zero)
	ClearVram();
    3a3e:	0e 94 a6 10 	call	0x214c	; 0x214c <ClearVram>
    3a42:	c6 e0       	ldi	r28, 0x06	; 6
    3a44:	d0 e0       	ldi	r29, 0x00	; 0


	for(u8 x=6;x<34;x++){
		PrintChar(x,10,mmcGetChar());
    3a46:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mmcGetChar>
    3a4a:	48 2f       	mov	r20, r24
    3a4c:	6a e0       	ldi	r22, 0x0A	; 10
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	ce 01       	movw	r24, r28
    3a52:	0e 94 9f 1b 	call	0x373e	; 0x373e <PrintChar>
    3a56:	21 96       	adiw	r28, 0x01	; 1

	//Clear the screen (fills the vram with tile zero)
	ClearVram();


	for(u8 x=6;x<34;x++){
    3a58:	c2 32       	cpi	r28, 0x22	; 34
    3a5a:	d1 05       	cpc	r29, r1
    3a5c:	a1 f7       	brne	.-24     	; 0x3a46 <main+0x24>


	//Prints a string on the screen. Note that PSTR() is a macro 
	//that tells the compiler to store the string in flash.
	//14 is half the lenght of the "Hello world" string
	Print((SCREEN_TILES_H/2)-14, (SCREEN_TILES_V/2)-1, PSTR("Hello World From The Uzebox!"));
    3a5e:	40 ea       	ldi	r20, 0xA0	; 160
    3a60:	5b e1       	ldi	r21, 0x1B	; 27
    3a62:	68 e0       	ldi	r22, 0x08	; 8
    3a64:	70 e0       	ldi	r23, 0x00	; 0
    3a66:	86 e0       	ldi	r24, 0x06	; 6
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0e 94 84 1b 	call	0x3708	; 0x3708 <Print>

	while(1);
    3a6e:	ff cf       	rjmp	.-2      	; 0x3a6e <main+0x4c>

00003a70 <__udivmodhi4>:
    3a70:	aa 1b       	sub	r26, r26
    3a72:	bb 1b       	sub	r27, r27
    3a74:	51 e1       	ldi	r21, 0x11	; 17
    3a76:	07 c0       	rjmp	.+14     	; 0x3a86 <__udivmodhi4_ep>

00003a78 <__udivmodhi4_loop>:
    3a78:	aa 1f       	adc	r26, r26
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	a6 17       	cp	r26, r22
    3a7e:	b7 07       	cpc	r27, r23
    3a80:	10 f0       	brcs	.+4      	; 0x3a86 <__udivmodhi4_ep>
    3a82:	a6 1b       	sub	r26, r22
    3a84:	b7 0b       	sbc	r27, r23

00003a86 <__udivmodhi4_ep>:
    3a86:	88 1f       	adc	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	5a 95       	dec	r21
    3a8c:	a9 f7       	brne	.-22     	; 0x3a78 <__udivmodhi4_loop>
    3a8e:	80 95       	com	r24
    3a90:	90 95       	com	r25
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	08 95       	ret

00003a98 <__divmodhi4>:
    3a98:	97 fb       	bst	r25, 7
    3a9a:	07 2e       	mov	r0, r23
    3a9c:	16 f4       	brtc	.+4      	; 0x3aa2 <__divmodhi4+0xa>
    3a9e:	00 94       	com	r0
    3aa0:	07 d0       	rcall	.+14     	; 0x3ab0 <__divmodhi4_neg1>
    3aa2:	77 fd       	sbrc	r23, 7
    3aa4:	09 d0       	rcall	.+18     	; 0x3ab8 <__divmodhi4_neg2>
    3aa6:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__udivmodhi4>
    3aaa:	07 fc       	sbrc	r0, 7
    3aac:	05 d0       	rcall	.+10     	; 0x3ab8 <__divmodhi4_neg2>
    3aae:	3e f4       	brtc	.+14     	; 0x3abe <__divmodhi4_exit>

00003ab0 <__divmodhi4_neg1>:
    3ab0:	90 95       	com	r25
    3ab2:	81 95       	neg	r24
    3ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab6:	08 95       	ret

00003ab8 <__divmodhi4_neg2>:
    3ab8:	70 95       	com	r23
    3aba:	61 95       	neg	r22
    3abc:	7f 4f       	sbci	r23, 0xFF	; 255

00003abe <__divmodhi4_exit>:
    3abe:	08 95       	ret

00003ac0 <_exit>:
    3ac0:	f8 94       	cli

00003ac2 <__stop_program>:
    3ac2:	ff cf       	rjmp	.-2      	; 0x3ac2 <__stop_program>
